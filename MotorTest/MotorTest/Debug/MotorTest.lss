
MotorTest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800100  00000cfe  00000d92  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000cfe  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000639  00800114  00800114  00000da6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000da6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000dd8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001f0  00000000  00000000  00000e18  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000258d  00000000  00000000  00001008  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001007  00000000  00000000  00003595  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000153f  00000000  00000000  0000459c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004b8  00000000  00000000  00005adc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000d64  00000000  00000000  00005f94  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000147f  00000000  00000000  00006cf8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001e8  00000000  00000000  00008177  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	f4 c2       	rjmp	.+1512   	; 0x61e <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ee ef       	ldi	r30, 0xFE	; 254
  a0:	fc e0       	ldi	r31, 0x0C	; 12
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 31       	cpi	r26, 0x14	; 20
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	27 e0       	ldi	r18, 0x07	; 7
  b4:	a4 e1       	ldi	r26, 0x14	; 20
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ad 34       	cpi	r26, 0x4D	; 77
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	4b d1       	rcall	.+662    	; 0x35a <main>
  c4:	1a c6       	rjmp	.+3124   	; 0xcfa <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <pvPortMalloc>:

static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
  c8:	cf 93       	push	r28
  ca:	df 93       	push	r29
  cc:	ec 01       	movw	r28, r24
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
		}
	#endif

	vTaskSuspendAll();
  ce:	fa d3       	rcall	.+2036   	; 0x8c4 <vTaskSuspendAll>
	{
		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configTOTAL_HEAP_SIZE ) &&
  d0:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <__data_end>
  d4:	30 91 15 01 	lds	r19, 0x0115	; 0x800115 <__data_end+0x1>
  d8:	ce 01       	movw	r24, r28
  da:	82 0f       	add	r24, r18
  dc:	93 1f       	adc	r25, r19
  de:	8c 3d       	cpi	r24, 0xDC	; 220
  e0:	45 e0       	ldi	r20, 0x05	; 5
  e2:	94 07       	cpc	r25, r20
  e4:	58 f4       	brcc	.+22     	; 0xfc <pvPortMalloc+0x34>
  e6:	28 17       	cp	r18, r24
  e8:	39 07       	cpc	r19, r25
  ea:	58 f4       	brcc	.+22     	; 0x102 <pvPortMalloc+0x3a>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
  ec:	e9 01       	movw	r28, r18
  ee:	ca 5e       	subi	r28, 0xEA	; 234
  f0:	de 4f       	sbci	r29, 0xFE	; 254
			xNextFreeByte += xWantedSize;			
  f2:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <__data_end+0x1>
  f6:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <__data_end>
  fa:	05 c0       	rjmp	.+10     	; 0x106 <pvPortMalloc+0x3e>
static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
void *pvReturn = NULL; 
  fc:	c0 e0       	ldi	r28, 0x00	; 0
  fe:	d0 e0       	ldi	r29, 0x00	; 0
 100:	02 c0       	rjmp	.+4      	; 0x106 <pvPortMalloc+0x3e>
 102:	c0 e0       	ldi	r28, 0x00	; 0
 104:	d0 e0       	ldi	r29, 0x00	; 0
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
			xNextFreeByte += xWantedSize;			
		}	
	}
	xTaskResumeAll();
 106:	a5 d4       	rcall	.+2378   	; 0xa52 <xTaskResumeAll>
		}
	}
	#endif	

	return pvReturn;
}
 108:	ce 01       	movw	r24, r28
 10a:	df 91       	pop	r29
 10c:	cf 91       	pop	r28
 10e:	08 95       	ret

00000110 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 110:	08 95       	ret

00000112 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList *pxList )
{
 112:	fc 01       	movw	r30, r24
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
 114:	03 96       	adiw	r24, 0x03	; 3
 116:	92 83       	std	Z+2, r25	; 0x02
 118:	81 83       	std	Z+1, r24	; 0x01

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 11a:	2f ef       	ldi	r18, 0xFF	; 255
 11c:	3f ef       	ldi	r19, 0xFF	; 255
 11e:	34 83       	std	Z+4, r19	; 0x04
 120:	23 83       	std	Z+3, r18	; 0x03

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
 122:	96 83       	std	Z+6, r25	; 0x06
 124:	85 83       	std	Z+5, r24	; 0x05
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
 126:	90 87       	std	Z+8, r25	; 0x08
 128:	87 83       	std	Z+7, r24	; 0x07

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
 12a:	10 82       	st	Z, r1
 12c:	08 95       	ret

0000012e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 12e:	fc 01       	movw	r30, r24
 130:	11 86       	std	Z+9, r1	; 0x09
 132:	10 86       	std	Z+8, r1	; 0x08
 134:	08 95       	ret

00000136 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
{
 136:	cf 93       	push	r28
 138:	df 93       	push	r29
 13a:	fc 01       	movw	r30, r24
 13c:	db 01       	movw	r26, r22

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
 13e:	21 81       	ldd	r18, Z+1	; 0x01
 140:	32 81       	ldd	r19, Z+2	; 0x02

	pxNewListItem->pxNext = pxIndex->pxNext;
 142:	e9 01       	movw	r28, r18
 144:	8a 81       	ldd	r24, Y+2	; 0x02
 146:	9b 81       	ldd	r25, Y+3	; 0x03
 148:	13 96       	adiw	r26, 0x03	; 3
 14a:	9c 93       	st	X, r25
 14c:	8e 93       	st	-X, r24
 14e:	12 97       	sbiw	r26, 0x02	; 2
	pxNewListItem->pxPrevious = pxList->pxIndex;
 150:	81 81       	ldd	r24, Z+1	; 0x01
 152:	92 81       	ldd	r25, Z+2	; 0x02
 154:	15 96       	adiw	r26, 0x05	; 5
 156:	9c 93       	st	X, r25
 158:	8e 93       	st	-X, r24
 15a:	14 97       	sbiw	r26, 0x04	; 4
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
 15c:	8a 81       	ldd	r24, Y+2	; 0x02
 15e:	9b 81       	ldd	r25, Y+3	; 0x03
 160:	ec 01       	movw	r28, r24
 162:	7d 83       	std	Y+5, r23	; 0x05
 164:	6c 83       	std	Y+4, r22	; 0x04
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
 166:	e9 01       	movw	r28, r18
 168:	7b 83       	std	Y+3, r23	; 0x03
 16a:	6a 83       	std	Y+2, r22	; 0x02
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
 16c:	72 83       	std	Z+2, r23	; 0x02
 16e:	61 83       	std	Z+1, r22	; 0x01

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 170:	19 96       	adiw	r26, 0x09	; 9
 172:	fc 93       	st	X, r31
 174:	ee 93       	st	-X, r30
 176:	18 97       	sbiw	r26, 0x08	; 8

	( pxList->uxNumberOfItems )++;
 178:	80 81       	ld	r24, Z
 17a:	8f 5f       	subi	r24, 0xFF	; 255
 17c:	80 83       	st	Z, r24
}
 17e:	df 91       	pop	r29
 180:	cf 91       	pop	r28
 182:	08 95       	ret

00000184 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
 184:	cf 93       	push	r28
 186:	df 93       	push	r29
 188:	eb 01       	movw	r28, r22
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
 18a:	48 81       	ld	r20, Y
 18c:	59 81       	ldd	r21, Y+1	; 0x01
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 18e:	4f 3f       	cpi	r20, 0xFF	; 255
 190:	2f ef       	ldi	r18, 0xFF	; 255
 192:	52 07       	cpc	r21, r18
 194:	31 f4       	brne	.+12     	; 0x1a2 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 196:	dc 01       	movw	r26, r24
 198:	17 96       	adiw	r26, 0x07	; 7
 19a:	ed 91       	ld	r30, X+
 19c:	fc 91       	ld	r31, X
 19e:	18 97       	sbiw	r26, 0x08	; 8
 1a0:	17 c0       	rjmp	.+46     	; 0x1d0 <vListInsert+0x4c>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/
		
		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
 1a2:	fc 01       	movw	r30, r24
 1a4:	33 96       	adiw	r30, 0x03	; 3
 1a6:	dc 01       	movw	r26, r24
 1a8:	15 96       	adiw	r26, 0x05	; 5
 1aa:	2d 91       	ld	r18, X+
 1ac:	3c 91       	ld	r19, X
 1ae:	16 97       	sbiw	r26, 0x06	; 6
 1b0:	d9 01       	movw	r26, r18
 1b2:	2d 91       	ld	r18, X+
 1b4:	3c 91       	ld	r19, X
 1b6:	42 17       	cp	r20, r18
 1b8:	53 07       	cpc	r21, r19
 1ba:	50 f0       	brcs	.+20     	; 0x1d0 <vListInsert+0x4c>
 1bc:	02 80       	ldd	r0, Z+2	; 0x02
 1be:	f3 81       	ldd	r31, Z+3	; 0x03
 1c0:	e0 2d       	mov	r30, r0
 1c2:	a2 81       	ldd	r26, Z+2	; 0x02
 1c4:	b3 81       	ldd	r27, Z+3	; 0x03
 1c6:	2d 91       	ld	r18, X+
 1c8:	3c 91       	ld	r19, X
 1ca:	42 17       	cp	r20, r18
 1cc:	53 07       	cpc	r21, r19
 1ce:	b0 f7       	brcc	.-20     	; 0x1bc <vListInsert+0x38>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 1d0:	a2 81       	ldd	r26, Z+2	; 0x02
 1d2:	b3 81       	ldd	r27, Z+3	; 0x03
 1d4:	bb 83       	std	Y+3, r27	; 0x03
 1d6:	aa 83       	std	Y+2, r26	; 0x02
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
 1d8:	15 96       	adiw	r26, 0x05	; 5
 1da:	dc 93       	st	X, r29
 1dc:	ce 93       	st	-X, r28
 1de:	14 97       	sbiw	r26, 0x04	; 4
	pxNewListItem->pxPrevious = pxIterator;
 1e0:	fd 83       	std	Y+5, r31	; 0x05
 1e2:	ec 83       	std	Y+4, r30	; 0x04
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
 1e4:	d3 83       	std	Z+3, r29	; 0x03
 1e6:	c2 83       	std	Z+2, r28	; 0x02

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 1e8:	99 87       	std	Y+9, r25	; 0x09
 1ea:	88 87       	std	Y+8, r24	; 0x08

	( pxList->uxNumberOfItems )++;
 1ec:	fc 01       	movw	r30, r24
 1ee:	20 81       	ld	r18, Z
 1f0:	2f 5f       	subi	r18, 0xFF	; 255
 1f2:	20 83       	st	Z, r18
}
 1f4:	df 91       	pop	r29
 1f6:	cf 91       	pop	r28
 1f8:	08 95       	ret

000001fa <vListRemove>:
/*-----------------------------------------------------------*/

void vListRemove( xListItem *pxItemToRemove )
{
 1fa:	fc 01       	movw	r30, r24
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 1fc:	a2 81       	ldd	r26, Z+2	; 0x02
 1fe:	b3 81       	ldd	r27, Z+3	; 0x03
 200:	84 81       	ldd	r24, Z+4	; 0x04
 202:	95 81       	ldd	r25, Z+5	; 0x05
 204:	15 96       	adiw	r26, 0x05	; 5
 206:	9c 93       	st	X, r25
 208:	8e 93       	st	-X, r24
 20a:	14 97       	sbiw	r26, 0x04	; 4
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 20c:	a4 81       	ldd	r26, Z+4	; 0x04
 20e:	b5 81       	ldd	r27, Z+5	; 0x05
 210:	82 81       	ldd	r24, Z+2	; 0x02
 212:	93 81       	ldd	r25, Z+3	; 0x03
 214:	13 96       	adiw	r26, 0x03	; 3
 216:	9c 93       	st	X, r25
 218:	8e 93       	st	-X, r24
 21a:	12 97       	sbiw	r26, 0x02	; 2
	
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
 21c:	a0 85       	ldd	r26, Z+8	; 0x08
 21e:	b1 85       	ldd	r27, Z+9	; 0x09

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 220:	11 96       	adiw	r26, 0x01	; 1
 222:	8d 91       	ld	r24, X+
 224:	9c 91       	ld	r25, X
 226:	12 97       	sbiw	r26, 0x02	; 2
 228:	8e 17       	cp	r24, r30
 22a:	9f 07       	cpc	r25, r31
 22c:	31 f4       	brne	.+12     	; 0x23a <vListRemove+0x40>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 22e:	84 81       	ldd	r24, Z+4	; 0x04
 230:	95 81       	ldd	r25, Z+5	; 0x05
 232:	12 96       	adiw	r26, 0x02	; 2
 234:	9c 93       	st	X, r25
 236:	8e 93       	st	-X, r24
 238:	11 97       	sbiw	r26, 0x01	; 1
	}

	pxItemToRemove->pvContainer = NULL;
 23a:	11 86       	std	Z+9, r1	; 0x09
 23c:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
 23e:	8c 91       	ld	r24, X
 240:	81 50       	subi	r24, 0x01	; 1
 242:	8c 93       	st	X, r24
 244:	08 95       	ret

00000246 <Motor_Tick>:
	motor_state = INIT;
}

void Motor_Tick(){
	//Actions
	switch(motor_state){
 246:	80 91 4c 07 	lds	r24, 0x074C	; 0x80074c <motor_state>
 24a:	82 30       	cpi	r24, 0x02	; 2
 24c:	19 f0       	breq	.+6      	; 0x254 <Motor_Tick+0xe>
 24e:	83 30       	cpi	r24, 0x03	; 3
 250:	89 f0       	breq	.+34     	; 0x274 <Motor_Tick+0x2e>
 252:	20 c0       	rjmp	.+64     	; 0x294 <Motor_Tick+0x4e>
		case INIT:
		break;
		case Wait:
		break;
		case Move:
		PORTA = 0x01;
 254:	81 e0       	ldi	r24, 0x01	; 1
 256:	82 b9       	out	0x02, r24	; 2
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 258:	8f ec       	ldi	r24, 0xCF	; 207
 25a:	97 e0       	ldi	r25, 0x07	; 7
 25c:	01 97       	sbiw	r24, 0x01	; 1
 25e:	f1 f7       	brne	.-4      	; 0x25c <Motor_Tick+0x16>
 260:	00 c0       	rjmp	.+0      	; 0x262 <Motor_Tick+0x1c>
 262:	00 00       	nop
		_delay_ms(1);
		PORTA = 0x00;
 264:	12 b8       	out	0x02, r1	; 2
 266:	8f ec       	ldi	r24, 0xCF	; 207
 268:	97 e0       	ldi	r25, 0x07	; 7
 26a:	01 97       	sbiw	r24, 0x01	; 1
 26c:	f1 f7       	brne	.-4      	; 0x26a <Motor_Tick+0x24>
 26e:	00 c0       	rjmp	.+0      	; 0x270 <Motor_Tick+0x2a>
 270:	00 00       	nop
 272:	10 c0       	rjmp	.+32     	; 0x294 <Motor_Tick+0x4e>
		_delay_ms(1);
		break;
		case MoveB:
		PORTA = 0x03;
 274:	83 e0       	ldi	r24, 0x03	; 3
 276:	82 b9       	out	0x02, r24	; 2
 278:	8f ec       	ldi	r24, 0xCF	; 207
 27a:	97 e0       	ldi	r25, 0x07	; 7
 27c:	01 97       	sbiw	r24, 0x01	; 1
 27e:	f1 f7       	brne	.-4      	; 0x27c <Motor_Tick+0x36>
 280:	00 c0       	rjmp	.+0      	; 0x282 <Motor_Tick+0x3c>
 282:	00 00       	nop
		_delay_ms(1);
		PORTA = 0x02;
 284:	82 e0       	ldi	r24, 0x02	; 2
 286:	82 b9       	out	0x02, r24	; 2
 288:	8f ec       	ldi	r24, 0xCF	; 207
 28a:	97 e0       	ldi	r25, 0x07	; 7
 28c:	01 97       	sbiw	r24, 0x01	; 1
 28e:	f1 f7       	brne	.-4      	; 0x28c <Motor_Tick+0x46>
 290:	00 c0       	rjmp	.+0      	; 0x292 <Motor_Tick+0x4c>
 292:	00 00       	nop
		_delay_ms(1);
		break;
	}
	//Transitions
	switch(motor_state){
 294:	80 91 4c 07 	lds	r24, 0x074C	; 0x80074c <motor_state>
 298:	81 30       	cpi	r24, 0x01	; 1
 29a:	51 f0       	breq	.+20     	; 0x2b0 <Motor_Tick+0x6a>
 29c:	28 f0       	brcs	.+10     	; 0x2a8 <Motor_Tick+0x62>
 29e:	82 30       	cpi	r24, 0x02	; 2
 2a0:	f1 f0       	breq	.+60     	; 0x2de <Motor_Tick+0x98>
 2a2:	83 30       	cpi	r24, 0x03	; 3
 2a4:	41 f1       	breq	.+80     	; 0x2f6 <Motor_Tick+0xb0>
 2a6:	08 95       	ret
		case INIT:
		motor_state = Wait;
 2a8:	81 e0       	ldi	r24, 0x01	; 1
 2aa:	80 93 4c 07 	sts	0x074C, r24	; 0x80074c <motor_state>
		break;
 2ae:	08 95       	ret
		case Wait:
		if((~PIND & 0x03) == 0x01)
 2b0:	89 b1       	in	r24, 0x09	; 9
 2b2:	90 e0       	ldi	r25, 0x00	; 0
 2b4:	80 95       	com	r24
 2b6:	90 95       	com	r25
 2b8:	83 70       	andi	r24, 0x03	; 3
 2ba:	99 27       	eor	r25, r25
 2bc:	01 97       	sbiw	r24, 0x01	; 1
 2be:	19 f4       	brne	.+6      	; 0x2c6 <Motor_Tick+0x80>
		motor_state = Move;
 2c0:	82 e0       	ldi	r24, 0x02	; 2
 2c2:	80 93 4c 07 	sts	0x074C, r24	; 0x80074c <motor_state>
		if((~PIND & 0x03) == 0x02)
 2c6:	89 b1       	in	r24, 0x09	; 9
 2c8:	90 e0       	ldi	r25, 0x00	; 0
 2ca:	80 95       	com	r24
 2cc:	90 95       	com	r25
 2ce:	83 70       	andi	r24, 0x03	; 3
 2d0:	99 27       	eor	r25, r25
 2d2:	02 97       	sbiw	r24, 0x02	; 2
 2d4:	d9 f4       	brne	.+54     	; 0x30c <Motor_Tick+0xc6>
		motor_state = MoveB;
 2d6:	83 e0       	ldi	r24, 0x03	; 3
 2d8:	80 93 4c 07 	sts	0x074C, r24	; 0x80074c <motor_state>
 2dc:	08 95       	ret
		break;
		case Move:
		if((~PIND & 0x03) != 0x01)
 2de:	89 b1       	in	r24, 0x09	; 9
 2e0:	90 e0       	ldi	r25, 0x00	; 0
 2e2:	80 95       	com	r24
 2e4:	90 95       	com	r25
 2e6:	83 70       	andi	r24, 0x03	; 3
 2e8:	99 27       	eor	r25, r25
 2ea:	01 97       	sbiw	r24, 0x01	; 1
 2ec:	79 f0       	breq	.+30     	; 0x30c <Motor_Tick+0xc6>
		motor_state = Wait;
 2ee:	81 e0       	ldi	r24, 0x01	; 1
 2f0:	80 93 4c 07 	sts	0x074C, r24	; 0x80074c <motor_state>
 2f4:	08 95       	ret
		break;
		case MoveB:
		if((~PIND & 0x03) != 0x02)
 2f6:	89 b1       	in	r24, 0x09	; 9
 2f8:	90 e0       	ldi	r25, 0x00	; 0
 2fa:	80 95       	com	r24
 2fc:	90 95       	com	r25
 2fe:	83 70       	andi	r24, 0x03	; 3
 300:	99 27       	eor	r25, r25
 302:	02 97       	sbiw	r24, 0x02	; 2
 304:	19 f0       	breq	.+6      	; 0x30c <Motor_Tick+0xc6>
		motor_state = Wait;
 306:	81 e0       	ldi	r24, 0x01	; 1
 308:	80 93 4c 07 	sts	0x074C, r24	; 0x80074c <motor_state>
 30c:	08 95       	ret

0000030e <MotorSecTask>:
#include "usart_ATmega1284.h"
#include <util/delay.h>
enum MotorState {INIT,Wait, Move, MoveB} motor_state;

void Motor_Init(){
	motor_state = INIT;
 30e:	10 92 4c 07 	sts	0x074C, r1	; 0x80074c <motor_state>
void MotorSecTask()
{
	Motor_Init();
	for(;;)
	{
		Motor_Tick();
 312:	99 df       	rcall	.-206    	; 0x246 <Motor_Tick>
		vTaskDelay(1);
 314:	81 e0       	ldi	r24, 0x01	; 1
 316:	90 e0       	ldi	r25, 0x00	; 0
 318:	1d d4       	rcall	.+2106   	; 0xb54 <vTaskDelay>
	}
 31a:	fb cf       	rjmp	.-10     	; 0x312 <MotorSecTask+0x4>

0000031c <StartSecPulse>:
}

void StartSecPulse(unsigned portBASE_TYPE Priority)
{
 31c:	af 92       	push	r10
 31e:	bf 92       	push	r11
 320:	cf 92       	push	r12
 322:	df 92       	push	r13
 324:	ef 92       	push	r14
 326:	ff 92       	push	r15
 328:	0f 93       	push	r16
	xTaskCreate(MotorSecTask, (signed portCHAR *)"MotorSecTask", configMINIMAL_STACK_SIZE, NULL, Priority, NULL );
 32a:	a1 2c       	mov	r10, r1
 32c:	b1 2c       	mov	r11, r1
 32e:	c1 2c       	mov	r12, r1
 330:	d1 2c       	mov	r13, r1
 332:	e1 2c       	mov	r14, r1
 334:	f1 2c       	mov	r15, r1
 336:	08 2f       	mov	r16, r24
 338:	20 e0       	ldi	r18, 0x00	; 0
 33a:	30 e0       	ldi	r19, 0x00	; 0
 33c:	45 e5       	ldi	r20, 0x55	; 85
 33e:	50 e0       	ldi	r21, 0x00	; 0
 340:	62 e0       	ldi	r22, 0x02	; 2
 342:	71 e0       	ldi	r23, 0x01	; 1
 344:	87 e8       	ldi	r24, 0x87	; 135
 346:	91 e0       	ldi	r25, 0x01	; 1
 348:	a1 d1       	rcall	.+834    	; 0x68c <xTaskGenericCreate>
}
 34a:	0f 91       	pop	r16
 34c:	ff 90       	pop	r15
 34e:	ef 90       	pop	r14
 350:	df 90       	pop	r13
 352:	cf 90       	pop	r12
 354:	bf 90       	pop	r11
 356:	af 90       	pop	r10
 358:	08 95       	ret

0000035a <main>:

int main(void)
{
	DDRA = 0xFF; PORTA=0x00;
 35a:	8f ef       	ldi	r24, 0xFF	; 255
 35c:	81 b9       	out	0x01, r24	; 1
 35e:	12 b8       	out	0x02, r1	; 2
	DDRD = 0x00; PORTD = 0xFF;
 360:	1a b8       	out	0x0a, r1	; 10
 362:	8b b9       	out	0x0b, r24	; 11
	//Start Tasks
	StartSecPulse(1);
 364:	81 e0       	ldi	r24, 0x01	; 1
 366:	da df       	rcall	.-76     	; 0x31c <StartSecPulse>
	//RunSchedular
	vTaskStartScheduler();
 368:	84 d2       	rcall	.+1288   	; 0x872 <vTaskStartScheduler>
	
	return 0;
}
 36a:	80 e0       	ldi	r24, 0x00	; 0
 36c:	90 e0       	ldi	r25, 0x00	; 0
 36e:	08 95       	ret

00000370 <pxPortInitialiseStack>:
	return pdTRUE;
}
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
 370:	31 e1       	ldi	r19, 0x11	; 17
 372:	fc 01       	movw	r30, r24
 374:	30 83       	st	Z, r19
 376:	31 97       	sbiw	r30, 0x01	; 1
 378:	22 e2       	ldi	r18, 0x22	; 34
 37a:	20 83       	st	Z, r18
 37c:	31 97       	sbiw	r30, 0x01	; 1
 37e:	a3 e3       	ldi	r26, 0x33	; 51
 380:	a0 83       	st	Z, r26
 382:	31 97       	sbiw	r30, 0x01	; 1
 384:	60 83       	st	Z, r22
 386:	31 97       	sbiw	r30, 0x01	; 1
 388:	70 83       	st	Z, r23
 38a:	31 97       	sbiw	r30, 0x01	; 1
 38c:	10 82       	st	Z, r1
 38e:	31 97       	sbiw	r30, 0x01	; 1
 390:	60 e8       	ldi	r22, 0x80	; 128
 392:	60 83       	st	Z, r22
 394:	31 97       	sbiw	r30, 0x01	; 1
 396:	10 82       	st	Z, r1
 398:	31 97       	sbiw	r30, 0x01	; 1
 39a:	62 e0       	ldi	r22, 0x02	; 2
 39c:	60 83       	st	Z, r22
 39e:	31 97       	sbiw	r30, 0x01	; 1
 3a0:	63 e0       	ldi	r22, 0x03	; 3
 3a2:	60 83       	st	Z, r22
 3a4:	31 97       	sbiw	r30, 0x01	; 1
 3a6:	64 e0       	ldi	r22, 0x04	; 4
 3a8:	60 83       	st	Z, r22
 3aa:	31 97       	sbiw	r30, 0x01	; 1
 3ac:	65 e0       	ldi	r22, 0x05	; 5
 3ae:	60 83       	st	Z, r22
 3b0:	31 97       	sbiw	r30, 0x01	; 1
 3b2:	66 e0       	ldi	r22, 0x06	; 6
 3b4:	60 83       	st	Z, r22
 3b6:	31 97       	sbiw	r30, 0x01	; 1
 3b8:	67 e0       	ldi	r22, 0x07	; 7
 3ba:	60 83       	st	Z, r22
 3bc:	31 97       	sbiw	r30, 0x01	; 1
 3be:	68 e0       	ldi	r22, 0x08	; 8
 3c0:	60 83       	st	Z, r22
 3c2:	31 97       	sbiw	r30, 0x01	; 1
 3c4:	69 e0       	ldi	r22, 0x09	; 9
 3c6:	60 83       	st	Z, r22
 3c8:	31 97       	sbiw	r30, 0x01	; 1
 3ca:	60 e1       	ldi	r22, 0x10	; 16
 3cc:	60 83       	st	Z, r22
 3ce:	31 97       	sbiw	r30, 0x01	; 1
 3d0:	30 83       	st	Z, r19
 3d2:	31 97       	sbiw	r30, 0x01	; 1
 3d4:	32 e1       	ldi	r19, 0x12	; 18
 3d6:	30 83       	st	Z, r19
 3d8:	31 97       	sbiw	r30, 0x01	; 1
 3da:	33 e1       	ldi	r19, 0x13	; 19
 3dc:	30 83       	st	Z, r19
 3de:	31 97       	sbiw	r30, 0x01	; 1
 3e0:	34 e1       	ldi	r19, 0x14	; 20
 3e2:	30 83       	st	Z, r19
 3e4:	31 97       	sbiw	r30, 0x01	; 1
 3e6:	35 e1       	ldi	r19, 0x15	; 21
 3e8:	30 83       	st	Z, r19
 3ea:	31 97       	sbiw	r30, 0x01	; 1
 3ec:	36 e1       	ldi	r19, 0x16	; 22
 3ee:	30 83       	st	Z, r19
 3f0:	31 97       	sbiw	r30, 0x01	; 1
 3f2:	37 e1       	ldi	r19, 0x17	; 23
 3f4:	30 83       	st	Z, r19
 3f6:	31 97       	sbiw	r30, 0x01	; 1
 3f8:	38 e1       	ldi	r19, 0x18	; 24
 3fa:	30 83       	st	Z, r19
 3fc:	31 97       	sbiw	r30, 0x01	; 1
 3fe:	39 e1       	ldi	r19, 0x19	; 25
 400:	30 83       	st	Z, r19
 402:	31 97       	sbiw	r30, 0x01	; 1
 404:	30 e2       	ldi	r19, 0x20	; 32
 406:	30 83       	st	Z, r19
 408:	31 97       	sbiw	r30, 0x01	; 1
 40a:	31 e2       	ldi	r19, 0x21	; 33
 40c:	30 83       	st	Z, r19
 40e:	31 97       	sbiw	r30, 0x01	; 1
 410:	20 83       	st	Z, r18
 412:	31 97       	sbiw	r30, 0x01	; 1
 414:	23 e2       	ldi	r18, 0x23	; 35
 416:	20 83       	st	Z, r18
 418:	31 97       	sbiw	r30, 0x01	; 1
 41a:	40 83       	st	Z, r20
 41c:	31 97       	sbiw	r30, 0x01	; 1
 41e:	50 83       	st	Z, r21
 420:	31 97       	sbiw	r30, 0x01	; 1
 422:	26 e2       	ldi	r18, 0x26	; 38
 424:	20 83       	st	Z, r18
 426:	31 97       	sbiw	r30, 0x01	; 1
 428:	27 e2       	ldi	r18, 0x27	; 39
 42a:	20 83       	st	Z, r18
 42c:	31 97       	sbiw	r30, 0x01	; 1
 42e:	28 e2       	ldi	r18, 0x28	; 40
 430:	20 83       	st	Z, r18
 432:	31 97       	sbiw	r30, 0x01	; 1
 434:	29 e2       	ldi	r18, 0x29	; 41
 436:	20 83       	st	Z, r18
 438:	31 97       	sbiw	r30, 0x01	; 1
 43a:	20 e3       	ldi	r18, 0x30	; 48
 43c:	20 83       	st	Z, r18
 43e:	31 97       	sbiw	r30, 0x01	; 1
 440:	21 e3       	ldi	r18, 0x31	; 49
 442:	20 83       	st	Z, r18
 444:	86 97       	sbiw	r24, 0x26	; 38
 446:	08 95       	ret

00000448 <xPortStartScheduler>:
 448:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 44c:	8c e7       	ldi	r24, 0x7C	; 124
 44e:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 452:	8b e0       	ldi	r24, 0x0B	; 11
 454:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 458:	ef e6       	ldi	r30, 0x6F	; 111
 45a:	f0 e0       	ldi	r31, 0x00	; 0
 45c:	80 81       	ld	r24, Z
 45e:	82 60       	ori	r24, 0x02	; 2
 460:	80 83       	st	Z, r24
 462:	a0 91 4a 07 	lds	r26, 0x074A	; 0x80074a <pxCurrentTCB>
 466:	b0 91 4b 07 	lds	r27, 0x074B	; 0x80074b <pxCurrentTCB+0x1>
 46a:	cd 91       	ld	r28, X+
 46c:	cd bf       	out	0x3d, r28	; 61
 46e:	dd 91       	ld	r29, X+
 470:	de bf       	out	0x3e, r29	; 62
 472:	ff 91       	pop	r31
 474:	ef 91       	pop	r30
 476:	df 91       	pop	r29
 478:	cf 91       	pop	r28
 47a:	bf 91       	pop	r27
 47c:	af 91       	pop	r26
 47e:	9f 91       	pop	r25
 480:	8f 91       	pop	r24
 482:	7f 91       	pop	r23
 484:	6f 91       	pop	r22
 486:	5f 91       	pop	r21
 488:	4f 91       	pop	r20
 48a:	3f 91       	pop	r19
 48c:	2f 91       	pop	r18
 48e:	1f 91       	pop	r17
 490:	0f 91       	pop	r16
 492:	ff 90       	pop	r15
 494:	ef 90       	pop	r14
 496:	df 90       	pop	r13
 498:	cf 90       	pop	r12
 49a:	bf 90       	pop	r11
 49c:	af 90       	pop	r10
 49e:	9f 90       	pop	r9
 4a0:	8f 90       	pop	r8
 4a2:	7f 90       	pop	r7
 4a4:	6f 90       	pop	r6
 4a6:	5f 90       	pop	r5
 4a8:	4f 90       	pop	r4
 4aa:	3f 90       	pop	r3
 4ac:	2f 90       	pop	r2
 4ae:	1f 90       	pop	r1
 4b0:	0f 90       	pop	r0
 4b2:	0f be       	out	0x3f, r0	; 63
 4b4:	0f 90       	pop	r0
 4b6:	08 95       	ret
 4b8:	81 e0       	ldi	r24, 0x01	; 1
 4ba:	08 95       	ret

000004bc <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
 4bc:	0f 92       	push	r0
 4be:	0f b6       	in	r0, 0x3f	; 63
 4c0:	f8 94       	cli
 4c2:	0f 92       	push	r0
 4c4:	1f 92       	push	r1
 4c6:	11 24       	eor	r1, r1
 4c8:	2f 92       	push	r2
 4ca:	3f 92       	push	r3
 4cc:	4f 92       	push	r4
 4ce:	5f 92       	push	r5
 4d0:	6f 92       	push	r6
 4d2:	7f 92       	push	r7
 4d4:	8f 92       	push	r8
 4d6:	9f 92       	push	r9
 4d8:	af 92       	push	r10
 4da:	bf 92       	push	r11
 4dc:	cf 92       	push	r12
 4de:	df 92       	push	r13
 4e0:	ef 92       	push	r14
 4e2:	ff 92       	push	r15
 4e4:	0f 93       	push	r16
 4e6:	1f 93       	push	r17
 4e8:	2f 93       	push	r18
 4ea:	3f 93       	push	r19
 4ec:	4f 93       	push	r20
 4ee:	5f 93       	push	r21
 4f0:	6f 93       	push	r22
 4f2:	7f 93       	push	r23
 4f4:	8f 93       	push	r24
 4f6:	9f 93       	push	r25
 4f8:	af 93       	push	r26
 4fa:	bf 93       	push	r27
 4fc:	cf 93       	push	r28
 4fe:	df 93       	push	r29
 500:	ef 93       	push	r30
 502:	ff 93       	push	r31
 504:	a0 91 4a 07 	lds	r26, 0x074A	; 0x80074a <pxCurrentTCB>
 508:	b0 91 4b 07 	lds	r27, 0x074B	; 0x80074b <pxCurrentTCB+0x1>
 50c:	0d b6       	in	r0, 0x3d	; 61
 50e:	0d 92       	st	X+, r0
 510:	0e b6       	in	r0, 0x3e	; 62
 512:	0d 92       	st	X+, r0
	vTaskSwitchContext();
 514:	70 d3       	rcall	.+1760   	; 0xbf6 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
 516:	a0 91 4a 07 	lds	r26, 0x074A	; 0x80074a <pxCurrentTCB>
 51a:	b0 91 4b 07 	lds	r27, 0x074B	; 0x80074b <pxCurrentTCB+0x1>
 51e:	cd 91       	ld	r28, X+
 520:	cd bf       	out	0x3d, r28	; 61
 522:	dd 91       	ld	r29, X+
 524:	de bf       	out	0x3e, r29	; 62
 526:	ff 91       	pop	r31
 528:	ef 91       	pop	r30
 52a:	df 91       	pop	r29
 52c:	cf 91       	pop	r28
 52e:	bf 91       	pop	r27
 530:	af 91       	pop	r26
 532:	9f 91       	pop	r25
 534:	8f 91       	pop	r24
 536:	7f 91       	pop	r23
 538:	6f 91       	pop	r22
 53a:	5f 91       	pop	r21
 53c:	4f 91       	pop	r20
 53e:	3f 91       	pop	r19
 540:	2f 91       	pop	r18
 542:	1f 91       	pop	r17
 544:	0f 91       	pop	r16
 546:	ff 90       	pop	r15
 548:	ef 90       	pop	r14
 54a:	df 90       	pop	r13
 54c:	cf 90       	pop	r12
 54e:	bf 90       	pop	r11
 550:	af 90       	pop	r10
 552:	9f 90       	pop	r9
 554:	8f 90       	pop	r8
 556:	7f 90       	pop	r7
 558:	6f 90       	pop	r6
 55a:	5f 90       	pop	r5
 55c:	4f 90       	pop	r4
 55e:	3f 90       	pop	r3
 560:	2f 90       	pop	r2
 562:	1f 90       	pop	r1
 564:	0f 90       	pop	r0
 566:	0f be       	out	0x3f, r0	; 63
 568:	0f 90       	pop	r0

	asm volatile ( "ret" );
 56a:	08 95       	ret

0000056c <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
 56c:	0f 92       	push	r0
 56e:	0f b6       	in	r0, 0x3f	; 63
 570:	f8 94       	cli
 572:	0f 92       	push	r0
 574:	1f 92       	push	r1
 576:	11 24       	eor	r1, r1
 578:	2f 92       	push	r2
 57a:	3f 92       	push	r3
 57c:	4f 92       	push	r4
 57e:	5f 92       	push	r5
 580:	6f 92       	push	r6
 582:	7f 92       	push	r7
 584:	8f 92       	push	r8
 586:	9f 92       	push	r9
 588:	af 92       	push	r10
 58a:	bf 92       	push	r11
 58c:	cf 92       	push	r12
 58e:	df 92       	push	r13
 590:	ef 92       	push	r14
 592:	ff 92       	push	r15
 594:	0f 93       	push	r16
 596:	1f 93       	push	r17
 598:	2f 93       	push	r18
 59a:	3f 93       	push	r19
 59c:	4f 93       	push	r20
 59e:	5f 93       	push	r21
 5a0:	6f 93       	push	r22
 5a2:	7f 93       	push	r23
 5a4:	8f 93       	push	r24
 5a6:	9f 93       	push	r25
 5a8:	af 93       	push	r26
 5aa:	bf 93       	push	r27
 5ac:	cf 93       	push	r28
 5ae:	df 93       	push	r29
 5b0:	ef 93       	push	r30
 5b2:	ff 93       	push	r31
 5b4:	a0 91 4a 07 	lds	r26, 0x074A	; 0x80074a <pxCurrentTCB>
 5b8:	b0 91 4b 07 	lds	r27, 0x074B	; 0x80074b <pxCurrentTCB+0x1>
 5bc:	0d b6       	in	r0, 0x3d	; 61
 5be:	0d 92       	st	X+, r0
 5c0:	0e b6       	in	r0, 0x3e	; 62
 5c2:	0d 92       	st	X+, r0
	vTaskIncrementTick();
 5c4:	85 d1       	rcall	.+778    	; 0x8d0 <vTaskIncrementTick>
	vTaskSwitchContext();
 5c6:	17 d3       	rcall	.+1582   	; 0xbf6 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
 5c8:	a0 91 4a 07 	lds	r26, 0x074A	; 0x80074a <pxCurrentTCB>
 5cc:	b0 91 4b 07 	lds	r27, 0x074B	; 0x80074b <pxCurrentTCB+0x1>
 5d0:	cd 91       	ld	r28, X+
 5d2:	cd bf       	out	0x3d, r28	; 61
 5d4:	dd 91       	ld	r29, X+
 5d6:	de bf       	out	0x3e, r29	; 62
 5d8:	ff 91       	pop	r31
 5da:	ef 91       	pop	r30
 5dc:	df 91       	pop	r29
 5de:	cf 91       	pop	r28
 5e0:	bf 91       	pop	r27
 5e2:	af 91       	pop	r26
 5e4:	9f 91       	pop	r25
 5e6:	8f 91       	pop	r24
 5e8:	7f 91       	pop	r23
 5ea:	6f 91       	pop	r22
 5ec:	5f 91       	pop	r21
 5ee:	4f 91       	pop	r20
 5f0:	3f 91       	pop	r19
 5f2:	2f 91       	pop	r18
 5f4:	1f 91       	pop	r17
 5f6:	0f 91       	pop	r16
 5f8:	ff 90       	pop	r15
 5fa:	ef 90       	pop	r14
 5fc:	df 90       	pop	r13
 5fe:	cf 90       	pop	r12
 600:	bf 90       	pop	r11
 602:	af 90       	pop	r10
 604:	9f 90       	pop	r9
 606:	8f 90       	pop	r8
 608:	7f 90       	pop	r7
 60a:	6f 90       	pop	r6
 60c:	5f 90       	pop	r5
 60e:	4f 90       	pop	r4
 610:	3f 90       	pop	r3
 612:	2f 90       	pop	r2
 614:	1f 90       	pop	r1
 616:	0f 90       	pop	r0
 618:	0f be       	out	0x3f, r0	; 63
 61a:	0f 90       	pop	r0

	asm volatile ( "ret" );
 61c:	08 95       	ret

0000061e <__vector_13>:
	 * count is incremented after the context is saved.
	 */
	void TIMER1_COMPA_vect( void ) __attribute__ ( ( signal, naked ) );
	void TIMER1_COMPA_vect( void )
	{
		vPortYieldFromTick();
 61e:	a6 df       	rcall	.-180    	; 0x56c <vPortYieldFromTick>
		asm volatile ( "reti" );
 620:	18 95       	reti

00000622 <prvAddCurrentTaskToDelayedList>:
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
		{
			portYIELD_WITHIN_API();
		}
	}
 622:	cf 93       	push	r28
 624:	df 93       	push	r29
 626:	ec 01       	movw	r28, r24
 628:	e0 91 4a 07 	lds	r30, 0x074A	; 0x80074a <pxCurrentTCB>
 62c:	f0 91 4b 07 	lds	r31, 0x074B	; 0x80074b <pxCurrentTCB+0x1>
 630:	93 83       	std	Z+3, r25	; 0x03
 632:	82 83       	std	Z+2, r24	; 0x02
 634:	80 91 fa 06 	lds	r24, 0x06FA	; 0x8006fa <xTickCount>
 638:	90 91 fb 06 	lds	r25, 0x06FB	; 0x8006fb <xTickCount+0x1>
 63c:	c8 17       	cp	r28, r24
 63e:	d9 07       	cpc	r29, r25
 640:	60 f4       	brcc	.+24     	; 0x65a <prvAddCurrentTaskToDelayedList+0x38>
 642:	60 91 4a 07 	lds	r22, 0x074A	; 0x80074a <pxCurrentTCB>
 646:	70 91 4b 07 	lds	r23, 0x074B	; 0x80074b <pxCurrentTCB+0x1>
 64a:	80 91 10 07 	lds	r24, 0x0710	; 0x800710 <pxOverflowDelayedTaskList>
 64e:	90 91 11 07 	lds	r25, 0x0711	; 0x800711 <pxOverflowDelayedTaskList+0x1>
 652:	6e 5f       	subi	r22, 0xFE	; 254
 654:	7f 4f       	sbci	r23, 0xFF	; 255
 656:	96 dd       	rcall	.-1236   	; 0x184 <vListInsert>
 658:	16 c0       	rjmp	.+44     	; 0x686 <prvAddCurrentTaskToDelayedList+0x64>
 65a:	60 91 4a 07 	lds	r22, 0x074A	; 0x80074a <pxCurrentTCB>
 65e:	70 91 4b 07 	lds	r23, 0x074B	; 0x80074b <pxCurrentTCB+0x1>
 662:	80 91 12 07 	lds	r24, 0x0712	; 0x800712 <pxDelayedTaskList>
 666:	90 91 13 07 	lds	r25, 0x0713	; 0x800713 <pxDelayedTaskList+0x1>
 66a:	6e 5f       	subi	r22, 0xFE	; 254
 66c:	7f 4f       	sbci	r23, 0xFF	; 255
 66e:	8a dd       	rcall	.-1260   	; 0x184 <vListInsert>
 670:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 674:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 678:	c8 17       	cp	r28, r24
 67a:	d9 07       	cpc	r29, r25
 67c:	20 f4       	brcc	.+8      	; 0x686 <prvAddCurrentTaskToDelayedList+0x64>
 67e:	d0 93 01 01 	sts	0x0101, r29	; 0x800101 <__data_start+0x1>
 682:	c0 93 00 01 	sts	0x0100, r28	; 0x800100 <__data_start>
 686:	df 91       	pop	r29
 688:	cf 91       	pop	r28
 68a:	08 95       	ret

0000068c <xTaskGenericCreate>:
 68c:	4f 92       	push	r4
 68e:	5f 92       	push	r5
 690:	6f 92       	push	r6
 692:	7f 92       	push	r7
 694:	8f 92       	push	r8
 696:	9f 92       	push	r9
 698:	af 92       	push	r10
 69a:	bf 92       	push	r11
 69c:	cf 92       	push	r12
 69e:	df 92       	push	r13
 6a0:	ef 92       	push	r14
 6a2:	ff 92       	push	r15
 6a4:	0f 93       	push	r16
 6a6:	1f 93       	push	r17
 6a8:	cf 93       	push	r28
 6aa:	df 93       	push	r29
 6ac:	5c 01       	movw	r10, r24
 6ae:	4b 01       	movw	r8, r22
 6b0:	3a 01       	movw	r6, r20
 6b2:	29 01       	movw	r4, r18
 6b4:	81 e2       	ldi	r24, 0x21	; 33
 6b6:	90 e0       	ldi	r25, 0x00	; 0
 6b8:	07 dd       	rcall	.-1522   	; 0xc8 <pvPortMalloc>
 6ba:	ec 01       	movw	r28, r24
 6bc:	89 2b       	or	r24, r25
 6be:	09 f4       	brne	.+2      	; 0x6c2 <xTaskGenericCreate+0x36>
 6c0:	c6 c0       	rjmp	.+396    	; 0x84e <xTaskGenericCreate+0x1c2>
 6c2:	c1 14       	cp	r12, r1
 6c4:	d1 04       	cpc	r13, r1
 6c6:	09 f0       	breq	.+2      	; 0x6ca <xTaskGenericCreate+0x3e>
 6c8:	be c0       	rjmp	.+380    	; 0x846 <xTaskGenericCreate+0x1ba>
 6ca:	c3 01       	movw	r24, r6
 6cc:	fd dc       	rcall	.-1542   	; 0xc8 <pvPortMalloc>
 6ce:	98 8f       	std	Y+24, r25	; 0x18
 6d0:	8f 8b       	std	Y+23, r24	; 0x17
 6d2:	00 97       	sbiw	r24, 0x00	; 0
 6d4:	19 f4       	brne	.+6      	; 0x6dc <xTaskGenericCreate+0x50>
 6d6:	ce 01       	movw	r24, r28
 6d8:	1b dd       	rcall	.-1482   	; 0x110 <vPortFree>
 6da:	b9 c0       	rjmp	.+370    	; 0x84e <xTaskGenericCreate+0x1c2>
 6dc:	a3 01       	movw	r20, r6
 6de:	65 ea       	ldi	r22, 0xA5	; 165
 6e0:	70 e0       	ldi	r23, 0x00	; 0
 6e2:	f5 d2       	rcall	.+1514   	; 0xcce <memset>
 6e4:	93 01       	movw	r18, r6
 6e6:	21 50       	subi	r18, 0x01	; 1
 6e8:	31 09       	sbc	r19, r1
 6ea:	8f 89       	ldd	r24, Y+23	; 0x17
 6ec:	98 8d       	ldd	r25, Y+24	; 0x18
 6ee:	3c 01       	movw	r6, r24
 6f0:	62 0e       	add	r6, r18
 6f2:	73 1e       	adc	r7, r19
 6f4:	48 e0       	ldi	r20, 0x08	; 8
 6f6:	50 e0       	ldi	r21, 0x00	; 0
 6f8:	b4 01       	movw	r22, r8
 6fa:	ce 01       	movw	r24, r28
 6fc:	49 96       	adiw	r24, 0x19	; 25
 6fe:	ee d2       	rcall	.+1500   	; 0xcdc <strncpy>
 700:	18 a2       	std	Y+32, r1	; 0x20
 702:	10 2f       	mov	r17, r16
 704:	04 30       	cpi	r16, 0x04	; 4
 706:	08 f0       	brcs	.+2      	; 0x70a <xTaskGenericCreate+0x7e>
 708:	13 e0       	ldi	r17, 0x03	; 3
 70a:	1e 8b       	std	Y+22, r17	; 0x16
 70c:	6e 01       	movw	r12, r28
 70e:	82 e0       	ldi	r24, 0x02	; 2
 710:	c8 0e       	add	r12, r24
 712:	d1 1c       	adc	r13, r1
 714:	c6 01       	movw	r24, r12
 716:	0b dd       	rcall	.-1514   	; 0x12e <vListInitialiseItem>
 718:	ce 01       	movw	r24, r28
 71a:	0c 96       	adiw	r24, 0x0c	; 12
 71c:	08 dd       	rcall	.-1520   	; 0x12e <vListInitialiseItem>
 71e:	d9 87       	std	Y+9, r29	; 0x09
 720:	c8 87       	std	Y+8, r28	; 0x08
 722:	84 e0       	ldi	r24, 0x04	; 4
 724:	90 e0       	ldi	r25, 0x00	; 0
 726:	81 1b       	sub	r24, r17
 728:	91 09       	sbc	r25, r1
 72a:	9d 87       	std	Y+13, r25	; 0x0d
 72c:	8c 87       	std	Y+12, r24	; 0x0c
 72e:	db 8b       	std	Y+19, r29	; 0x13
 730:	ca 8b       	std	Y+18, r28	; 0x12
 732:	a2 01       	movw	r20, r4
 734:	b5 01       	movw	r22, r10
 736:	c3 01       	movw	r24, r6
 738:	1b de       	rcall	.-970    	; 0x370 <pxPortInitialiseStack>
 73a:	99 83       	std	Y+1, r25	; 0x01
 73c:	88 83       	st	Y, r24
 73e:	e1 14       	cp	r14, r1
 740:	f1 04       	cpc	r15, r1
 742:	19 f0       	breq	.+6      	; 0x74a <xTaskGenericCreate+0xbe>
 744:	f7 01       	movw	r30, r14
 746:	d1 83       	std	Z+1, r29	; 0x01
 748:	c0 83       	st	Z, r28
 74a:	0f b6       	in	r0, 0x3f	; 63
 74c:	f8 94       	cli
 74e:	0f 92       	push	r0
 750:	80 91 fc 06 	lds	r24, 0x06FC	; 0x8006fc <uxCurrentNumberOfTasks>
 754:	8f 5f       	subi	r24, 0xFF	; 255
 756:	80 93 fc 06 	sts	0x06FC, r24	; 0x8006fc <uxCurrentNumberOfTasks>
 75a:	80 91 4a 07 	lds	r24, 0x074A	; 0x80074a <pxCurrentTCB>
 75e:	90 91 4b 07 	lds	r25, 0x074B	; 0x80074b <pxCurrentTCB+0x1>
 762:	89 2b       	or	r24, r25
 764:	69 f5       	brne	.+90     	; 0x7c0 <xTaskGenericCreate+0x134>
 766:	d0 93 4b 07 	sts	0x074B, r29	; 0x80074b <pxCurrentTCB+0x1>
 76a:	c0 93 4a 07 	sts	0x074A, r28	; 0x80074a <pxCurrentTCB>
 76e:	80 91 fc 06 	lds	r24, 0x06FC	; 0x8006fc <uxCurrentNumberOfTasks>
 772:	81 30       	cpi	r24, 0x01	; 1
 774:	a1 f5       	brne	.+104    	; 0x7de <xTaskGenericCreate+0x152>
 776:	86 e2       	ldi	r24, 0x26	; 38
 778:	97 e0       	ldi	r25, 0x07	; 7
 77a:	cb dc       	rcall	.-1642   	; 0x112 <vListInitialise>
 77c:	8f e2       	ldi	r24, 0x2F	; 47
 77e:	97 e0       	ldi	r25, 0x07	; 7
 780:	c8 dc       	rcall	.-1648   	; 0x112 <vListInitialise>
 782:	88 e3       	ldi	r24, 0x38	; 56
 784:	97 e0       	ldi	r25, 0x07	; 7
 786:	c5 dc       	rcall	.-1654   	; 0x112 <vListInitialise>
 788:	81 e4       	ldi	r24, 0x41	; 65
 78a:	97 e0       	ldi	r25, 0x07	; 7
 78c:	c2 dc       	rcall	.-1660   	; 0x112 <vListInitialise>
 78e:	8d e1       	ldi	r24, 0x1D	; 29
 790:	97 e0       	ldi	r25, 0x07	; 7
 792:	bf dc       	rcall	.-1666   	; 0x112 <vListInitialise>
 794:	84 e1       	ldi	r24, 0x14	; 20
 796:	97 e0       	ldi	r25, 0x07	; 7
 798:	bc dc       	rcall	.-1672   	; 0x112 <vListInitialise>
 79a:	87 e0       	ldi	r24, 0x07	; 7
 79c:	97 e0       	ldi	r25, 0x07	; 7
 79e:	b9 dc       	rcall	.-1678   	; 0x112 <vListInitialise>
 7a0:	8e ef       	ldi	r24, 0xFE	; 254
 7a2:	96 e0       	ldi	r25, 0x06	; 6
 7a4:	b6 dc       	rcall	.-1684   	; 0x112 <vListInitialise>
 7a6:	8d e1       	ldi	r24, 0x1D	; 29
 7a8:	97 e0       	ldi	r25, 0x07	; 7
 7aa:	90 93 13 07 	sts	0x0713, r25	; 0x800713 <pxDelayedTaskList+0x1>
 7ae:	80 93 12 07 	sts	0x0712, r24	; 0x800712 <pxDelayedTaskList>
 7b2:	84 e1       	ldi	r24, 0x14	; 20
 7b4:	97 e0       	ldi	r25, 0x07	; 7
 7b6:	90 93 11 07 	sts	0x0711, r25	; 0x800711 <pxOverflowDelayedTaskList+0x1>
 7ba:	80 93 10 07 	sts	0x0710, r24	; 0x800710 <pxOverflowDelayedTaskList>
 7be:	0f c0       	rjmp	.+30     	; 0x7de <xTaskGenericCreate+0x152>
 7c0:	80 91 f7 06 	lds	r24, 0x06F7	; 0x8006f7 <xSchedulerRunning>
 7c4:	81 11       	cpse	r24, r1
 7c6:	0b c0       	rjmp	.+22     	; 0x7de <xTaskGenericCreate+0x152>
 7c8:	e0 91 4a 07 	lds	r30, 0x074A	; 0x80074a <pxCurrentTCB>
 7cc:	f0 91 4b 07 	lds	r31, 0x074B	; 0x80074b <pxCurrentTCB+0x1>
 7d0:	86 89       	ldd	r24, Z+22	; 0x16
 7d2:	08 17       	cp	r16, r24
 7d4:	20 f0       	brcs	.+8      	; 0x7de <xTaskGenericCreate+0x152>
 7d6:	d0 93 4b 07 	sts	0x074B, r29	; 0x80074b <pxCurrentTCB+0x1>
 7da:	c0 93 4a 07 	sts	0x074A, r28	; 0x80074a <pxCurrentTCB>
 7de:	8e 89       	ldd	r24, Y+22	; 0x16
 7e0:	90 91 f9 06 	lds	r25, 0x06F9	; 0x8006f9 <uxTopUsedPriority>
 7e4:	98 17       	cp	r25, r24
 7e6:	10 f4       	brcc	.+4      	; 0x7ec <xTaskGenericCreate+0x160>
 7e8:	80 93 f9 06 	sts	0x06F9, r24	; 0x8006f9 <uxTopUsedPriority>
 7ec:	90 91 f2 06 	lds	r25, 0x06F2	; 0x8006f2 <uxTaskNumber>
 7f0:	9f 5f       	subi	r25, 0xFF	; 255
 7f2:	90 93 f2 06 	sts	0x06F2, r25	; 0x8006f2 <uxTaskNumber>
 7f6:	90 91 f8 06 	lds	r25, 0x06F8	; 0x8006f8 <uxTopReadyPriority>
 7fa:	98 17       	cp	r25, r24
 7fc:	10 f4       	brcc	.+4      	; 0x802 <xTaskGenericCreate+0x176>
 7fe:	80 93 f8 06 	sts	0x06F8, r24	; 0x8006f8 <uxTopReadyPriority>
 802:	90 e0       	ldi	r25, 0x00	; 0
 804:	9c 01       	movw	r18, r24
 806:	22 0f       	add	r18, r18
 808:	33 1f       	adc	r19, r19
 80a:	22 0f       	add	r18, r18
 80c:	33 1f       	adc	r19, r19
 80e:	22 0f       	add	r18, r18
 810:	33 1f       	adc	r19, r19
 812:	82 0f       	add	r24, r18
 814:	93 1f       	adc	r25, r19
 816:	b6 01       	movw	r22, r12
 818:	8a 5d       	subi	r24, 0xDA	; 218
 81a:	98 4f       	sbci	r25, 0xF8	; 248
 81c:	8c dc       	rcall	.-1768   	; 0x136 <vListInsertEnd>
 81e:	0f 90       	pop	r0
 820:	0f be       	out	0x3f, r0	; 63
 822:	80 91 f7 06 	lds	r24, 0x06F7	; 0x8006f7 <xSchedulerRunning>
 826:	88 23       	and	r24, r24
 828:	51 f0       	breq	.+20     	; 0x83e <xTaskGenericCreate+0x1b2>
 82a:	e0 91 4a 07 	lds	r30, 0x074A	; 0x80074a <pxCurrentTCB>
 82e:	f0 91 4b 07 	lds	r31, 0x074B	; 0x80074b <pxCurrentTCB+0x1>
 832:	86 89       	ldd	r24, Z+22	; 0x16
 834:	80 17       	cp	r24, r16
 836:	28 f4       	brcc	.+10     	; 0x842 <xTaskGenericCreate+0x1b6>
 838:	41 de       	rcall	.-894    	; 0x4bc <vPortYield>
 83a:	81 e0       	ldi	r24, 0x01	; 1
 83c:	09 c0       	rjmp	.+18     	; 0x850 <xTaskGenericCreate+0x1c4>
 83e:	81 e0       	ldi	r24, 0x01	; 1
 840:	07 c0       	rjmp	.+14     	; 0x850 <xTaskGenericCreate+0x1c4>
 842:	81 e0       	ldi	r24, 0x01	; 1
 844:	05 c0       	rjmp	.+10     	; 0x850 <xTaskGenericCreate+0x1c4>
 846:	d8 8e       	std	Y+24, r13	; 0x18
 848:	cf 8a       	std	Y+23, r12	; 0x17
 84a:	c6 01       	movw	r24, r12
 84c:	47 cf       	rjmp	.-370    	; 0x6dc <xTaskGenericCreate+0x50>
 84e:	8f ef       	ldi	r24, 0xFF	; 255
 850:	df 91       	pop	r29
 852:	cf 91       	pop	r28
 854:	1f 91       	pop	r17
 856:	0f 91       	pop	r16
 858:	ff 90       	pop	r15
 85a:	ef 90       	pop	r14
 85c:	df 90       	pop	r13
 85e:	cf 90       	pop	r12
 860:	bf 90       	pop	r11
 862:	af 90       	pop	r10
 864:	9f 90       	pop	r9
 866:	8f 90       	pop	r8
 868:	7f 90       	pop	r7
 86a:	6f 90       	pop	r6
 86c:	5f 90       	pop	r5
 86e:	4f 90       	pop	r4
 870:	08 95       	ret

00000872 <vTaskStartScheduler>:
 872:	af 92       	push	r10
 874:	bf 92       	push	r11
 876:	cf 92       	push	r12
 878:	df 92       	push	r13
 87a:	ef 92       	push	r14
 87c:	ff 92       	push	r15
 87e:	0f 93       	push	r16
 880:	a1 2c       	mov	r10, r1
 882:	b1 2c       	mov	r11, r1
 884:	c1 2c       	mov	r12, r1
 886:	d1 2c       	mov	r13, r1
 888:	e1 2c       	mov	r14, r1
 88a:	f1 2c       	mov	r15, r1
 88c:	00 e0       	ldi	r16, 0x00	; 0
 88e:	20 e0       	ldi	r18, 0x00	; 0
 890:	30 e0       	ldi	r19, 0x00	; 0
 892:	45 e5       	ldi	r20, 0x55	; 85
 894:	50 e0       	ldi	r21, 0x00	; 0
 896:	6f e0       	ldi	r22, 0x0F	; 15
 898:	71 e0       	ldi	r23, 0x01	; 1
 89a:	85 ec       	ldi	r24, 0xC5	; 197
 89c:	95 e0       	ldi	r25, 0x05	; 5
 89e:	f6 de       	rcall	.-532    	; 0x68c <xTaskGenericCreate>
 8a0:	81 30       	cpi	r24, 0x01	; 1
 8a2:	41 f4       	brne	.+16     	; 0x8b4 <vTaskStartScheduler+0x42>
 8a4:	f8 94       	cli
 8a6:	80 93 f7 06 	sts	0x06F7, r24	; 0x8006f7 <xSchedulerRunning>
 8aa:	10 92 fb 06 	sts	0x06FB, r1	; 0x8006fb <xTickCount+0x1>
 8ae:	10 92 fa 06 	sts	0x06FA, r1	; 0x8006fa <xTickCount>
 8b2:	ca dd       	rcall	.-1132   	; 0x448 <xPortStartScheduler>
 8b4:	0f 91       	pop	r16
 8b6:	ff 90       	pop	r15
 8b8:	ef 90       	pop	r14
 8ba:	df 90       	pop	r13
 8bc:	cf 90       	pop	r12
 8be:	bf 90       	pop	r11
 8c0:	af 90       	pop	r10
 8c2:	08 95       	ret

000008c4 <vTaskSuspendAll>:
 8c4:	80 91 f6 06 	lds	r24, 0x06F6	; 0x8006f6 <uxSchedulerSuspended>
 8c8:	8f 5f       	subi	r24, 0xFF	; 255
 8ca:	80 93 f6 06 	sts	0x06F6, r24	; 0x8006f6 <uxSchedulerSuspended>
 8ce:	08 95       	ret

000008d0 <vTaskIncrementTick>:
 8d0:	0f 93       	push	r16
 8d2:	1f 93       	push	r17
 8d4:	cf 93       	push	r28
 8d6:	df 93       	push	r29
 8d8:	80 91 f6 06 	lds	r24, 0x06F6	; 0x8006f6 <uxSchedulerSuspended>
 8dc:	81 11       	cpse	r24, r1
 8de:	af c0       	rjmp	.+350    	; 0xa3e <vTaskIncrementTick+0x16e>
 8e0:	80 91 fa 06 	lds	r24, 0x06FA	; 0x8006fa <xTickCount>
 8e4:	90 91 fb 06 	lds	r25, 0x06FB	; 0x8006fb <xTickCount+0x1>
 8e8:	01 96       	adiw	r24, 0x01	; 1
 8ea:	90 93 fb 06 	sts	0x06FB, r25	; 0x8006fb <xTickCount+0x1>
 8ee:	80 93 fa 06 	sts	0x06FA, r24	; 0x8006fa <xTickCount>
 8f2:	80 91 fa 06 	lds	r24, 0x06FA	; 0x8006fa <xTickCount>
 8f6:	90 91 fb 06 	lds	r25, 0x06FB	; 0x8006fb <xTickCount+0x1>
 8fa:	89 2b       	or	r24, r25
 8fc:	99 f5       	brne	.+102    	; 0x964 <vTaskIncrementTick+0x94>
 8fe:	80 91 12 07 	lds	r24, 0x0712	; 0x800712 <pxDelayedTaskList>
 902:	90 91 13 07 	lds	r25, 0x0713	; 0x800713 <pxDelayedTaskList+0x1>
 906:	20 91 10 07 	lds	r18, 0x0710	; 0x800710 <pxOverflowDelayedTaskList>
 90a:	30 91 11 07 	lds	r19, 0x0711	; 0x800711 <pxOverflowDelayedTaskList+0x1>
 90e:	30 93 13 07 	sts	0x0713, r19	; 0x800713 <pxDelayedTaskList+0x1>
 912:	20 93 12 07 	sts	0x0712, r18	; 0x800712 <pxDelayedTaskList>
 916:	90 93 11 07 	sts	0x0711, r25	; 0x800711 <pxOverflowDelayedTaskList+0x1>
 91a:	80 93 10 07 	sts	0x0710, r24	; 0x800710 <pxOverflowDelayedTaskList>
 91e:	80 91 f3 06 	lds	r24, 0x06F3	; 0x8006f3 <xNumOfOverflows>
 922:	8f 5f       	subi	r24, 0xFF	; 255
 924:	80 93 f3 06 	sts	0x06F3, r24	; 0x8006f3 <xNumOfOverflows>
 928:	e0 91 12 07 	lds	r30, 0x0712	; 0x800712 <pxDelayedTaskList>
 92c:	f0 91 13 07 	lds	r31, 0x0713	; 0x800713 <pxDelayedTaskList+0x1>
 930:	80 81       	ld	r24, Z
 932:	81 11       	cpse	r24, r1
 934:	07 c0       	rjmp	.+14     	; 0x944 <vTaskIncrementTick+0x74>
 936:	8f ef       	ldi	r24, 0xFF	; 255
 938:	9f ef       	ldi	r25, 0xFF	; 255
 93a:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 93e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 942:	10 c0       	rjmp	.+32     	; 0x964 <vTaskIncrementTick+0x94>
 944:	e0 91 12 07 	lds	r30, 0x0712	; 0x800712 <pxDelayedTaskList>
 948:	f0 91 13 07 	lds	r31, 0x0713	; 0x800713 <pxDelayedTaskList+0x1>
 94c:	05 80       	ldd	r0, Z+5	; 0x05
 94e:	f6 81       	ldd	r31, Z+6	; 0x06
 950:	e0 2d       	mov	r30, r0
 952:	06 80       	ldd	r0, Z+6	; 0x06
 954:	f7 81       	ldd	r31, Z+7	; 0x07
 956:	e0 2d       	mov	r30, r0
 958:	82 81       	ldd	r24, Z+2	; 0x02
 95a:	93 81       	ldd	r25, Z+3	; 0x03
 95c:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 960:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 964:	20 91 fa 06 	lds	r18, 0x06FA	; 0x8006fa <xTickCount>
 968:	30 91 fb 06 	lds	r19, 0x06FB	; 0x8006fb <xTickCount+0x1>
 96c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 970:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 974:	28 17       	cp	r18, r24
 976:	39 07       	cpc	r19, r25
 978:	08 f4       	brcc	.+2      	; 0x97c <vTaskIncrementTick+0xac>
 97a:	66 c0       	rjmp	.+204    	; 0xa48 <vTaskIncrementTick+0x178>
 97c:	e0 91 12 07 	lds	r30, 0x0712	; 0x800712 <pxDelayedTaskList>
 980:	f0 91 13 07 	lds	r31, 0x0713	; 0x800713 <pxDelayedTaskList+0x1>
 984:	80 81       	ld	r24, Z
 986:	88 23       	and	r24, r24
 988:	99 f0       	breq	.+38     	; 0x9b0 <vTaskIncrementTick+0xe0>
 98a:	e0 91 12 07 	lds	r30, 0x0712	; 0x800712 <pxDelayedTaskList>
 98e:	f0 91 13 07 	lds	r31, 0x0713	; 0x800713 <pxDelayedTaskList+0x1>
 992:	05 80       	ldd	r0, Z+5	; 0x05
 994:	f6 81       	ldd	r31, Z+6	; 0x06
 996:	e0 2d       	mov	r30, r0
 998:	c6 81       	ldd	r28, Z+6	; 0x06
 99a:	d7 81       	ldd	r29, Z+7	; 0x07
 99c:	8a 81       	ldd	r24, Y+2	; 0x02
 99e:	9b 81       	ldd	r25, Y+3	; 0x03
 9a0:	20 91 fa 06 	lds	r18, 0x06FA	; 0x8006fa <xTickCount>
 9a4:	30 91 fb 06 	lds	r19, 0x06FB	; 0x8006fb <xTickCount+0x1>
 9a8:	28 17       	cp	r18, r24
 9aa:	39 07       	cpc	r19, r25
 9ac:	f8 f4       	brcc	.+62     	; 0x9ec <vTaskIncrementTick+0x11c>
 9ae:	19 c0       	rjmp	.+50     	; 0x9e2 <vTaskIncrementTick+0x112>
 9b0:	8f ef       	ldi	r24, 0xFF	; 255
 9b2:	9f ef       	ldi	r25, 0xFF	; 255
 9b4:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 9b8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 9bc:	45 c0       	rjmp	.+138    	; 0xa48 <vTaskIncrementTick+0x178>
 9be:	e0 91 12 07 	lds	r30, 0x0712	; 0x800712 <pxDelayedTaskList>
 9c2:	f0 91 13 07 	lds	r31, 0x0713	; 0x800713 <pxDelayedTaskList+0x1>
 9c6:	05 80       	ldd	r0, Z+5	; 0x05
 9c8:	f6 81       	ldd	r31, Z+6	; 0x06
 9ca:	e0 2d       	mov	r30, r0
 9cc:	c6 81       	ldd	r28, Z+6	; 0x06
 9ce:	d7 81       	ldd	r29, Z+7	; 0x07
 9d0:	8a 81       	ldd	r24, Y+2	; 0x02
 9d2:	9b 81       	ldd	r25, Y+3	; 0x03
 9d4:	20 91 fa 06 	lds	r18, 0x06FA	; 0x8006fa <xTickCount>
 9d8:	30 91 fb 06 	lds	r19, 0x06FB	; 0x8006fb <xTickCount+0x1>
 9dc:	28 17       	cp	r18, r24
 9de:	39 07       	cpc	r19, r25
 9e0:	28 f4       	brcc	.+10     	; 0x9ec <vTaskIncrementTick+0x11c>
 9e2:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 9e6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 9ea:	2e c0       	rjmp	.+92     	; 0xa48 <vTaskIncrementTick+0x178>
 9ec:	8e 01       	movw	r16, r28
 9ee:	0e 5f       	subi	r16, 0xFE	; 254
 9f0:	1f 4f       	sbci	r17, 0xFF	; 255
 9f2:	c8 01       	movw	r24, r16
 9f4:	02 dc       	rcall	.-2044   	; 0x1fa <vListRemove>
 9f6:	8c 89       	ldd	r24, Y+20	; 0x14
 9f8:	9d 89       	ldd	r25, Y+21	; 0x15
 9fa:	89 2b       	or	r24, r25
 9fc:	19 f0       	breq	.+6      	; 0xa04 <vTaskIncrementTick+0x134>
 9fe:	ce 01       	movw	r24, r28
 a00:	0c 96       	adiw	r24, 0x0c	; 12
 a02:	fb db       	rcall	.-2058   	; 0x1fa <vListRemove>
 a04:	2e 89       	ldd	r18, Y+22	; 0x16
 a06:	80 91 f8 06 	lds	r24, 0x06F8	; 0x8006f8 <uxTopReadyPriority>
 a0a:	82 17       	cp	r24, r18
 a0c:	10 f4       	brcc	.+4      	; 0xa12 <vTaskIncrementTick+0x142>
 a0e:	20 93 f8 06 	sts	0x06F8, r18	; 0x8006f8 <uxTopReadyPriority>
 a12:	30 e0       	ldi	r19, 0x00	; 0
 a14:	c9 01       	movw	r24, r18
 a16:	88 0f       	add	r24, r24
 a18:	99 1f       	adc	r25, r25
 a1a:	88 0f       	add	r24, r24
 a1c:	99 1f       	adc	r25, r25
 a1e:	88 0f       	add	r24, r24
 a20:	99 1f       	adc	r25, r25
 a22:	82 0f       	add	r24, r18
 a24:	93 1f       	adc	r25, r19
 a26:	b8 01       	movw	r22, r16
 a28:	8a 5d       	subi	r24, 0xDA	; 218
 a2a:	98 4f       	sbci	r25, 0xF8	; 248
 a2c:	84 db       	rcall	.-2296   	; 0x136 <vListInsertEnd>
 a2e:	e0 91 12 07 	lds	r30, 0x0712	; 0x800712 <pxDelayedTaskList>
 a32:	f0 91 13 07 	lds	r31, 0x0713	; 0x800713 <pxDelayedTaskList+0x1>
 a36:	80 81       	ld	r24, Z
 a38:	81 11       	cpse	r24, r1
 a3a:	c1 cf       	rjmp	.-126    	; 0x9be <vTaskIncrementTick+0xee>
 a3c:	b9 cf       	rjmp	.-142    	; 0x9b0 <vTaskIncrementTick+0xe0>
 a3e:	80 91 f5 06 	lds	r24, 0x06F5	; 0x8006f5 <uxMissedTicks>
 a42:	8f 5f       	subi	r24, 0xFF	; 255
 a44:	80 93 f5 06 	sts	0x06F5, r24	; 0x8006f5 <uxMissedTicks>
 a48:	df 91       	pop	r29
 a4a:	cf 91       	pop	r28
 a4c:	1f 91       	pop	r17
 a4e:	0f 91       	pop	r16
 a50:	08 95       	ret

00000a52 <xTaskResumeAll>:
 a52:	cf 92       	push	r12
 a54:	df 92       	push	r13
 a56:	ef 92       	push	r14
 a58:	ff 92       	push	r15
 a5a:	0f 93       	push	r16
 a5c:	1f 93       	push	r17
 a5e:	cf 93       	push	r28
 a60:	df 93       	push	r29
 a62:	0f b6       	in	r0, 0x3f	; 63
 a64:	f8 94       	cli
 a66:	0f 92       	push	r0
 a68:	80 91 f6 06 	lds	r24, 0x06F6	; 0x8006f6 <uxSchedulerSuspended>
 a6c:	81 50       	subi	r24, 0x01	; 1
 a6e:	80 93 f6 06 	sts	0x06F6, r24	; 0x8006f6 <uxSchedulerSuspended>
 a72:	80 91 f6 06 	lds	r24, 0x06F6	; 0x8006f6 <uxSchedulerSuspended>
 a76:	81 11       	cpse	r24, r1
 a78:	5f c0       	rjmp	.+190    	; 0xb38 <xTaskResumeAll+0xe6>
 a7a:	80 91 fc 06 	lds	r24, 0x06FC	; 0x8006fc <uxCurrentNumberOfTasks>
 a7e:	81 11       	cpse	r24, r1
 a80:	2f c0       	rjmp	.+94     	; 0xae0 <xTaskResumeAll+0x8e>
 a82:	5d c0       	rjmp	.+186    	; 0xb3e <xTaskResumeAll+0xec>
 a84:	d7 01       	movw	r26, r14
 a86:	15 96       	adiw	r26, 0x05	; 5
 a88:	ed 91       	ld	r30, X+
 a8a:	fc 91       	ld	r31, X
 a8c:	16 97       	sbiw	r26, 0x06	; 6
 a8e:	c6 81       	ldd	r28, Z+6	; 0x06
 a90:	d7 81       	ldd	r29, Z+7	; 0x07
 a92:	ce 01       	movw	r24, r28
 a94:	0c 96       	adiw	r24, 0x0c	; 12
 a96:	b1 db       	rcall	.-2206   	; 0x1fa <vListRemove>
 a98:	8e 01       	movw	r16, r28
 a9a:	0e 5f       	subi	r16, 0xFE	; 254
 a9c:	1f 4f       	sbci	r17, 0xFF	; 255
 a9e:	c8 01       	movw	r24, r16
 aa0:	ac db       	rcall	.-2216   	; 0x1fa <vListRemove>
 aa2:	2e 89       	ldd	r18, Y+22	; 0x16
 aa4:	80 91 f8 06 	lds	r24, 0x06F8	; 0x8006f8 <uxTopReadyPriority>
 aa8:	82 17       	cp	r24, r18
 aaa:	10 f4       	brcc	.+4      	; 0xab0 <xTaskResumeAll+0x5e>
 aac:	20 93 f8 06 	sts	0x06F8, r18	; 0x8006f8 <uxTopReadyPriority>
 ab0:	30 e0       	ldi	r19, 0x00	; 0
 ab2:	c9 01       	movw	r24, r18
 ab4:	88 0f       	add	r24, r24
 ab6:	99 1f       	adc	r25, r25
 ab8:	88 0f       	add	r24, r24
 aba:	99 1f       	adc	r25, r25
 abc:	88 0f       	add	r24, r24
 abe:	99 1f       	adc	r25, r25
 ac0:	82 0f       	add	r24, r18
 ac2:	93 1f       	adc	r25, r19
 ac4:	b8 01       	movw	r22, r16
 ac6:	8a 5d       	subi	r24, 0xDA	; 218
 ac8:	98 4f       	sbci	r25, 0xF8	; 248
 aca:	35 db       	rcall	.-2454   	; 0x136 <vListInsertEnd>
 acc:	e0 91 4a 07 	lds	r30, 0x074A	; 0x80074a <pxCurrentTCB>
 ad0:	f0 91 4b 07 	lds	r31, 0x074B	; 0x80074b <pxCurrentTCB+0x1>
 ad4:	9e 89       	ldd	r25, Y+22	; 0x16
 ad6:	86 89       	ldd	r24, Z+22	; 0x16
 ad8:	98 17       	cp	r25, r24
 ada:	58 f0       	brcs	.+22     	; 0xaf2 <xTaskResumeAll+0xa0>
 adc:	dc 2c       	mov	r13, r12
 ade:	09 c0       	rjmp	.+18     	; 0xaf2 <xTaskResumeAll+0xa0>
 ae0:	d1 2c       	mov	r13, r1
 ae2:	0f 2e       	mov	r0, r31
 ae4:	f7 e0       	ldi	r31, 0x07	; 7
 ae6:	ef 2e       	mov	r14, r31
 ae8:	f7 e0       	ldi	r31, 0x07	; 7
 aea:	ff 2e       	mov	r15, r31
 aec:	f0 2d       	mov	r31, r0
 aee:	cc 24       	eor	r12, r12
 af0:	c3 94       	inc	r12
 af2:	f7 01       	movw	r30, r14
 af4:	80 81       	ld	r24, Z
 af6:	81 11       	cpse	r24, r1
 af8:	c5 cf       	rjmp	.-118    	; 0xa84 <xTaskResumeAll+0x32>
 afa:	80 91 f5 06 	lds	r24, 0x06F5	; 0x8006f5 <uxMissedTicks>
 afe:	88 23       	and	r24, r24
 b00:	79 f0       	breq	.+30     	; 0xb20 <xTaskResumeAll+0xce>
 b02:	80 91 f5 06 	lds	r24, 0x06F5	; 0x8006f5 <uxMissedTicks>
 b06:	88 23       	and	r24, r24
 b08:	91 f0       	breq	.+36     	; 0xb2e <xTaskResumeAll+0xdc>
 b0a:	e2 de       	rcall	.-572    	; 0x8d0 <vTaskIncrementTick>
 b0c:	80 91 f5 06 	lds	r24, 0x06F5	; 0x8006f5 <uxMissedTicks>
 b10:	81 50       	subi	r24, 0x01	; 1
 b12:	80 93 f5 06 	sts	0x06F5, r24	; 0x8006f5 <uxMissedTicks>
 b16:	80 91 f5 06 	lds	r24, 0x06F5	; 0x8006f5 <uxMissedTicks>
 b1a:	81 11       	cpse	r24, r1
 b1c:	f6 cf       	rjmp	.-20     	; 0xb0a <xTaskResumeAll+0xb8>
 b1e:	07 c0       	rjmp	.+14     	; 0xb2e <xTaskResumeAll+0xdc>
 b20:	f1 e0       	ldi	r31, 0x01	; 1
 b22:	df 16       	cp	r13, r31
 b24:	21 f0       	breq	.+8      	; 0xb2e <xTaskResumeAll+0xdc>
 b26:	80 91 f4 06 	lds	r24, 0x06F4	; 0x8006f4 <xMissedYield>
 b2a:	81 30       	cpi	r24, 0x01	; 1
 b2c:	39 f4       	brne	.+14     	; 0xb3c <xTaskResumeAll+0xea>
 b2e:	10 92 f4 06 	sts	0x06F4, r1	; 0x8006f4 <xMissedYield>
 b32:	c4 dc       	rcall	.-1656   	; 0x4bc <vPortYield>
 b34:	81 e0       	ldi	r24, 0x01	; 1
 b36:	03 c0       	rjmp	.+6      	; 0xb3e <xTaskResumeAll+0xec>
 b38:	80 e0       	ldi	r24, 0x00	; 0
 b3a:	01 c0       	rjmp	.+2      	; 0xb3e <xTaskResumeAll+0xec>
 b3c:	80 e0       	ldi	r24, 0x00	; 0
 b3e:	0f 90       	pop	r0
 b40:	0f be       	out	0x3f, r0	; 63
 b42:	df 91       	pop	r29
 b44:	cf 91       	pop	r28
 b46:	1f 91       	pop	r17
 b48:	0f 91       	pop	r16
 b4a:	ff 90       	pop	r15
 b4c:	ef 90       	pop	r14
 b4e:	df 90       	pop	r13
 b50:	cf 90       	pop	r12
 b52:	08 95       	ret

00000b54 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
 b54:	cf 93       	push	r28
 b56:	df 93       	push	r29
 b58:	ec 01       	movw	r28, r24
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0U )
 b5a:	89 2b       	or	r24, r25
 b5c:	91 f0       	breq	.+36     	; 0xb82 <vTaskDelay+0x2e>
		{
			vTaskSuspendAll();
 b5e:	b2 de       	rcall	.-668    	; 0x8c4 <vTaskSuspendAll>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
 b60:	80 91 fa 06 	lds	r24, 0x06FA	; 0x8006fa <xTickCount>
 b64:	90 91 fb 06 	lds	r25, 0x06FB	; 0x8006fb <xTickCount+0x1>
 b68:	c8 0f       	add	r28, r24
 b6a:	d9 1f       	adc	r29, r25

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
 b6c:	80 91 4a 07 	lds	r24, 0x074A	; 0x80074a <pxCurrentTCB>
 b70:	90 91 4b 07 	lds	r25, 0x074B	; 0x80074b <pxCurrentTCB+0x1>
 b74:	02 96       	adiw	r24, 0x02	; 2
 b76:	41 db       	rcall	.-2430   	; 0x1fa <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
 b78:	ce 01       	movw	r24, r28
 b7a:	53 dd       	rcall	.-1370   	; 0x622 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 b7c:	6a df       	rcall	.-300    	; 0xa52 <xTaskResumeAll>
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 b7e:	81 11       	cpse	r24, r1
 b80:	01 c0       	rjmp	.+2      	; 0xb84 <vTaskDelay+0x30>
		{
			portYIELD_WITHIN_API();
 b82:	9c dc       	rcall	.-1736   	; 0x4bc <vPortYield>
		}
	}
 b84:	df 91       	pop	r29
 b86:	cf 91       	pop	r28
 b88:	08 95       	ret

00000b8a <prvIdleTask>:
		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
		{
			vTaskSuspendAll();
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 b8a:	0f 2e       	mov	r0, r31
 b8c:	fe ef       	ldi	r31, 0xFE	; 254
 b8e:	ef 2e       	mov	r14, r31
 b90:	f6 e0       	ldi	r31, 0x06	; 6
 b92:	ff 2e       	mov	r15, r31
 b94:	f0 2d       	mov	r31, r0

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
 b96:	c6 e2       	ldi	r28, 0x26	; 38
 b98:	d7 e0       	ldi	r29, 0x07	; 7
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
 b9a:	80 91 fd 06 	lds	r24, 0x06FD	; 0x8006fd <uxTasksDeleted>
 b9e:	88 23       	and	r24, r24
 ba0:	29 f1       	breq	.+74     	; 0xbec <prvIdleTask+0x62>
		{
			vTaskSuspendAll();
 ba2:	90 de       	rcall	.-736    	; 0x8c4 <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 ba4:	d7 01       	movw	r26, r14
 ba6:	1c 91       	ld	r17, X
			xTaskResumeAll();
 ba8:	54 df       	rcall	.-344    	; 0xa52 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
 baa:	11 23       	and	r17, r17
 bac:	f9 f0       	breq	.+62     	; 0xbec <prvIdleTask+0x62>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
 bae:	0f b6       	in	r0, 0x3f	; 63
 bb0:	f8 94       	cli
 bb2:	0f 92       	push	r0
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
 bb4:	d7 01       	movw	r26, r14
 bb6:	15 96       	adiw	r26, 0x05	; 5
 bb8:	ed 91       	ld	r30, X+
 bba:	fc 91       	ld	r31, X
 bbc:	16 97       	sbiw	r26, 0x06	; 6
 bbe:	06 81       	ldd	r16, Z+6	; 0x06
 bc0:	17 81       	ldd	r17, Z+7	; 0x07
					vListRemove( &( pxTCB->xGenericListItem ) );
 bc2:	c8 01       	movw	r24, r16
 bc4:	02 96       	adiw	r24, 0x02	; 2
 bc6:	19 db       	rcall	.-2510   	; 0x1fa <vListRemove>
					--uxCurrentNumberOfTasks;
 bc8:	80 91 fc 06 	lds	r24, 0x06FC	; 0x8006fc <uxCurrentNumberOfTasks>
 bcc:	81 50       	subi	r24, 0x01	; 1
 bce:	80 93 fc 06 	sts	0x06FC, r24	; 0x8006fc <uxCurrentNumberOfTasks>
					--uxTasksDeleted;
 bd2:	80 91 fd 06 	lds	r24, 0x06FD	; 0x8006fd <uxTasksDeleted>
 bd6:	81 50       	subi	r24, 0x01	; 1
 bd8:	80 93 fd 06 	sts	0x06FD, r24	; 0x8006fd <uxTasksDeleted>
				}
				taskEXIT_CRITICAL();
 bdc:	0f 90       	pop	r0
 bde:	0f be       	out	0x3f, r0	; 63
		want to allocate and clean RAM statically. */
		portCLEAN_UP_TCB( pxTCB );

		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
 be0:	f8 01       	movw	r30, r16
 be2:	87 89       	ldd	r24, Z+23	; 0x17
 be4:	90 8d       	ldd	r25, Z+24	; 0x18
 be6:	94 da       	rcall	.-2776   	; 0x110 <vPortFree>
		vPortFree( pxTCB );
 be8:	c8 01       	movw	r24, r16
 bea:	92 da       	rcall	.-2780   	; 0x110 <vPortFree>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
 bec:	88 81       	ld	r24, Y
 bee:	82 30       	cpi	r24, 0x02	; 2
 bf0:	a0 f2       	brcs	.-88     	; 0xb9a <prvIdleTask+0x10>
			{
				taskYIELD();
 bf2:	64 dc       	rcall	.-1848   	; 0x4bc <vPortYield>
 bf4:	d2 cf       	rjmp	.-92     	; 0xb9a <prvIdleTask+0x10>

00000bf6 <vTaskSwitchContext>:
#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
 bf6:	80 91 f6 06 	lds	r24, 0x06F6	; 0x8006f6 <uxSchedulerSuspended>
 bfa:	81 11       	cpse	r24, r1
 bfc:	13 c0       	rjmp	.+38     	; 0xc24 <vTaskSwitchContext+0x2e>
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
 bfe:	80 91 f8 06 	lds	r24, 0x06F8	; 0x8006f8 <uxTopReadyPriority>
 c02:	90 e0       	ldi	r25, 0x00	; 0
 c04:	fc 01       	movw	r30, r24
 c06:	ee 0f       	add	r30, r30
 c08:	ff 1f       	adc	r31, r31
 c0a:	ee 0f       	add	r30, r30
 c0c:	ff 1f       	adc	r31, r31
 c0e:	ee 0f       	add	r30, r30
 c10:	ff 1f       	adc	r31, r31
 c12:	8e 0f       	add	r24, r30
 c14:	9f 1f       	adc	r25, r31
 c16:	fc 01       	movw	r30, r24
 c18:	ea 5d       	subi	r30, 0xDA	; 218
 c1a:	f8 4f       	sbci	r31, 0xF8	; 248
 c1c:	80 81       	ld	r24, Z
 c1e:	88 23       	and	r24, r24
 c20:	29 f0       	breq	.+10     	; 0xc2c <vTaskSwitchContext+0x36>
 c22:	1b c0       	rjmp	.+54     	; 0xc5a <vTaskSwitchContext+0x64>
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
 c24:	81 e0       	ldi	r24, 0x01	; 1
 c26:	80 93 f4 06 	sts	0x06F4, r24	; 0x8006f4 <xMissedYield>
 c2a:	08 95       	ret
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
		{
			configASSERT( uxTopReadyPriority );
			--uxTopReadyPriority;
 c2c:	80 91 f8 06 	lds	r24, 0x06F8	; 0x8006f8 <uxTopReadyPriority>
 c30:	81 50       	subi	r24, 0x01	; 1
 c32:	80 93 f8 06 	sts	0x06F8, r24	; 0x8006f8 <uxTopReadyPriority>
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
 c36:	80 91 f8 06 	lds	r24, 0x06F8	; 0x8006f8 <uxTopReadyPriority>
 c3a:	90 e0       	ldi	r25, 0x00	; 0
 c3c:	fc 01       	movw	r30, r24
 c3e:	ee 0f       	add	r30, r30
 c40:	ff 1f       	adc	r31, r31
 c42:	ee 0f       	add	r30, r30
 c44:	ff 1f       	adc	r31, r31
 c46:	ee 0f       	add	r30, r30
 c48:	ff 1f       	adc	r31, r31
 c4a:	8e 0f       	add	r24, r30
 c4c:	9f 1f       	adc	r25, r31
 c4e:	fc 01       	movw	r30, r24
 c50:	ea 5d       	subi	r30, 0xDA	; 218
 c52:	f8 4f       	sbci	r31, 0xF8	; 248
 c54:	80 81       	ld	r24, Z
 c56:	88 23       	and	r24, r24
 c58:	49 f3       	breq	.-46     	; 0xc2c <vTaskSwitchContext+0x36>
			--uxTopReadyPriority;
		}
	
		/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the tasks of the
		same priority get an equal share of the processor time. */
		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
 c5a:	80 91 f8 06 	lds	r24, 0x06F8	; 0x8006f8 <uxTopReadyPriority>
 c5e:	90 e0       	ldi	r25, 0x00	; 0
 c60:	9c 01       	movw	r18, r24
 c62:	22 0f       	add	r18, r18
 c64:	33 1f       	adc	r19, r19
 c66:	22 0f       	add	r18, r18
 c68:	33 1f       	adc	r19, r19
 c6a:	22 0f       	add	r18, r18
 c6c:	33 1f       	adc	r19, r19
 c6e:	28 0f       	add	r18, r24
 c70:	39 1f       	adc	r19, r25
 c72:	d9 01       	movw	r26, r18
 c74:	aa 5d       	subi	r26, 0xDA	; 218
 c76:	b8 4f       	sbci	r27, 0xF8	; 248
 c78:	11 96       	adiw	r26, 0x01	; 1
 c7a:	ed 91       	ld	r30, X+
 c7c:	fc 91       	ld	r31, X
 c7e:	12 97       	sbiw	r26, 0x02	; 2
 c80:	02 80       	ldd	r0, Z+2	; 0x02
 c82:	f3 81       	ldd	r31, Z+3	; 0x03
 c84:	e0 2d       	mov	r30, r0
 c86:	12 96       	adiw	r26, 0x02	; 2
 c88:	fc 93       	st	X, r31
 c8a:	ee 93       	st	-X, r30
 c8c:	11 97       	sbiw	r26, 0x01	; 1
 c8e:	27 5d       	subi	r18, 0xD7	; 215
 c90:	38 4f       	sbci	r19, 0xF8	; 248
 c92:	e2 17       	cp	r30, r18
 c94:	f3 07       	cpc	r31, r19
 c96:	29 f4       	brne	.+10     	; 0xca2 <vTaskSwitchContext+0xac>
 c98:	22 81       	ldd	r18, Z+2	; 0x02
 c9a:	33 81       	ldd	r19, Z+3	; 0x03
 c9c:	fd 01       	movw	r30, r26
 c9e:	32 83       	std	Z+2, r19	; 0x02
 ca0:	21 83       	std	Z+1, r18	; 0x01
 ca2:	fc 01       	movw	r30, r24
 ca4:	ee 0f       	add	r30, r30
 ca6:	ff 1f       	adc	r31, r31
 ca8:	ee 0f       	add	r30, r30
 caa:	ff 1f       	adc	r31, r31
 cac:	ee 0f       	add	r30, r30
 cae:	ff 1f       	adc	r31, r31
 cb0:	8e 0f       	add	r24, r30
 cb2:	9f 1f       	adc	r25, r31
 cb4:	fc 01       	movw	r30, r24
 cb6:	ea 5d       	subi	r30, 0xDA	; 218
 cb8:	f8 4f       	sbci	r31, 0xF8	; 248
 cba:	01 80       	ldd	r0, Z+1	; 0x01
 cbc:	f2 81       	ldd	r31, Z+2	; 0x02
 cbe:	e0 2d       	mov	r30, r0
 cc0:	86 81       	ldd	r24, Z+6	; 0x06
 cc2:	97 81       	ldd	r25, Z+7	; 0x07
 cc4:	90 93 4b 07 	sts	0x074B, r25	; 0x80074b <pxCurrentTCB+0x1>
 cc8:	80 93 4a 07 	sts	0x074A, r24	; 0x80074a <pxCurrentTCB>
 ccc:	08 95       	ret

00000cce <memset>:
 cce:	dc 01       	movw	r26, r24
 cd0:	01 c0       	rjmp	.+2      	; 0xcd4 <memset+0x6>
 cd2:	6d 93       	st	X+, r22
 cd4:	41 50       	subi	r20, 0x01	; 1
 cd6:	50 40       	sbci	r21, 0x00	; 0
 cd8:	e0 f7       	brcc	.-8      	; 0xcd2 <memset+0x4>
 cda:	08 95       	ret

00000cdc <strncpy>:
 cdc:	fb 01       	movw	r30, r22
 cde:	dc 01       	movw	r26, r24
 ce0:	41 50       	subi	r20, 0x01	; 1
 ce2:	50 40       	sbci	r21, 0x00	; 0
 ce4:	48 f0       	brcs	.+18     	; 0xcf8 <strncpy+0x1c>
 ce6:	01 90       	ld	r0, Z+
 ce8:	0d 92       	st	X+, r0
 cea:	00 20       	and	r0, r0
 cec:	c9 f7       	brne	.-14     	; 0xce0 <strncpy+0x4>
 cee:	01 c0       	rjmp	.+2      	; 0xcf2 <strncpy+0x16>
 cf0:	1d 92       	st	X+, r1
 cf2:	41 50       	subi	r20, 0x01	; 1
 cf4:	50 40       	sbci	r21, 0x00	; 0
 cf6:	e0 f7       	brcc	.-8      	; 0xcf0 <strncpy+0x14>
 cf8:	08 95       	ret

00000cfa <_exit>:
 cfa:	f8 94       	cli

00000cfc <__stop_program>:
 cfc:	ff cf       	rjmp	.-2      	; 0xcfc <__stop_program>
