
BeltTest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800100  00000c7c  00000d10  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c7c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000639  00800114  00800114  00000d24  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000d24  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000d54  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001b8  00000000  00000000  00000d94  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002305  00000000  00000000  00000f4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f77  00000000  00000000  00003251  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000012ce  00000000  00000000  000041c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000448  00000000  00000000  00005498  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000c89  00000000  00000000  000058e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000120b  00000000  00000000  00006569  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001b0  00000000  00000000  00007774  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	b3 c2       	rjmp	.+1382   	; 0x59c <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ec e7       	ldi	r30, 0x7C	; 124
  a0:	fc e0       	ldi	r31, 0x0C	; 12
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 31       	cpi	r26, 0x14	; 20
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	27 e0       	ldi	r18, 0x07	; 7
  b4:	a4 e1       	ldi	r26, 0x14	; 20
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ad 34       	cpi	r26, 0x4D	; 77
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0a d1       	rcall	.+532    	; 0x2d8 <main>
  c4:	d9 c5       	rjmp	.+2994   	; 0xc78 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <pvPortMalloc>:

static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
  c8:	cf 93       	push	r28
  ca:	df 93       	push	r29
  cc:	ec 01       	movw	r28, r24
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
		}
	#endif

	vTaskSuspendAll();
  ce:	b9 d3       	rcall	.+1906   	; 0x842 <vTaskSuspendAll>
	{
		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configTOTAL_HEAP_SIZE ) &&
  d0:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <__data_end>
  d4:	30 91 15 01 	lds	r19, 0x0115	; 0x800115 <__data_end+0x1>
  d8:	ce 01       	movw	r24, r28
  da:	82 0f       	add	r24, r18
  dc:	93 1f       	adc	r25, r19
  de:	8c 3d       	cpi	r24, 0xDC	; 220
  e0:	45 e0       	ldi	r20, 0x05	; 5
  e2:	94 07       	cpc	r25, r20
  e4:	58 f4       	brcc	.+22     	; 0xfc <pvPortMalloc+0x34>
  e6:	28 17       	cp	r18, r24
  e8:	39 07       	cpc	r19, r25
  ea:	58 f4       	brcc	.+22     	; 0x102 <pvPortMalloc+0x3a>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
  ec:	e9 01       	movw	r28, r18
  ee:	ca 5e       	subi	r28, 0xEA	; 234
  f0:	de 4f       	sbci	r29, 0xFE	; 254
			xNextFreeByte += xWantedSize;			
  f2:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <__data_end+0x1>
  f6:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <__data_end>
  fa:	05 c0       	rjmp	.+10     	; 0x106 <pvPortMalloc+0x3e>
static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
void *pvReturn = NULL; 
  fc:	c0 e0       	ldi	r28, 0x00	; 0
  fe:	d0 e0       	ldi	r29, 0x00	; 0
 100:	02 c0       	rjmp	.+4      	; 0x106 <pvPortMalloc+0x3e>
 102:	c0 e0       	ldi	r28, 0x00	; 0
 104:	d0 e0       	ldi	r29, 0x00	; 0
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
			xNextFreeByte += xWantedSize;			
		}	
	}
	xTaskResumeAll();
 106:	64 d4       	rcall	.+2248   	; 0x9d0 <xTaskResumeAll>
		}
	}
	#endif	

	return pvReturn;
}
 108:	ce 01       	movw	r24, r28
 10a:	df 91       	pop	r29
 10c:	cf 91       	pop	r28
 10e:	08 95       	ret

00000110 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 110:	08 95       	ret

00000112 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList *pxList )
{
 112:	fc 01       	movw	r30, r24
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
 114:	03 96       	adiw	r24, 0x03	; 3
 116:	92 83       	std	Z+2, r25	; 0x02
 118:	81 83       	std	Z+1, r24	; 0x01

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 11a:	2f ef       	ldi	r18, 0xFF	; 255
 11c:	3f ef       	ldi	r19, 0xFF	; 255
 11e:	34 83       	std	Z+4, r19	; 0x04
 120:	23 83       	std	Z+3, r18	; 0x03

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
 122:	96 83       	std	Z+6, r25	; 0x06
 124:	85 83       	std	Z+5, r24	; 0x05
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
 126:	90 87       	std	Z+8, r25	; 0x08
 128:	87 83       	std	Z+7, r24	; 0x07

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
 12a:	10 82       	st	Z, r1
 12c:	08 95       	ret

0000012e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 12e:	fc 01       	movw	r30, r24
 130:	11 86       	std	Z+9, r1	; 0x09
 132:	10 86       	std	Z+8, r1	; 0x08
 134:	08 95       	ret

00000136 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
{
 136:	cf 93       	push	r28
 138:	df 93       	push	r29
 13a:	fc 01       	movw	r30, r24
 13c:	db 01       	movw	r26, r22

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
 13e:	21 81       	ldd	r18, Z+1	; 0x01
 140:	32 81       	ldd	r19, Z+2	; 0x02

	pxNewListItem->pxNext = pxIndex->pxNext;
 142:	e9 01       	movw	r28, r18
 144:	8a 81       	ldd	r24, Y+2	; 0x02
 146:	9b 81       	ldd	r25, Y+3	; 0x03
 148:	13 96       	adiw	r26, 0x03	; 3
 14a:	9c 93       	st	X, r25
 14c:	8e 93       	st	-X, r24
 14e:	12 97       	sbiw	r26, 0x02	; 2
	pxNewListItem->pxPrevious = pxList->pxIndex;
 150:	81 81       	ldd	r24, Z+1	; 0x01
 152:	92 81       	ldd	r25, Z+2	; 0x02
 154:	15 96       	adiw	r26, 0x05	; 5
 156:	9c 93       	st	X, r25
 158:	8e 93       	st	-X, r24
 15a:	14 97       	sbiw	r26, 0x04	; 4
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
 15c:	8a 81       	ldd	r24, Y+2	; 0x02
 15e:	9b 81       	ldd	r25, Y+3	; 0x03
 160:	ec 01       	movw	r28, r24
 162:	7d 83       	std	Y+5, r23	; 0x05
 164:	6c 83       	std	Y+4, r22	; 0x04
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
 166:	e9 01       	movw	r28, r18
 168:	7b 83       	std	Y+3, r23	; 0x03
 16a:	6a 83       	std	Y+2, r22	; 0x02
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
 16c:	72 83       	std	Z+2, r23	; 0x02
 16e:	61 83       	std	Z+1, r22	; 0x01

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 170:	19 96       	adiw	r26, 0x09	; 9
 172:	fc 93       	st	X, r31
 174:	ee 93       	st	-X, r30
 176:	18 97       	sbiw	r26, 0x08	; 8

	( pxList->uxNumberOfItems )++;
 178:	80 81       	ld	r24, Z
 17a:	8f 5f       	subi	r24, 0xFF	; 255
 17c:	80 83       	st	Z, r24
}
 17e:	df 91       	pop	r29
 180:	cf 91       	pop	r28
 182:	08 95       	ret

00000184 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
 184:	cf 93       	push	r28
 186:	df 93       	push	r29
 188:	eb 01       	movw	r28, r22
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
 18a:	48 81       	ld	r20, Y
 18c:	59 81       	ldd	r21, Y+1	; 0x01
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 18e:	4f 3f       	cpi	r20, 0xFF	; 255
 190:	2f ef       	ldi	r18, 0xFF	; 255
 192:	52 07       	cpc	r21, r18
 194:	31 f4       	brne	.+12     	; 0x1a2 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 196:	dc 01       	movw	r26, r24
 198:	17 96       	adiw	r26, 0x07	; 7
 19a:	ed 91       	ld	r30, X+
 19c:	fc 91       	ld	r31, X
 19e:	18 97       	sbiw	r26, 0x08	; 8
 1a0:	17 c0       	rjmp	.+46     	; 0x1d0 <vListInsert+0x4c>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/
		
		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
 1a2:	fc 01       	movw	r30, r24
 1a4:	33 96       	adiw	r30, 0x03	; 3
 1a6:	dc 01       	movw	r26, r24
 1a8:	15 96       	adiw	r26, 0x05	; 5
 1aa:	2d 91       	ld	r18, X+
 1ac:	3c 91       	ld	r19, X
 1ae:	16 97       	sbiw	r26, 0x06	; 6
 1b0:	d9 01       	movw	r26, r18
 1b2:	2d 91       	ld	r18, X+
 1b4:	3c 91       	ld	r19, X
 1b6:	42 17       	cp	r20, r18
 1b8:	53 07       	cpc	r21, r19
 1ba:	50 f0       	brcs	.+20     	; 0x1d0 <vListInsert+0x4c>
 1bc:	02 80       	ldd	r0, Z+2	; 0x02
 1be:	f3 81       	ldd	r31, Z+3	; 0x03
 1c0:	e0 2d       	mov	r30, r0
 1c2:	a2 81       	ldd	r26, Z+2	; 0x02
 1c4:	b3 81       	ldd	r27, Z+3	; 0x03
 1c6:	2d 91       	ld	r18, X+
 1c8:	3c 91       	ld	r19, X
 1ca:	42 17       	cp	r20, r18
 1cc:	53 07       	cpc	r21, r19
 1ce:	b0 f7       	brcc	.-20     	; 0x1bc <vListInsert+0x38>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 1d0:	a2 81       	ldd	r26, Z+2	; 0x02
 1d2:	b3 81       	ldd	r27, Z+3	; 0x03
 1d4:	bb 83       	std	Y+3, r27	; 0x03
 1d6:	aa 83       	std	Y+2, r26	; 0x02
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
 1d8:	15 96       	adiw	r26, 0x05	; 5
 1da:	dc 93       	st	X, r29
 1dc:	ce 93       	st	-X, r28
 1de:	14 97       	sbiw	r26, 0x04	; 4
	pxNewListItem->pxPrevious = pxIterator;
 1e0:	fd 83       	std	Y+5, r31	; 0x05
 1e2:	ec 83       	std	Y+4, r30	; 0x04
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
 1e4:	d3 83       	std	Z+3, r29	; 0x03
 1e6:	c2 83       	std	Z+2, r28	; 0x02

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 1e8:	99 87       	std	Y+9, r25	; 0x09
 1ea:	88 87       	std	Y+8, r24	; 0x08

	( pxList->uxNumberOfItems )++;
 1ec:	fc 01       	movw	r30, r24
 1ee:	20 81       	ld	r18, Z
 1f0:	2f 5f       	subi	r18, 0xFF	; 255
 1f2:	20 83       	st	Z, r18
}
 1f4:	df 91       	pop	r29
 1f6:	cf 91       	pop	r28
 1f8:	08 95       	ret

000001fa <vListRemove>:
/*-----------------------------------------------------------*/

void vListRemove( xListItem *pxItemToRemove )
{
 1fa:	fc 01       	movw	r30, r24
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 1fc:	a2 81       	ldd	r26, Z+2	; 0x02
 1fe:	b3 81       	ldd	r27, Z+3	; 0x03
 200:	84 81       	ldd	r24, Z+4	; 0x04
 202:	95 81       	ldd	r25, Z+5	; 0x05
 204:	15 96       	adiw	r26, 0x05	; 5
 206:	9c 93       	st	X, r25
 208:	8e 93       	st	-X, r24
 20a:	14 97       	sbiw	r26, 0x04	; 4
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 20c:	a4 81       	ldd	r26, Z+4	; 0x04
 20e:	b5 81       	ldd	r27, Z+5	; 0x05
 210:	82 81       	ldd	r24, Z+2	; 0x02
 212:	93 81       	ldd	r25, Z+3	; 0x03
 214:	13 96       	adiw	r26, 0x03	; 3
 216:	9c 93       	st	X, r25
 218:	8e 93       	st	-X, r24
 21a:	12 97       	sbiw	r26, 0x02	; 2
	
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
 21c:	a0 85       	ldd	r26, Z+8	; 0x08
 21e:	b1 85       	ldd	r27, Z+9	; 0x09

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 220:	11 96       	adiw	r26, 0x01	; 1
 222:	8d 91       	ld	r24, X+
 224:	9c 91       	ld	r25, X
 226:	12 97       	sbiw	r26, 0x02	; 2
 228:	8e 17       	cp	r24, r30
 22a:	9f 07       	cpc	r25, r31
 22c:	31 f4       	brne	.+12     	; 0x23a <vListRemove+0x40>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 22e:	84 81       	ldd	r24, Z+4	; 0x04
 230:	95 81       	ldd	r25, Z+5	; 0x05
 232:	12 96       	adiw	r26, 0x02	; 2
 234:	9c 93       	st	X, r25
 236:	8e 93       	st	-X, r24
 238:	11 97       	sbiw	r26, 0x01	; 1
	}

	pxItemToRemove->pvContainer = NULL;
 23a:	11 86       	std	Z+9, r1	; 0x09
 23c:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
 23e:	8c 91       	ld	r24, X
 240:	81 50       	subi	r24, 0x01	; 1
 242:	8c 93       	st	X, r24
 244:	08 95       	ret

00000246 <Belt_Tick>:
	belt_state = INIT;
}

void Belt_Tick(){
	//Actions
	switch(belt_state){
 246:	80 91 4c 07 	lds	r24, 0x074C	; 0x80074c <belt_state>
 24a:	81 30       	cpi	r24, 0x01	; 1
 24c:	19 f0       	breq	.+6      	; 0x254 <Belt_Tick+0xe>
 24e:	82 30       	cpi	r24, 0x02	; 2
 250:	19 f0       	breq	.+6      	; 0x258 <Belt_Tick+0x12>
 252:	04 c0       	rjmp	.+8      	; 0x25c <Belt_Tick+0x16>
		case INIT:
			break;
		case Off:
			PORTB = 0x00;
 254:	15 b8       	out	0x05, r1	; 5
			break;
 256:	02 c0       	rjmp	.+4      	; 0x25c <Belt_Tick+0x16>
		case On:
			PORTB = 0x01;
 258:	81 e0       	ldi	r24, 0x01	; 1
 25a:	85 b9       	out	0x05, r24	; 5
			break;
	}
	//Transitions
	switch(belt_state){
 25c:	80 91 4c 07 	lds	r24, 0x074C	; 0x80074c <belt_state>
 260:	81 30       	cpi	r24, 0x01	; 1
 262:	41 f0       	breq	.+16     	; 0x274 <Belt_Tick+0x2e>
 264:	18 f0       	brcs	.+6      	; 0x26c <Belt_Tick+0x26>
 266:	82 30       	cpi	r24, 0x02	; 2
 268:	59 f0       	breq	.+22     	; 0x280 <Belt_Tick+0x3a>
 26a:	08 95       	ret
		case INIT:
			belt_state = Off;
 26c:	81 e0       	ldi	r24, 0x01	; 1
 26e:	80 93 4c 07 	sts	0x074C, r24	; 0x80074c <belt_state>
			break;
 272:	08 95       	ret
		case Off:
			if((~PIND & 0x01) == 0x01)
 274:	48 99       	sbic	0x09, 0	; 9
 276:	09 c0       	rjmp	.+18     	; 0x28a <Belt_Tick+0x44>
				belt_state = On;
 278:	82 e0       	ldi	r24, 0x02	; 2
 27a:	80 93 4c 07 	sts	0x074C, r24	; 0x80074c <belt_state>
 27e:	08 95       	ret
			break;
		case On:
			if((~PIND & 0x01) == 0x00)
 280:	48 9b       	sbis	0x09, 0	; 9
 282:	03 c0       	rjmp	.+6      	; 0x28a <Belt_Tick+0x44>
				belt_state = Off;
 284:	81 e0       	ldi	r24, 0x01	; 1
 286:	80 93 4c 07 	sts	0x074C, r24	; 0x80074c <belt_state>
 28a:	08 95       	ret

0000028c <BeltSecTask>:
#include "task.h" 
#include "croutine.h" 
enum BeltState {INIT,Off, On} belt_state;

void Belt_Init(){
	belt_state = INIT;
 28c:	10 92 4c 07 	sts	0x074C, r1	; 0x80074c <belt_state>
void BeltSecTask()
{
	Belt_Init();
   for(;;) 
   { 	
	Belt_Tick();
 290:	da df       	rcall	.-76     	; 0x246 <Belt_Tick>
	vTaskDelay(100); 
 292:	84 e6       	ldi	r24, 0x64	; 100
 294:	90 e0       	ldi	r25, 0x00	; 0
 296:	1d d4       	rcall	.+2106   	; 0xad2 <vTaskDelay>
   } 
 298:	fb cf       	rjmp	.-10     	; 0x290 <BeltSecTask+0x4>

0000029a <StartSecPulse>:
}

void StartSecPulse(unsigned portBASE_TYPE Priority)
{
 29a:	af 92       	push	r10
 29c:	bf 92       	push	r11
 29e:	cf 92       	push	r12
 2a0:	df 92       	push	r13
 2a2:	ef 92       	push	r14
 2a4:	ff 92       	push	r15
 2a6:	0f 93       	push	r16
	xTaskCreate(BeltSecTask, (signed portCHAR *)"BeltSecTask", configMINIMAL_STACK_SIZE, NULL, Priority, NULL );
 2a8:	a1 2c       	mov	r10, r1
 2aa:	b1 2c       	mov	r11, r1
 2ac:	c1 2c       	mov	r12, r1
 2ae:	d1 2c       	mov	r13, r1
 2b0:	e1 2c       	mov	r14, r1
 2b2:	f1 2c       	mov	r15, r1
 2b4:	08 2f       	mov	r16, r24
 2b6:	20 e0       	ldi	r18, 0x00	; 0
 2b8:	30 e0       	ldi	r19, 0x00	; 0
 2ba:	45 e5       	ldi	r20, 0x55	; 85
 2bc:	50 e0       	ldi	r21, 0x00	; 0
 2be:	62 e0       	ldi	r22, 0x02	; 2
 2c0:	71 e0       	ldi	r23, 0x01	; 1
 2c2:	86 e4       	ldi	r24, 0x46	; 70
 2c4:	91 e0       	ldi	r25, 0x01	; 1
 2c6:	a1 d1       	rcall	.+834    	; 0x60a <xTaskGenericCreate>
}	
 2c8:	0f 91       	pop	r16
 2ca:	ff 90       	pop	r15
 2cc:	ef 90       	pop	r14
 2ce:	df 90       	pop	r13
 2d0:	cf 90       	pop	r12
 2d2:	bf 90       	pop	r11
 2d4:	af 90       	pop	r10
 2d6:	08 95       	ret

000002d8 <main>:
 
int main(void) 
{ 
   DDRB = 0xFF; PORTB=0x00;
 2d8:	8f ef       	ldi	r24, 0xFF	; 255
 2da:	84 b9       	out	0x04, r24	; 4
 2dc:	15 b8       	out	0x05, r1	; 5
   DDRD = 0x00; PORTD = 0xFF;
 2de:	1a b8       	out	0x0a, r1	; 10
 2e0:	8b b9       	out	0x0b, r24	; 11
   //Start Tasks  
   StartSecPulse(1);
 2e2:	81 e0       	ldi	r24, 0x01	; 1
 2e4:	da df       	rcall	.-76     	; 0x29a <StartSecPulse>
    //RunSchedular 
   vTaskStartScheduler(); 
 2e6:	84 d2       	rcall	.+1288   	; 0x7f0 <vTaskStartScheduler>
 
   return 0; 
 2e8:	80 e0       	ldi	r24, 0x00	; 0
 2ea:	90 e0       	ldi	r25, 0x00	; 0
 2ec:	08 95       	ret

000002ee <pxPortInitialiseStack>:
	return pdTRUE;
}
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
 2ee:	31 e1       	ldi	r19, 0x11	; 17
 2f0:	fc 01       	movw	r30, r24
 2f2:	30 83       	st	Z, r19
 2f4:	31 97       	sbiw	r30, 0x01	; 1
 2f6:	22 e2       	ldi	r18, 0x22	; 34
 2f8:	20 83       	st	Z, r18
 2fa:	31 97       	sbiw	r30, 0x01	; 1
 2fc:	a3 e3       	ldi	r26, 0x33	; 51
 2fe:	a0 83       	st	Z, r26
 300:	31 97       	sbiw	r30, 0x01	; 1
 302:	60 83       	st	Z, r22
 304:	31 97       	sbiw	r30, 0x01	; 1
 306:	70 83       	st	Z, r23
 308:	31 97       	sbiw	r30, 0x01	; 1
 30a:	10 82       	st	Z, r1
 30c:	31 97       	sbiw	r30, 0x01	; 1
 30e:	60 e8       	ldi	r22, 0x80	; 128
 310:	60 83       	st	Z, r22
 312:	31 97       	sbiw	r30, 0x01	; 1
 314:	10 82       	st	Z, r1
 316:	31 97       	sbiw	r30, 0x01	; 1
 318:	62 e0       	ldi	r22, 0x02	; 2
 31a:	60 83       	st	Z, r22
 31c:	31 97       	sbiw	r30, 0x01	; 1
 31e:	63 e0       	ldi	r22, 0x03	; 3
 320:	60 83       	st	Z, r22
 322:	31 97       	sbiw	r30, 0x01	; 1
 324:	64 e0       	ldi	r22, 0x04	; 4
 326:	60 83       	st	Z, r22
 328:	31 97       	sbiw	r30, 0x01	; 1
 32a:	65 e0       	ldi	r22, 0x05	; 5
 32c:	60 83       	st	Z, r22
 32e:	31 97       	sbiw	r30, 0x01	; 1
 330:	66 e0       	ldi	r22, 0x06	; 6
 332:	60 83       	st	Z, r22
 334:	31 97       	sbiw	r30, 0x01	; 1
 336:	67 e0       	ldi	r22, 0x07	; 7
 338:	60 83       	st	Z, r22
 33a:	31 97       	sbiw	r30, 0x01	; 1
 33c:	68 e0       	ldi	r22, 0x08	; 8
 33e:	60 83       	st	Z, r22
 340:	31 97       	sbiw	r30, 0x01	; 1
 342:	69 e0       	ldi	r22, 0x09	; 9
 344:	60 83       	st	Z, r22
 346:	31 97       	sbiw	r30, 0x01	; 1
 348:	60 e1       	ldi	r22, 0x10	; 16
 34a:	60 83       	st	Z, r22
 34c:	31 97       	sbiw	r30, 0x01	; 1
 34e:	30 83       	st	Z, r19
 350:	31 97       	sbiw	r30, 0x01	; 1
 352:	32 e1       	ldi	r19, 0x12	; 18
 354:	30 83       	st	Z, r19
 356:	31 97       	sbiw	r30, 0x01	; 1
 358:	33 e1       	ldi	r19, 0x13	; 19
 35a:	30 83       	st	Z, r19
 35c:	31 97       	sbiw	r30, 0x01	; 1
 35e:	34 e1       	ldi	r19, 0x14	; 20
 360:	30 83       	st	Z, r19
 362:	31 97       	sbiw	r30, 0x01	; 1
 364:	35 e1       	ldi	r19, 0x15	; 21
 366:	30 83       	st	Z, r19
 368:	31 97       	sbiw	r30, 0x01	; 1
 36a:	36 e1       	ldi	r19, 0x16	; 22
 36c:	30 83       	st	Z, r19
 36e:	31 97       	sbiw	r30, 0x01	; 1
 370:	37 e1       	ldi	r19, 0x17	; 23
 372:	30 83       	st	Z, r19
 374:	31 97       	sbiw	r30, 0x01	; 1
 376:	38 e1       	ldi	r19, 0x18	; 24
 378:	30 83       	st	Z, r19
 37a:	31 97       	sbiw	r30, 0x01	; 1
 37c:	39 e1       	ldi	r19, 0x19	; 25
 37e:	30 83       	st	Z, r19
 380:	31 97       	sbiw	r30, 0x01	; 1
 382:	30 e2       	ldi	r19, 0x20	; 32
 384:	30 83       	st	Z, r19
 386:	31 97       	sbiw	r30, 0x01	; 1
 388:	31 e2       	ldi	r19, 0x21	; 33
 38a:	30 83       	st	Z, r19
 38c:	31 97       	sbiw	r30, 0x01	; 1
 38e:	20 83       	st	Z, r18
 390:	31 97       	sbiw	r30, 0x01	; 1
 392:	23 e2       	ldi	r18, 0x23	; 35
 394:	20 83       	st	Z, r18
 396:	31 97       	sbiw	r30, 0x01	; 1
 398:	40 83       	st	Z, r20
 39a:	31 97       	sbiw	r30, 0x01	; 1
 39c:	50 83       	st	Z, r21
 39e:	31 97       	sbiw	r30, 0x01	; 1
 3a0:	26 e2       	ldi	r18, 0x26	; 38
 3a2:	20 83       	st	Z, r18
 3a4:	31 97       	sbiw	r30, 0x01	; 1
 3a6:	27 e2       	ldi	r18, 0x27	; 39
 3a8:	20 83       	st	Z, r18
 3aa:	31 97       	sbiw	r30, 0x01	; 1
 3ac:	28 e2       	ldi	r18, 0x28	; 40
 3ae:	20 83       	st	Z, r18
 3b0:	31 97       	sbiw	r30, 0x01	; 1
 3b2:	29 e2       	ldi	r18, 0x29	; 41
 3b4:	20 83       	st	Z, r18
 3b6:	31 97       	sbiw	r30, 0x01	; 1
 3b8:	20 e3       	ldi	r18, 0x30	; 48
 3ba:	20 83       	st	Z, r18
 3bc:	31 97       	sbiw	r30, 0x01	; 1
 3be:	21 e3       	ldi	r18, 0x31	; 49
 3c0:	20 83       	st	Z, r18
 3c2:	86 97       	sbiw	r24, 0x26	; 38
 3c4:	08 95       	ret

000003c6 <xPortStartScheduler>:
 3c6:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 3ca:	8c e7       	ldi	r24, 0x7C	; 124
 3cc:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 3d0:	8b e0       	ldi	r24, 0x0B	; 11
 3d2:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 3d6:	ef e6       	ldi	r30, 0x6F	; 111
 3d8:	f0 e0       	ldi	r31, 0x00	; 0
 3da:	80 81       	ld	r24, Z
 3dc:	82 60       	ori	r24, 0x02	; 2
 3de:	80 83       	st	Z, r24
 3e0:	a0 91 4a 07 	lds	r26, 0x074A	; 0x80074a <pxCurrentTCB>
 3e4:	b0 91 4b 07 	lds	r27, 0x074B	; 0x80074b <pxCurrentTCB+0x1>
 3e8:	cd 91       	ld	r28, X+
 3ea:	cd bf       	out	0x3d, r28	; 61
 3ec:	dd 91       	ld	r29, X+
 3ee:	de bf       	out	0x3e, r29	; 62
 3f0:	ff 91       	pop	r31
 3f2:	ef 91       	pop	r30
 3f4:	df 91       	pop	r29
 3f6:	cf 91       	pop	r28
 3f8:	bf 91       	pop	r27
 3fa:	af 91       	pop	r26
 3fc:	9f 91       	pop	r25
 3fe:	8f 91       	pop	r24
 400:	7f 91       	pop	r23
 402:	6f 91       	pop	r22
 404:	5f 91       	pop	r21
 406:	4f 91       	pop	r20
 408:	3f 91       	pop	r19
 40a:	2f 91       	pop	r18
 40c:	1f 91       	pop	r17
 40e:	0f 91       	pop	r16
 410:	ff 90       	pop	r15
 412:	ef 90       	pop	r14
 414:	df 90       	pop	r13
 416:	cf 90       	pop	r12
 418:	bf 90       	pop	r11
 41a:	af 90       	pop	r10
 41c:	9f 90       	pop	r9
 41e:	8f 90       	pop	r8
 420:	7f 90       	pop	r7
 422:	6f 90       	pop	r6
 424:	5f 90       	pop	r5
 426:	4f 90       	pop	r4
 428:	3f 90       	pop	r3
 42a:	2f 90       	pop	r2
 42c:	1f 90       	pop	r1
 42e:	0f 90       	pop	r0
 430:	0f be       	out	0x3f, r0	; 63
 432:	0f 90       	pop	r0
 434:	08 95       	ret
 436:	81 e0       	ldi	r24, 0x01	; 1
 438:	08 95       	ret

0000043a <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
 43a:	0f 92       	push	r0
 43c:	0f b6       	in	r0, 0x3f	; 63
 43e:	f8 94       	cli
 440:	0f 92       	push	r0
 442:	1f 92       	push	r1
 444:	11 24       	eor	r1, r1
 446:	2f 92       	push	r2
 448:	3f 92       	push	r3
 44a:	4f 92       	push	r4
 44c:	5f 92       	push	r5
 44e:	6f 92       	push	r6
 450:	7f 92       	push	r7
 452:	8f 92       	push	r8
 454:	9f 92       	push	r9
 456:	af 92       	push	r10
 458:	bf 92       	push	r11
 45a:	cf 92       	push	r12
 45c:	df 92       	push	r13
 45e:	ef 92       	push	r14
 460:	ff 92       	push	r15
 462:	0f 93       	push	r16
 464:	1f 93       	push	r17
 466:	2f 93       	push	r18
 468:	3f 93       	push	r19
 46a:	4f 93       	push	r20
 46c:	5f 93       	push	r21
 46e:	6f 93       	push	r22
 470:	7f 93       	push	r23
 472:	8f 93       	push	r24
 474:	9f 93       	push	r25
 476:	af 93       	push	r26
 478:	bf 93       	push	r27
 47a:	cf 93       	push	r28
 47c:	df 93       	push	r29
 47e:	ef 93       	push	r30
 480:	ff 93       	push	r31
 482:	a0 91 4a 07 	lds	r26, 0x074A	; 0x80074a <pxCurrentTCB>
 486:	b0 91 4b 07 	lds	r27, 0x074B	; 0x80074b <pxCurrentTCB+0x1>
 48a:	0d b6       	in	r0, 0x3d	; 61
 48c:	0d 92       	st	X+, r0
 48e:	0e b6       	in	r0, 0x3e	; 62
 490:	0d 92       	st	X+, r0
	vTaskSwitchContext();
 492:	70 d3       	rcall	.+1760   	; 0xb74 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
 494:	a0 91 4a 07 	lds	r26, 0x074A	; 0x80074a <pxCurrentTCB>
 498:	b0 91 4b 07 	lds	r27, 0x074B	; 0x80074b <pxCurrentTCB+0x1>
 49c:	cd 91       	ld	r28, X+
 49e:	cd bf       	out	0x3d, r28	; 61
 4a0:	dd 91       	ld	r29, X+
 4a2:	de bf       	out	0x3e, r29	; 62
 4a4:	ff 91       	pop	r31
 4a6:	ef 91       	pop	r30
 4a8:	df 91       	pop	r29
 4aa:	cf 91       	pop	r28
 4ac:	bf 91       	pop	r27
 4ae:	af 91       	pop	r26
 4b0:	9f 91       	pop	r25
 4b2:	8f 91       	pop	r24
 4b4:	7f 91       	pop	r23
 4b6:	6f 91       	pop	r22
 4b8:	5f 91       	pop	r21
 4ba:	4f 91       	pop	r20
 4bc:	3f 91       	pop	r19
 4be:	2f 91       	pop	r18
 4c0:	1f 91       	pop	r17
 4c2:	0f 91       	pop	r16
 4c4:	ff 90       	pop	r15
 4c6:	ef 90       	pop	r14
 4c8:	df 90       	pop	r13
 4ca:	cf 90       	pop	r12
 4cc:	bf 90       	pop	r11
 4ce:	af 90       	pop	r10
 4d0:	9f 90       	pop	r9
 4d2:	8f 90       	pop	r8
 4d4:	7f 90       	pop	r7
 4d6:	6f 90       	pop	r6
 4d8:	5f 90       	pop	r5
 4da:	4f 90       	pop	r4
 4dc:	3f 90       	pop	r3
 4de:	2f 90       	pop	r2
 4e0:	1f 90       	pop	r1
 4e2:	0f 90       	pop	r0
 4e4:	0f be       	out	0x3f, r0	; 63
 4e6:	0f 90       	pop	r0

	asm volatile ( "ret" );
 4e8:	08 95       	ret

000004ea <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
 4ea:	0f 92       	push	r0
 4ec:	0f b6       	in	r0, 0x3f	; 63
 4ee:	f8 94       	cli
 4f0:	0f 92       	push	r0
 4f2:	1f 92       	push	r1
 4f4:	11 24       	eor	r1, r1
 4f6:	2f 92       	push	r2
 4f8:	3f 92       	push	r3
 4fa:	4f 92       	push	r4
 4fc:	5f 92       	push	r5
 4fe:	6f 92       	push	r6
 500:	7f 92       	push	r7
 502:	8f 92       	push	r8
 504:	9f 92       	push	r9
 506:	af 92       	push	r10
 508:	bf 92       	push	r11
 50a:	cf 92       	push	r12
 50c:	df 92       	push	r13
 50e:	ef 92       	push	r14
 510:	ff 92       	push	r15
 512:	0f 93       	push	r16
 514:	1f 93       	push	r17
 516:	2f 93       	push	r18
 518:	3f 93       	push	r19
 51a:	4f 93       	push	r20
 51c:	5f 93       	push	r21
 51e:	6f 93       	push	r22
 520:	7f 93       	push	r23
 522:	8f 93       	push	r24
 524:	9f 93       	push	r25
 526:	af 93       	push	r26
 528:	bf 93       	push	r27
 52a:	cf 93       	push	r28
 52c:	df 93       	push	r29
 52e:	ef 93       	push	r30
 530:	ff 93       	push	r31
 532:	a0 91 4a 07 	lds	r26, 0x074A	; 0x80074a <pxCurrentTCB>
 536:	b0 91 4b 07 	lds	r27, 0x074B	; 0x80074b <pxCurrentTCB+0x1>
 53a:	0d b6       	in	r0, 0x3d	; 61
 53c:	0d 92       	st	X+, r0
 53e:	0e b6       	in	r0, 0x3e	; 62
 540:	0d 92       	st	X+, r0
	vTaskIncrementTick();
 542:	85 d1       	rcall	.+778    	; 0x84e <vTaskIncrementTick>
	vTaskSwitchContext();
 544:	17 d3       	rcall	.+1582   	; 0xb74 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
 546:	a0 91 4a 07 	lds	r26, 0x074A	; 0x80074a <pxCurrentTCB>
 54a:	b0 91 4b 07 	lds	r27, 0x074B	; 0x80074b <pxCurrentTCB+0x1>
 54e:	cd 91       	ld	r28, X+
 550:	cd bf       	out	0x3d, r28	; 61
 552:	dd 91       	ld	r29, X+
 554:	de bf       	out	0x3e, r29	; 62
 556:	ff 91       	pop	r31
 558:	ef 91       	pop	r30
 55a:	df 91       	pop	r29
 55c:	cf 91       	pop	r28
 55e:	bf 91       	pop	r27
 560:	af 91       	pop	r26
 562:	9f 91       	pop	r25
 564:	8f 91       	pop	r24
 566:	7f 91       	pop	r23
 568:	6f 91       	pop	r22
 56a:	5f 91       	pop	r21
 56c:	4f 91       	pop	r20
 56e:	3f 91       	pop	r19
 570:	2f 91       	pop	r18
 572:	1f 91       	pop	r17
 574:	0f 91       	pop	r16
 576:	ff 90       	pop	r15
 578:	ef 90       	pop	r14
 57a:	df 90       	pop	r13
 57c:	cf 90       	pop	r12
 57e:	bf 90       	pop	r11
 580:	af 90       	pop	r10
 582:	9f 90       	pop	r9
 584:	8f 90       	pop	r8
 586:	7f 90       	pop	r7
 588:	6f 90       	pop	r6
 58a:	5f 90       	pop	r5
 58c:	4f 90       	pop	r4
 58e:	3f 90       	pop	r3
 590:	2f 90       	pop	r2
 592:	1f 90       	pop	r1
 594:	0f 90       	pop	r0
 596:	0f be       	out	0x3f, r0	; 63
 598:	0f 90       	pop	r0

	asm volatile ( "ret" );
 59a:	08 95       	ret

0000059c <__vector_13>:
	 * count is incremented after the context is saved.
	 */
	void TIMER1_COMPA_vect( void ) __attribute__ ( ( signal, naked ) );
	void TIMER1_COMPA_vect( void )
	{
		vPortYieldFromTick();
 59c:	a6 df       	rcall	.-180    	; 0x4ea <vPortYieldFromTick>
		asm volatile ( "reti" );
 59e:	18 95       	reti

000005a0 <prvAddCurrentTaskToDelayedList>:
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
		{
			portYIELD_WITHIN_API();
		}
	}
 5a0:	cf 93       	push	r28
 5a2:	df 93       	push	r29
 5a4:	ec 01       	movw	r28, r24
 5a6:	e0 91 4a 07 	lds	r30, 0x074A	; 0x80074a <pxCurrentTCB>
 5aa:	f0 91 4b 07 	lds	r31, 0x074B	; 0x80074b <pxCurrentTCB+0x1>
 5ae:	93 83       	std	Z+3, r25	; 0x03
 5b0:	82 83       	std	Z+2, r24	; 0x02
 5b2:	80 91 fa 06 	lds	r24, 0x06FA	; 0x8006fa <xTickCount>
 5b6:	90 91 fb 06 	lds	r25, 0x06FB	; 0x8006fb <xTickCount+0x1>
 5ba:	c8 17       	cp	r28, r24
 5bc:	d9 07       	cpc	r29, r25
 5be:	60 f4       	brcc	.+24     	; 0x5d8 <prvAddCurrentTaskToDelayedList+0x38>
 5c0:	60 91 4a 07 	lds	r22, 0x074A	; 0x80074a <pxCurrentTCB>
 5c4:	70 91 4b 07 	lds	r23, 0x074B	; 0x80074b <pxCurrentTCB+0x1>
 5c8:	80 91 10 07 	lds	r24, 0x0710	; 0x800710 <pxOverflowDelayedTaskList>
 5cc:	90 91 11 07 	lds	r25, 0x0711	; 0x800711 <pxOverflowDelayedTaskList+0x1>
 5d0:	6e 5f       	subi	r22, 0xFE	; 254
 5d2:	7f 4f       	sbci	r23, 0xFF	; 255
 5d4:	d7 dd       	rcall	.-1106   	; 0x184 <vListInsert>
 5d6:	16 c0       	rjmp	.+44     	; 0x604 <prvAddCurrentTaskToDelayedList+0x64>
 5d8:	60 91 4a 07 	lds	r22, 0x074A	; 0x80074a <pxCurrentTCB>
 5dc:	70 91 4b 07 	lds	r23, 0x074B	; 0x80074b <pxCurrentTCB+0x1>
 5e0:	80 91 12 07 	lds	r24, 0x0712	; 0x800712 <pxDelayedTaskList>
 5e4:	90 91 13 07 	lds	r25, 0x0713	; 0x800713 <pxDelayedTaskList+0x1>
 5e8:	6e 5f       	subi	r22, 0xFE	; 254
 5ea:	7f 4f       	sbci	r23, 0xFF	; 255
 5ec:	cb dd       	rcall	.-1130   	; 0x184 <vListInsert>
 5ee:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 5f2:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 5f6:	c8 17       	cp	r28, r24
 5f8:	d9 07       	cpc	r29, r25
 5fa:	20 f4       	brcc	.+8      	; 0x604 <prvAddCurrentTaskToDelayedList+0x64>
 5fc:	d0 93 01 01 	sts	0x0101, r29	; 0x800101 <__data_start+0x1>
 600:	c0 93 00 01 	sts	0x0100, r28	; 0x800100 <__data_start>
 604:	df 91       	pop	r29
 606:	cf 91       	pop	r28
 608:	08 95       	ret

0000060a <xTaskGenericCreate>:
 60a:	4f 92       	push	r4
 60c:	5f 92       	push	r5
 60e:	6f 92       	push	r6
 610:	7f 92       	push	r7
 612:	8f 92       	push	r8
 614:	9f 92       	push	r9
 616:	af 92       	push	r10
 618:	bf 92       	push	r11
 61a:	cf 92       	push	r12
 61c:	df 92       	push	r13
 61e:	ef 92       	push	r14
 620:	ff 92       	push	r15
 622:	0f 93       	push	r16
 624:	1f 93       	push	r17
 626:	cf 93       	push	r28
 628:	df 93       	push	r29
 62a:	5c 01       	movw	r10, r24
 62c:	4b 01       	movw	r8, r22
 62e:	3a 01       	movw	r6, r20
 630:	29 01       	movw	r4, r18
 632:	81 e2       	ldi	r24, 0x21	; 33
 634:	90 e0       	ldi	r25, 0x00	; 0
 636:	48 dd       	rcall	.-1392   	; 0xc8 <pvPortMalloc>
 638:	ec 01       	movw	r28, r24
 63a:	89 2b       	or	r24, r25
 63c:	09 f4       	brne	.+2      	; 0x640 <xTaskGenericCreate+0x36>
 63e:	c6 c0       	rjmp	.+396    	; 0x7cc <xTaskGenericCreate+0x1c2>
 640:	c1 14       	cp	r12, r1
 642:	d1 04       	cpc	r13, r1
 644:	09 f0       	breq	.+2      	; 0x648 <xTaskGenericCreate+0x3e>
 646:	be c0       	rjmp	.+380    	; 0x7c4 <xTaskGenericCreate+0x1ba>
 648:	c3 01       	movw	r24, r6
 64a:	3e dd       	rcall	.-1412   	; 0xc8 <pvPortMalloc>
 64c:	98 8f       	std	Y+24, r25	; 0x18
 64e:	8f 8b       	std	Y+23, r24	; 0x17
 650:	00 97       	sbiw	r24, 0x00	; 0
 652:	19 f4       	brne	.+6      	; 0x65a <xTaskGenericCreate+0x50>
 654:	ce 01       	movw	r24, r28
 656:	5c dd       	rcall	.-1352   	; 0x110 <vPortFree>
 658:	b9 c0       	rjmp	.+370    	; 0x7cc <xTaskGenericCreate+0x1c2>
 65a:	a3 01       	movw	r20, r6
 65c:	65 ea       	ldi	r22, 0xA5	; 165
 65e:	70 e0       	ldi	r23, 0x00	; 0
 660:	f5 d2       	rcall	.+1514   	; 0xc4c <memset>
 662:	93 01       	movw	r18, r6
 664:	21 50       	subi	r18, 0x01	; 1
 666:	31 09       	sbc	r19, r1
 668:	8f 89       	ldd	r24, Y+23	; 0x17
 66a:	98 8d       	ldd	r25, Y+24	; 0x18
 66c:	3c 01       	movw	r6, r24
 66e:	62 0e       	add	r6, r18
 670:	73 1e       	adc	r7, r19
 672:	48 e0       	ldi	r20, 0x08	; 8
 674:	50 e0       	ldi	r21, 0x00	; 0
 676:	b4 01       	movw	r22, r8
 678:	ce 01       	movw	r24, r28
 67a:	49 96       	adiw	r24, 0x19	; 25
 67c:	ee d2       	rcall	.+1500   	; 0xc5a <strncpy>
 67e:	18 a2       	std	Y+32, r1	; 0x20
 680:	10 2f       	mov	r17, r16
 682:	04 30       	cpi	r16, 0x04	; 4
 684:	08 f0       	brcs	.+2      	; 0x688 <xTaskGenericCreate+0x7e>
 686:	13 e0       	ldi	r17, 0x03	; 3
 688:	1e 8b       	std	Y+22, r17	; 0x16
 68a:	6e 01       	movw	r12, r28
 68c:	82 e0       	ldi	r24, 0x02	; 2
 68e:	c8 0e       	add	r12, r24
 690:	d1 1c       	adc	r13, r1
 692:	c6 01       	movw	r24, r12
 694:	4c dd       	rcall	.-1384   	; 0x12e <vListInitialiseItem>
 696:	ce 01       	movw	r24, r28
 698:	0c 96       	adiw	r24, 0x0c	; 12
 69a:	49 dd       	rcall	.-1390   	; 0x12e <vListInitialiseItem>
 69c:	d9 87       	std	Y+9, r29	; 0x09
 69e:	c8 87       	std	Y+8, r28	; 0x08
 6a0:	84 e0       	ldi	r24, 0x04	; 4
 6a2:	90 e0       	ldi	r25, 0x00	; 0
 6a4:	81 1b       	sub	r24, r17
 6a6:	91 09       	sbc	r25, r1
 6a8:	9d 87       	std	Y+13, r25	; 0x0d
 6aa:	8c 87       	std	Y+12, r24	; 0x0c
 6ac:	db 8b       	std	Y+19, r29	; 0x13
 6ae:	ca 8b       	std	Y+18, r28	; 0x12
 6b0:	a2 01       	movw	r20, r4
 6b2:	b5 01       	movw	r22, r10
 6b4:	c3 01       	movw	r24, r6
 6b6:	1b de       	rcall	.-970    	; 0x2ee <pxPortInitialiseStack>
 6b8:	99 83       	std	Y+1, r25	; 0x01
 6ba:	88 83       	st	Y, r24
 6bc:	e1 14       	cp	r14, r1
 6be:	f1 04       	cpc	r15, r1
 6c0:	19 f0       	breq	.+6      	; 0x6c8 <xTaskGenericCreate+0xbe>
 6c2:	f7 01       	movw	r30, r14
 6c4:	d1 83       	std	Z+1, r29	; 0x01
 6c6:	c0 83       	st	Z, r28
 6c8:	0f b6       	in	r0, 0x3f	; 63
 6ca:	f8 94       	cli
 6cc:	0f 92       	push	r0
 6ce:	80 91 fc 06 	lds	r24, 0x06FC	; 0x8006fc <uxCurrentNumberOfTasks>
 6d2:	8f 5f       	subi	r24, 0xFF	; 255
 6d4:	80 93 fc 06 	sts	0x06FC, r24	; 0x8006fc <uxCurrentNumberOfTasks>
 6d8:	80 91 4a 07 	lds	r24, 0x074A	; 0x80074a <pxCurrentTCB>
 6dc:	90 91 4b 07 	lds	r25, 0x074B	; 0x80074b <pxCurrentTCB+0x1>
 6e0:	89 2b       	or	r24, r25
 6e2:	69 f5       	brne	.+90     	; 0x73e <xTaskGenericCreate+0x134>
 6e4:	d0 93 4b 07 	sts	0x074B, r29	; 0x80074b <pxCurrentTCB+0x1>
 6e8:	c0 93 4a 07 	sts	0x074A, r28	; 0x80074a <pxCurrentTCB>
 6ec:	80 91 fc 06 	lds	r24, 0x06FC	; 0x8006fc <uxCurrentNumberOfTasks>
 6f0:	81 30       	cpi	r24, 0x01	; 1
 6f2:	a1 f5       	brne	.+104    	; 0x75c <xTaskGenericCreate+0x152>
 6f4:	86 e2       	ldi	r24, 0x26	; 38
 6f6:	97 e0       	ldi	r25, 0x07	; 7
 6f8:	0c dd       	rcall	.-1512   	; 0x112 <vListInitialise>
 6fa:	8f e2       	ldi	r24, 0x2F	; 47
 6fc:	97 e0       	ldi	r25, 0x07	; 7
 6fe:	09 dd       	rcall	.-1518   	; 0x112 <vListInitialise>
 700:	88 e3       	ldi	r24, 0x38	; 56
 702:	97 e0       	ldi	r25, 0x07	; 7
 704:	06 dd       	rcall	.-1524   	; 0x112 <vListInitialise>
 706:	81 e4       	ldi	r24, 0x41	; 65
 708:	97 e0       	ldi	r25, 0x07	; 7
 70a:	03 dd       	rcall	.-1530   	; 0x112 <vListInitialise>
 70c:	8d e1       	ldi	r24, 0x1D	; 29
 70e:	97 e0       	ldi	r25, 0x07	; 7
 710:	00 dd       	rcall	.-1536   	; 0x112 <vListInitialise>
 712:	84 e1       	ldi	r24, 0x14	; 20
 714:	97 e0       	ldi	r25, 0x07	; 7
 716:	fd dc       	rcall	.-1542   	; 0x112 <vListInitialise>
 718:	87 e0       	ldi	r24, 0x07	; 7
 71a:	97 e0       	ldi	r25, 0x07	; 7
 71c:	fa dc       	rcall	.-1548   	; 0x112 <vListInitialise>
 71e:	8e ef       	ldi	r24, 0xFE	; 254
 720:	96 e0       	ldi	r25, 0x06	; 6
 722:	f7 dc       	rcall	.-1554   	; 0x112 <vListInitialise>
 724:	8d e1       	ldi	r24, 0x1D	; 29
 726:	97 e0       	ldi	r25, 0x07	; 7
 728:	90 93 13 07 	sts	0x0713, r25	; 0x800713 <pxDelayedTaskList+0x1>
 72c:	80 93 12 07 	sts	0x0712, r24	; 0x800712 <pxDelayedTaskList>
 730:	84 e1       	ldi	r24, 0x14	; 20
 732:	97 e0       	ldi	r25, 0x07	; 7
 734:	90 93 11 07 	sts	0x0711, r25	; 0x800711 <pxOverflowDelayedTaskList+0x1>
 738:	80 93 10 07 	sts	0x0710, r24	; 0x800710 <pxOverflowDelayedTaskList>
 73c:	0f c0       	rjmp	.+30     	; 0x75c <xTaskGenericCreate+0x152>
 73e:	80 91 f7 06 	lds	r24, 0x06F7	; 0x8006f7 <xSchedulerRunning>
 742:	81 11       	cpse	r24, r1
 744:	0b c0       	rjmp	.+22     	; 0x75c <xTaskGenericCreate+0x152>
 746:	e0 91 4a 07 	lds	r30, 0x074A	; 0x80074a <pxCurrentTCB>
 74a:	f0 91 4b 07 	lds	r31, 0x074B	; 0x80074b <pxCurrentTCB+0x1>
 74e:	86 89       	ldd	r24, Z+22	; 0x16
 750:	08 17       	cp	r16, r24
 752:	20 f0       	brcs	.+8      	; 0x75c <xTaskGenericCreate+0x152>
 754:	d0 93 4b 07 	sts	0x074B, r29	; 0x80074b <pxCurrentTCB+0x1>
 758:	c0 93 4a 07 	sts	0x074A, r28	; 0x80074a <pxCurrentTCB>
 75c:	8e 89       	ldd	r24, Y+22	; 0x16
 75e:	90 91 f9 06 	lds	r25, 0x06F9	; 0x8006f9 <uxTopUsedPriority>
 762:	98 17       	cp	r25, r24
 764:	10 f4       	brcc	.+4      	; 0x76a <xTaskGenericCreate+0x160>
 766:	80 93 f9 06 	sts	0x06F9, r24	; 0x8006f9 <uxTopUsedPriority>
 76a:	90 91 f2 06 	lds	r25, 0x06F2	; 0x8006f2 <uxTaskNumber>
 76e:	9f 5f       	subi	r25, 0xFF	; 255
 770:	90 93 f2 06 	sts	0x06F2, r25	; 0x8006f2 <uxTaskNumber>
 774:	90 91 f8 06 	lds	r25, 0x06F8	; 0x8006f8 <uxTopReadyPriority>
 778:	98 17       	cp	r25, r24
 77a:	10 f4       	brcc	.+4      	; 0x780 <xTaskGenericCreate+0x176>
 77c:	80 93 f8 06 	sts	0x06F8, r24	; 0x8006f8 <uxTopReadyPriority>
 780:	90 e0       	ldi	r25, 0x00	; 0
 782:	9c 01       	movw	r18, r24
 784:	22 0f       	add	r18, r18
 786:	33 1f       	adc	r19, r19
 788:	22 0f       	add	r18, r18
 78a:	33 1f       	adc	r19, r19
 78c:	22 0f       	add	r18, r18
 78e:	33 1f       	adc	r19, r19
 790:	82 0f       	add	r24, r18
 792:	93 1f       	adc	r25, r19
 794:	b6 01       	movw	r22, r12
 796:	8a 5d       	subi	r24, 0xDA	; 218
 798:	98 4f       	sbci	r25, 0xF8	; 248
 79a:	cd dc       	rcall	.-1638   	; 0x136 <vListInsertEnd>
 79c:	0f 90       	pop	r0
 79e:	0f be       	out	0x3f, r0	; 63
 7a0:	80 91 f7 06 	lds	r24, 0x06F7	; 0x8006f7 <xSchedulerRunning>
 7a4:	88 23       	and	r24, r24
 7a6:	51 f0       	breq	.+20     	; 0x7bc <xTaskGenericCreate+0x1b2>
 7a8:	e0 91 4a 07 	lds	r30, 0x074A	; 0x80074a <pxCurrentTCB>
 7ac:	f0 91 4b 07 	lds	r31, 0x074B	; 0x80074b <pxCurrentTCB+0x1>
 7b0:	86 89       	ldd	r24, Z+22	; 0x16
 7b2:	80 17       	cp	r24, r16
 7b4:	28 f4       	brcc	.+10     	; 0x7c0 <xTaskGenericCreate+0x1b6>
 7b6:	41 de       	rcall	.-894    	; 0x43a <vPortYield>
 7b8:	81 e0       	ldi	r24, 0x01	; 1
 7ba:	09 c0       	rjmp	.+18     	; 0x7ce <xTaskGenericCreate+0x1c4>
 7bc:	81 e0       	ldi	r24, 0x01	; 1
 7be:	07 c0       	rjmp	.+14     	; 0x7ce <xTaskGenericCreate+0x1c4>
 7c0:	81 e0       	ldi	r24, 0x01	; 1
 7c2:	05 c0       	rjmp	.+10     	; 0x7ce <xTaskGenericCreate+0x1c4>
 7c4:	d8 8e       	std	Y+24, r13	; 0x18
 7c6:	cf 8a       	std	Y+23, r12	; 0x17
 7c8:	c6 01       	movw	r24, r12
 7ca:	47 cf       	rjmp	.-370    	; 0x65a <xTaskGenericCreate+0x50>
 7cc:	8f ef       	ldi	r24, 0xFF	; 255
 7ce:	df 91       	pop	r29
 7d0:	cf 91       	pop	r28
 7d2:	1f 91       	pop	r17
 7d4:	0f 91       	pop	r16
 7d6:	ff 90       	pop	r15
 7d8:	ef 90       	pop	r14
 7da:	df 90       	pop	r13
 7dc:	cf 90       	pop	r12
 7de:	bf 90       	pop	r11
 7e0:	af 90       	pop	r10
 7e2:	9f 90       	pop	r9
 7e4:	8f 90       	pop	r8
 7e6:	7f 90       	pop	r7
 7e8:	6f 90       	pop	r6
 7ea:	5f 90       	pop	r5
 7ec:	4f 90       	pop	r4
 7ee:	08 95       	ret

000007f0 <vTaskStartScheduler>:
 7f0:	af 92       	push	r10
 7f2:	bf 92       	push	r11
 7f4:	cf 92       	push	r12
 7f6:	df 92       	push	r13
 7f8:	ef 92       	push	r14
 7fa:	ff 92       	push	r15
 7fc:	0f 93       	push	r16
 7fe:	a1 2c       	mov	r10, r1
 800:	b1 2c       	mov	r11, r1
 802:	c1 2c       	mov	r12, r1
 804:	d1 2c       	mov	r13, r1
 806:	e1 2c       	mov	r14, r1
 808:	f1 2c       	mov	r15, r1
 80a:	00 e0       	ldi	r16, 0x00	; 0
 80c:	20 e0       	ldi	r18, 0x00	; 0
 80e:	30 e0       	ldi	r19, 0x00	; 0
 810:	45 e5       	ldi	r20, 0x55	; 85
 812:	50 e0       	ldi	r21, 0x00	; 0
 814:	6e e0       	ldi	r22, 0x0E	; 14
 816:	71 e0       	ldi	r23, 0x01	; 1
 818:	84 e8       	ldi	r24, 0x84	; 132
 81a:	95 e0       	ldi	r25, 0x05	; 5
 81c:	f6 de       	rcall	.-532    	; 0x60a <xTaskGenericCreate>
 81e:	81 30       	cpi	r24, 0x01	; 1
 820:	41 f4       	brne	.+16     	; 0x832 <vTaskStartScheduler+0x42>
 822:	f8 94       	cli
 824:	80 93 f7 06 	sts	0x06F7, r24	; 0x8006f7 <xSchedulerRunning>
 828:	10 92 fb 06 	sts	0x06FB, r1	; 0x8006fb <xTickCount+0x1>
 82c:	10 92 fa 06 	sts	0x06FA, r1	; 0x8006fa <xTickCount>
 830:	ca dd       	rcall	.-1132   	; 0x3c6 <xPortStartScheduler>
 832:	0f 91       	pop	r16
 834:	ff 90       	pop	r15
 836:	ef 90       	pop	r14
 838:	df 90       	pop	r13
 83a:	cf 90       	pop	r12
 83c:	bf 90       	pop	r11
 83e:	af 90       	pop	r10
 840:	08 95       	ret

00000842 <vTaskSuspendAll>:
 842:	80 91 f6 06 	lds	r24, 0x06F6	; 0x8006f6 <uxSchedulerSuspended>
 846:	8f 5f       	subi	r24, 0xFF	; 255
 848:	80 93 f6 06 	sts	0x06F6, r24	; 0x8006f6 <uxSchedulerSuspended>
 84c:	08 95       	ret

0000084e <vTaskIncrementTick>:
 84e:	0f 93       	push	r16
 850:	1f 93       	push	r17
 852:	cf 93       	push	r28
 854:	df 93       	push	r29
 856:	80 91 f6 06 	lds	r24, 0x06F6	; 0x8006f6 <uxSchedulerSuspended>
 85a:	81 11       	cpse	r24, r1
 85c:	af c0       	rjmp	.+350    	; 0x9bc <vTaskIncrementTick+0x16e>
 85e:	80 91 fa 06 	lds	r24, 0x06FA	; 0x8006fa <xTickCount>
 862:	90 91 fb 06 	lds	r25, 0x06FB	; 0x8006fb <xTickCount+0x1>
 866:	01 96       	adiw	r24, 0x01	; 1
 868:	90 93 fb 06 	sts	0x06FB, r25	; 0x8006fb <xTickCount+0x1>
 86c:	80 93 fa 06 	sts	0x06FA, r24	; 0x8006fa <xTickCount>
 870:	80 91 fa 06 	lds	r24, 0x06FA	; 0x8006fa <xTickCount>
 874:	90 91 fb 06 	lds	r25, 0x06FB	; 0x8006fb <xTickCount+0x1>
 878:	89 2b       	or	r24, r25
 87a:	99 f5       	brne	.+102    	; 0x8e2 <vTaskIncrementTick+0x94>
 87c:	80 91 12 07 	lds	r24, 0x0712	; 0x800712 <pxDelayedTaskList>
 880:	90 91 13 07 	lds	r25, 0x0713	; 0x800713 <pxDelayedTaskList+0x1>
 884:	20 91 10 07 	lds	r18, 0x0710	; 0x800710 <pxOverflowDelayedTaskList>
 888:	30 91 11 07 	lds	r19, 0x0711	; 0x800711 <pxOverflowDelayedTaskList+0x1>
 88c:	30 93 13 07 	sts	0x0713, r19	; 0x800713 <pxDelayedTaskList+0x1>
 890:	20 93 12 07 	sts	0x0712, r18	; 0x800712 <pxDelayedTaskList>
 894:	90 93 11 07 	sts	0x0711, r25	; 0x800711 <pxOverflowDelayedTaskList+0x1>
 898:	80 93 10 07 	sts	0x0710, r24	; 0x800710 <pxOverflowDelayedTaskList>
 89c:	80 91 f3 06 	lds	r24, 0x06F3	; 0x8006f3 <xNumOfOverflows>
 8a0:	8f 5f       	subi	r24, 0xFF	; 255
 8a2:	80 93 f3 06 	sts	0x06F3, r24	; 0x8006f3 <xNumOfOverflows>
 8a6:	e0 91 12 07 	lds	r30, 0x0712	; 0x800712 <pxDelayedTaskList>
 8aa:	f0 91 13 07 	lds	r31, 0x0713	; 0x800713 <pxDelayedTaskList+0x1>
 8ae:	80 81       	ld	r24, Z
 8b0:	81 11       	cpse	r24, r1
 8b2:	07 c0       	rjmp	.+14     	; 0x8c2 <vTaskIncrementTick+0x74>
 8b4:	8f ef       	ldi	r24, 0xFF	; 255
 8b6:	9f ef       	ldi	r25, 0xFF	; 255
 8b8:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 8bc:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 8c0:	10 c0       	rjmp	.+32     	; 0x8e2 <vTaskIncrementTick+0x94>
 8c2:	e0 91 12 07 	lds	r30, 0x0712	; 0x800712 <pxDelayedTaskList>
 8c6:	f0 91 13 07 	lds	r31, 0x0713	; 0x800713 <pxDelayedTaskList+0x1>
 8ca:	05 80       	ldd	r0, Z+5	; 0x05
 8cc:	f6 81       	ldd	r31, Z+6	; 0x06
 8ce:	e0 2d       	mov	r30, r0
 8d0:	06 80       	ldd	r0, Z+6	; 0x06
 8d2:	f7 81       	ldd	r31, Z+7	; 0x07
 8d4:	e0 2d       	mov	r30, r0
 8d6:	82 81       	ldd	r24, Z+2	; 0x02
 8d8:	93 81       	ldd	r25, Z+3	; 0x03
 8da:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 8de:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 8e2:	20 91 fa 06 	lds	r18, 0x06FA	; 0x8006fa <xTickCount>
 8e6:	30 91 fb 06 	lds	r19, 0x06FB	; 0x8006fb <xTickCount+0x1>
 8ea:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 8ee:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 8f2:	28 17       	cp	r18, r24
 8f4:	39 07       	cpc	r19, r25
 8f6:	08 f4       	brcc	.+2      	; 0x8fa <vTaskIncrementTick+0xac>
 8f8:	66 c0       	rjmp	.+204    	; 0x9c6 <vTaskIncrementTick+0x178>
 8fa:	e0 91 12 07 	lds	r30, 0x0712	; 0x800712 <pxDelayedTaskList>
 8fe:	f0 91 13 07 	lds	r31, 0x0713	; 0x800713 <pxDelayedTaskList+0x1>
 902:	80 81       	ld	r24, Z
 904:	88 23       	and	r24, r24
 906:	99 f0       	breq	.+38     	; 0x92e <vTaskIncrementTick+0xe0>
 908:	e0 91 12 07 	lds	r30, 0x0712	; 0x800712 <pxDelayedTaskList>
 90c:	f0 91 13 07 	lds	r31, 0x0713	; 0x800713 <pxDelayedTaskList+0x1>
 910:	05 80       	ldd	r0, Z+5	; 0x05
 912:	f6 81       	ldd	r31, Z+6	; 0x06
 914:	e0 2d       	mov	r30, r0
 916:	c6 81       	ldd	r28, Z+6	; 0x06
 918:	d7 81       	ldd	r29, Z+7	; 0x07
 91a:	8a 81       	ldd	r24, Y+2	; 0x02
 91c:	9b 81       	ldd	r25, Y+3	; 0x03
 91e:	20 91 fa 06 	lds	r18, 0x06FA	; 0x8006fa <xTickCount>
 922:	30 91 fb 06 	lds	r19, 0x06FB	; 0x8006fb <xTickCount+0x1>
 926:	28 17       	cp	r18, r24
 928:	39 07       	cpc	r19, r25
 92a:	f8 f4       	brcc	.+62     	; 0x96a <vTaskIncrementTick+0x11c>
 92c:	19 c0       	rjmp	.+50     	; 0x960 <vTaskIncrementTick+0x112>
 92e:	8f ef       	ldi	r24, 0xFF	; 255
 930:	9f ef       	ldi	r25, 0xFF	; 255
 932:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 936:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 93a:	45 c0       	rjmp	.+138    	; 0x9c6 <vTaskIncrementTick+0x178>
 93c:	e0 91 12 07 	lds	r30, 0x0712	; 0x800712 <pxDelayedTaskList>
 940:	f0 91 13 07 	lds	r31, 0x0713	; 0x800713 <pxDelayedTaskList+0x1>
 944:	05 80       	ldd	r0, Z+5	; 0x05
 946:	f6 81       	ldd	r31, Z+6	; 0x06
 948:	e0 2d       	mov	r30, r0
 94a:	c6 81       	ldd	r28, Z+6	; 0x06
 94c:	d7 81       	ldd	r29, Z+7	; 0x07
 94e:	8a 81       	ldd	r24, Y+2	; 0x02
 950:	9b 81       	ldd	r25, Y+3	; 0x03
 952:	20 91 fa 06 	lds	r18, 0x06FA	; 0x8006fa <xTickCount>
 956:	30 91 fb 06 	lds	r19, 0x06FB	; 0x8006fb <xTickCount+0x1>
 95a:	28 17       	cp	r18, r24
 95c:	39 07       	cpc	r19, r25
 95e:	28 f4       	brcc	.+10     	; 0x96a <vTaskIncrementTick+0x11c>
 960:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 964:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 968:	2e c0       	rjmp	.+92     	; 0x9c6 <vTaskIncrementTick+0x178>
 96a:	8e 01       	movw	r16, r28
 96c:	0e 5f       	subi	r16, 0xFE	; 254
 96e:	1f 4f       	sbci	r17, 0xFF	; 255
 970:	c8 01       	movw	r24, r16
 972:	43 dc       	rcall	.-1914   	; 0x1fa <vListRemove>
 974:	8c 89       	ldd	r24, Y+20	; 0x14
 976:	9d 89       	ldd	r25, Y+21	; 0x15
 978:	89 2b       	or	r24, r25
 97a:	19 f0       	breq	.+6      	; 0x982 <vTaskIncrementTick+0x134>
 97c:	ce 01       	movw	r24, r28
 97e:	0c 96       	adiw	r24, 0x0c	; 12
 980:	3c dc       	rcall	.-1928   	; 0x1fa <vListRemove>
 982:	2e 89       	ldd	r18, Y+22	; 0x16
 984:	80 91 f8 06 	lds	r24, 0x06F8	; 0x8006f8 <uxTopReadyPriority>
 988:	82 17       	cp	r24, r18
 98a:	10 f4       	brcc	.+4      	; 0x990 <vTaskIncrementTick+0x142>
 98c:	20 93 f8 06 	sts	0x06F8, r18	; 0x8006f8 <uxTopReadyPriority>
 990:	30 e0       	ldi	r19, 0x00	; 0
 992:	c9 01       	movw	r24, r18
 994:	88 0f       	add	r24, r24
 996:	99 1f       	adc	r25, r25
 998:	88 0f       	add	r24, r24
 99a:	99 1f       	adc	r25, r25
 99c:	88 0f       	add	r24, r24
 99e:	99 1f       	adc	r25, r25
 9a0:	82 0f       	add	r24, r18
 9a2:	93 1f       	adc	r25, r19
 9a4:	b8 01       	movw	r22, r16
 9a6:	8a 5d       	subi	r24, 0xDA	; 218
 9a8:	98 4f       	sbci	r25, 0xF8	; 248
 9aa:	c5 db       	rcall	.-2166   	; 0x136 <vListInsertEnd>
 9ac:	e0 91 12 07 	lds	r30, 0x0712	; 0x800712 <pxDelayedTaskList>
 9b0:	f0 91 13 07 	lds	r31, 0x0713	; 0x800713 <pxDelayedTaskList+0x1>
 9b4:	80 81       	ld	r24, Z
 9b6:	81 11       	cpse	r24, r1
 9b8:	c1 cf       	rjmp	.-126    	; 0x93c <vTaskIncrementTick+0xee>
 9ba:	b9 cf       	rjmp	.-142    	; 0x92e <vTaskIncrementTick+0xe0>
 9bc:	80 91 f5 06 	lds	r24, 0x06F5	; 0x8006f5 <uxMissedTicks>
 9c0:	8f 5f       	subi	r24, 0xFF	; 255
 9c2:	80 93 f5 06 	sts	0x06F5, r24	; 0x8006f5 <uxMissedTicks>
 9c6:	df 91       	pop	r29
 9c8:	cf 91       	pop	r28
 9ca:	1f 91       	pop	r17
 9cc:	0f 91       	pop	r16
 9ce:	08 95       	ret

000009d0 <xTaskResumeAll>:
 9d0:	cf 92       	push	r12
 9d2:	df 92       	push	r13
 9d4:	ef 92       	push	r14
 9d6:	ff 92       	push	r15
 9d8:	0f 93       	push	r16
 9da:	1f 93       	push	r17
 9dc:	cf 93       	push	r28
 9de:	df 93       	push	r29
 9e0:	0f b6       	in	r0, 0x3f	; 63
 9e2:	f8 94       	cli
 9e4:	0f 92       	push	r0
 9e6:	80 91 f6 06 	lds	r24, 0x06F6	; 0x8006f6 <uxSchedulerSuspended>
 9ea:	81 50       	subi	r24, 0x01	; 1
 9ec:	80 93 f6 06 	sts	0x06F6, r24	; 0x8006f6 <uxSchedulerSuspended>
 9f0:	80 91 f6 06 	lds	r24, 0x06F6	; 0x8006f6 <uxSchedulerSuspended>
 9f4:	81 11       	cpse	r24, r1
 9f6:	5f c0       	rjmp	.+190    	; 0xab6 <xTaskResumeAll+0xe6>
 9f8:	80 91 fc 06 	lds	r24, 0x06FC	; 0x8006fc <uxCurrentNumberOfTasks>
 9fc:	81 11       	cpse	r24, r1
 9fe:	2f c0       	rjmp	.+94     	; 0xa5e <xTaskResumeAll+0x8e>
 a00:	5d c0       	rjmp	.+186    	; 0xabc <xTaskResumeAll+0xec>
 a02:	d7 01       	movw	r26, r14
 a04:	15 96       	adiw	r26, 0x05	; 5
 a06:	ed 91       	ld	r30, X+
 a08:	fc 91       	ld	r31, X
 a0a:	16 97       	sbiw	r26, 0x06	; 6
 a0c:	c6 81       	ldd	r28, Z+6	; 0x06
 a0e:	d7 81       	ldd	r29, Z+7	; 0x07
 a10:	ce 01       	movw	r24, r28
 a12:	0c 96       	adiw	r24, 0x0c	; 12
 a14:	f2 db       	rcall	.-2076   	; 0x1fa <vListRemove>
 a16:	8e 01       	movw	r16, r28
 a18:	0e 5f       	subi	r16, 0xFE	; 254
 a1a:	1f 4f       	sbci	r17, 0xFF	; 255
 a1c:	c8 01       	movw	r24, r16
 a1e:	ed db       	rcall	.-2086   	; 0x1fa <vListRemove>
 a20:	2e 89       	ldd	r18, Y+22	; 0x16
 a22:	80 91 f8 06 	lds	r24, 0x06F8	; 0x8006f8 <uxTopReadyPriority>
 a26:	82 17       	cp	r24, r18
 a28:	10 f4       	brcc	.+4      	; 0xa2e <xTaskResumeAll+0x5e>
 a2a:	20 93 f8 06 	sts	0x06F8, r18	; 0x8006f8 <uxTopReadyPriority>
 a2e:	30 e0       	ldi	r19, 0x00	; 0
 a30:	c9 01       	movw	r24, r18
 a32:	88 0f       	add	r24, r24
 a34:	99 1f       	adc	r25, r25
 a36:	88 0f       	add	r24, r24
 a38:	99 1f       	adc	r25, r25
 a3a:	88 0f       	add	r24, r24
 a3c:	99 1f       	adc	r25, r25
 a3e:	82 0f       	add	r24, r18
 a40:	93 1f       	adc	r25, r19
 a42:	b8 01       	movw	r22, r16
 a44:	8a 5d       	subi	r24, 0xDA	; 218
 a46:	98 4f       	sbci	r25, 0xF8	; 248
 a48:	76 db       	rcall	.-2324   	; 0x136 <vListInsertEnd>
 a4a:	e0 91 4a 07 	lds	r30, 0x074A	; 0x80074a <pxCurrentTCB>
 a4e:	f0 91 4b 07 	lds	r31, 0x074B	; 0x80074b <pxCurrentTCB+0x1>
 a52:	9e 89       	ldd	r25, Y+22	; 0x16
 a54:	86 89       	ldd	r24, Z+22	; 0x16
 a56:	98 17       	cp	r25, r24
 a58:	58 f0       	brcs	.+22     	; 0xa70 <xTaskResumeAll+0xa0>
 a5a:	dc 2c       	mov	r13, r12
 a5c:	09 c0       	rjmp	.+18     	; 0xa70 <xTaskResumeAll+0xa0>
 a5e:	d1 2c       	mov	r13, r1
 a60:	0f 2e       	mov	r0, r31
 a62:	f7 e0       	ldi	r31, 0x07	; 7
 a64:	ef 2e       	mov	r14, r31
 a66:	f7 e0       	ldi	r31, 0x07	; 7
 a68:	ff 2e       	mov	r15, r31
 a6a:	f0 2d       	mov	r31, r0
 a6c:	cc 24       	eor	r12, r12
 a6e:	c3 94       	inc	r12
 a70:	f7 01       	movw	r30, r14
 a72:	80 81       	ld	r24, Z
 a74:	81 11       	cpse	r24, r1
 a76:	c5 cf       	rjmp	.-118    	; 0xa02 <xTaskResumeAll+0x32>
 a78:	80 91 f5 06 	lds	r24, 0x06F5	; 0x8006f5 <uxMissedTicks>
 a7c:	88 23       	and	r24, r24
 a7e:	79 f0       	breq	.+30     	; 0xa9e <xTaskResumeAll+0xce>
 a80:	80 91 f5 06 	lds	r24, 0x06F5	; 0x8006f5 <uxMissedTicks>
 a84:	88 23       	and	r24, r24
 a86:	91 f0       	breq	.+36     	; 0xaac <xTaskResumeAll+0xdc>
 a88:	e2 de       	rcall	.-572    	; 0x84e <vTaskIncrementTick>
 a8a:	80 91 f5 06 	lds	r24, 0x06F5	; 0x8006f5 <uxMissedTicks>
 a8e:	81 50       	subi	r24, 0x01	; 1
 a90:	80 93 f5 06 	sts	0x06F5, r24	; 0x8006f5 <uxMissedTicks>
 a94:	80 91 f5 06 	lds	r24, 0x06F5	; 0x8006f5 <uxMissedTicks>
 a98:	81 11       	cpse	r24, r1
 a9a:	f6 cf       	rjmp	.-20     	; 0xa88 <xTaskResumeAll+0xb8>
 a9c:	07 c0       	rjmp	.+14     	; 0xaac <xTaskResumeAll+0xdc>
 a9e:	f1 e0       	ldi	r31, 0x01	; 1
 aa0:	df 16       	cp	r13, r31
 aa2:	21 f0       	breq	.+8      	; 0xaac <xTaskResumeAll+0xdc>
 aa4:	80 91 f4 06 	lds	r24, 0x06F4	; 0x8006f4 <xMissedYield>
 aa8:	81 30       	cpi	r24, 0x01	; 1
 aaa:	39 f4       	brne	.+14     	; 0xaba <xTaskResumeAll+0xea>
 aac:	10 92 f4 06 	sts	0x06F4, r1	; 0x8006f4 <xMissedYield>
 ab0:	c4 dc       	rcall	.-1656   	; 0x43a <vPortYield>
 ab2:	81 e0       	ldi	r24, 0x01	; 1
 ab4:	03 c0       	rjmp	.+6      	; 0xabc <xTaskResumeAll+0xec>
 ab6:	80 e0       	ldi	r24, 0x00	; 0
 ab8:	01 c0       	rjmp	.+2      	; 0xabc <xTaskResumeAll+0xec>
 aba:	80 e0       	ldi	r24, 0x00	; 0
 abc:	0f 90       	pop	r0
 abe:	0f be       	out	0x3f, r0	; 63
 ac0:	df 91       	pop	r29
 ac2:	cf 91       	pop	r28
 ac4:	1f 91       	pop	r17
 ac6:	0f 91       	pop	r16
 ac8:	ff 90       	pop	r15
 aca:	ef 90       	pop	r14
 acc:	df 90       	pop	r13
 ace:	cf 90       	pop	r12
 ad0:	08 95       	ret

00000ad2 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
 ad2:	cf 93       	push	r28
 ad4:	df 93       	push	r29
 ad6:	ec 01       	movw	r28, r24
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0U )
 ad8:	89 2b       	or	r24, r25
 ada:	91 f0       	breq	.+36     	; 0xb00 <vTaskDelay+0x2e>
		{
			vTaskSuspendAll();
 adc:	b2 de       	rcall	.-668    	; 0x842 <vTaskSuspendAll>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
 ade:	80 91 fa 06 	lds	r24, 0x06FA	; 0x8006fa <xTickCount>
 ae2:	90 91 fb 06 	lds	r25, 0x06FB	; 0x8006fb <xTickCount+0x1>
 ae6:	c8 0f       	add	r28, r24
 ae8:	d9 1f       	adc	r29, r25

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
 aea:	80 91 4a 07 	lds	r24, 0x074A	; 0x80074a <pxCurrentTCB>
 aee:	90 91 4b 07 	lds	r25, 0x074B	; 0x80074b <pxCurrentTCB+0x1>
 af2:	02 96       	adiw	r24, 0x02	; 2
 af4:	82 db       	rcall	.-2300   	; 0x1fa <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
 af6:	ce 01       	movw	r24, r28
 af8:	53 dd       	rcall	.-1370   	; 0x5a0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 afa:	6a df       	rcall	.-300    	; 0x9d0 <xTaskResumeAll>
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 afc:	81 11       	cpse	r24, r1
 afe:	01 c0       	rjmp	.+2      	; 0xb02 <vTaskDelay+0x30>
		{
			portYIELD_WITHIN_API();
 b00:	9c dc       	rcall	.-1736   	; 0x43a <vPortYield>
		}
	}
 b02:	df 91       	pop	r29
 b04:	cf 91       	pop	r28
 b06:	08 95       	ret

00000b08 <prvIdleTask>:
		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
		{
			vTaskSuspendAll();
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 b08:	0f 2e       	mov	r0, r31
 b0a:	fe ef       	ldi	r31, 0xFE	; 254
 b0c:	ef 2e       	mov	r14, r31
 b0e:	f6 e0       	ldi	r31, 0x06	; 6
 b10:	ff 2e       	mov	r15, r31
 b12:	f0 2d       	mov	r31, r0

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
 b14:	c6 e2       	ldi	r28, 0x26	; 38
 b16:	d7 e0       	ldi	r29, 0x07	; 7
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
 b18:	80 91 fd 06 	lds	r24, 0x06FD	; 0x8006fd <uxTasksDeleted>
 b1c:	88 23       	and	r24, r24
 b1e:	29 f1       	breq	.+74     	; 0xb6a <prvIdleTask+0x62>
		{
			vTaskSuspendAll();
 b20:	90 de       	rcall	.-736    	; 0x842 <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 b22:	d7 01       	movw	r26, r14
 b24:	1c 91       	ld	r17, X
			xTaskResumeAll();
 b26:	54 df       	rcall	.-344    	; 0x9d0 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
 b28:	11 23       	and	r17, r17
 b2a:	f9 f0       	breq	.+62     	; 0xb6a <prvIdleTask+0x62>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
 b2c:	0f b6       	in	r0, 0x3f	; 63
 b2e:	f8 94       	cli
 b30:	0f 92       	push	r0
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
 b32:	d7 01       	movw	r26, r14
 b34:	15 96       	adiw	r26, 0x05	; 5
 b36:	ed 91       	ld	r30, X+
 b38:	fc 91       	ld	r31, X
 b3a:	16 97       	sbiw	r26, 0x06	; 6
 b3c:	06 81       	ldd	r16, Z+6	; 0x06
 b3e:	17 81       	ldd	r17, Z+7	; 0x07
					vListRemove( &( pxTCB->xGenericListItem ) );
 b40:	c8 01       	movw	r24, r16
 b42:	02 96       	adiw	r24, 0x02	; 2
 b44:	5a db       	rcall	.-2380   	; 0x1fa <vListRemove>
					--uxCurrentNumberOfTasks;
 b46:	80 91 fc 06 	lds	r24, 0x06FC	; 0x8006fc <uxCurrentNumberOfTasks>
 b4a:	81 50       	subi	r24, 0x01	; 1
 b4c:	80 93 fc 06 	sts	0x06FC, r24	; 0x8006fc <uxCurrentNumberOfTasks>
					--uxTasksDeleted;
 b50:	80 91 fd 06 	lds	r24, 0x06FD	; 0x8006fd <uxTasksDeleted>
 b54:	81 50       	subi	r24, 0x01	; 1
 b56:	80 93 fd 06 	sts	0x06FD, r24	; 0x8006fd <uxTasksDeleted>
				}
				taskEXIT_CRITICAL();
 b5a:	0f 90       	pop	r0
 b5c:	0f be       	out	0x3f, r0	; 63
		want to allocate and clean RAM statically. */
		portCLEAN_UP_TCB( pxTCB );

		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
 b5e:	f8 01       	movw	r30, r16
 b60:	87 89       	ldd	r24, Z+23	; 0x17
 b62:	90 8d       	ldd	r25, Z+24	; 0x18
 b64:	d5 da       	rcall	.-2646   	; 0x110 <vPortFree>
		vPortFree( pxTCB );
 b66:	c8 01       	movw	r24, r16
 b68:	d3 da       	rcall	.-2650   	; 0x110 <vPortFree>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
 b6a:	88 81       	ld	r24, Y
 b6c:	82 30       	cpi	r24, 0x02	; 2
 b6e:	a0 f2       	brcs	.-88     	; 0xb18 <prvIdleTask+0x10>
			{
				taskYIELD();
 b70:	64 dc       	rcall	.-1848   	; 0x43a <vPortYield>
 b72:	d2 cf       	rjmp	.-92     	; 0xb18 <prvIdleTask+0x10>

00000b74 <vTaskSwitchContext>:
#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
 b74:	80 91 f6 06 	lds	r24, 0x06F6	; 0x8006f6 <uxSchedulerSuspended>
 b78:	81 11       	cpse	r24, r1
 b7a:	13 c0       	rjmp	.+38     	; 0xba2 <vTaskSwitchContext+0x2e>
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
 b7c:	80 91 f8 06 	lds	r24, 0x06F8	; 0x8006f8 <uxTopReadyPriority>
 b80:	90 e0       	ldi	r25, 0x00	; 0
 b82:	fc 01       	movw	r30, r24
 b84:	ee 0f       	add	r30, r30
 b86:	ff 1f       	adc	r31, r31
 b88:	ee 0f       	add	r30, r30
 b8a:	ff 1f       	adc	r31, r31
 b8c:	ee 0f       	add	r30, r30
 b8e:	ff 1f       	adc	r31, r31
 b90:	8e 0f       	add	r24, r30
 b92:	9f 1f       	adc	r25, r31
 b94:	fc 01       	movw	r30, r24
 b96:	ea 5d       	subi	r30, 0xDA	; 218
 b98:	f8 4f       	sbci	r31, 0xF8	; 248
 b9a:	80 81       	ld	r24, Z
 b9c:	88 23       	and	r24, r24
 b9e:	29 f0       	breq	.+10     	; 0xbaa <vTaskSwitchContext+0x36>
 ba0:	1b c0       	rjmp	.+54     	; 0xbd8 <vTaskSwitchContext+0x64>
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
 ba2:	81 e0       	ldi	r24, 0x01	; 1
 ba4:	80 93 f4 06 	sts	0x06F4, r24	; 0x8006f4 <xMissedYield>
 ba8:	08 95       	ret
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
		{
			configASSERT( uxTopReadyPriority );
			--uxTopReadyPriority;
 baa:	80 91 f8 06 	lds	r24, 0x06F8	; 0x8006f8 <uxTopReadyPriority>
 bae:	81 50       	subi	r24, 0x01	; 1
 bb0:	80 93 f8 06 	sts	0x06F8, r24	; 0x8006f8 <uxTopReadyPriority>
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
 bb4:	80 91 f8 06 	lds	r24, 0x06F8	; 0x8006f8 <uxTopReadyPriority>
 bb8:	90 e0       	ldi	r25, 0x00	; 0
 bba:	fc 01       	movw	r30, r24
 bbc:	ee 0f       	add	r30, r30
 bbe:	ff 1f       	adc	r31, r31
 bc0:	ee 0f       	add	r30, r30
 bc2:	ff 1f       	adc	r31, r31
 bc4:	ee 0f       	add	r30, r30
 bc6:	ff 1f       	adc	r31, r31
 bc8:	8e 0f       	add	r24, r30
 bca:	9f 1f       	adc	r25, r31
 bcc:	fc 01       	movw	r30, r24
 bce:	ea 5d       	subi	r30, 0xDA	; 218
 bd0:	f8 4f       	sbci	r31, 0xF8	; 248
 bd2:	80 81       	ld	r24, Z
 bd4:	88 23       	and	r24, r24
 bd6:	49 f3       	breq	.-46     	; 0xbaa <vTaskSwitchContext+0x36>
			--uxTopReadyPriority;
		}
	
		/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the tasks of the
		same priority get an equal share of the processor time. */
		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
 bd8:	80 91 f8 06 	lds	r24, 0x06F8	; 0x8006f8 <uxTopReadyPriority>
 bdc:	90 e0       	ldi	r25, 0x00	; 0
 bde:	9c 01       	movw	r18, r24
 be0:	22 0f       	add	r18, r18
 be2:	33 1f       	adc	r19, r19
 be4:	22 0f       	add	r18, r18
 be6:	33 1f       	adc	r19, r19
 be8:	22 0f       	add	r18, r18
 bea:	33 1f       	adc	r19, r19
 bec:	28 0f       	add	r18, r24
 bee:	39 1f       	adc	r19, r25
 bf0:	d9 01       	movw	r26, r18
 bf2:	aa 5d       	subi	r26, 0xDA	; 218
 bf4:	b8 4f       	sbci	r27, 0xF8	; 248
 bf6:	11 96       	adiw	r26, 0x01	; 1
 bf8:	ed 91       	ld	r30, X+
 bfa:	fc 91       	ld	r31, X
 bfc:	12 97       	sbiw	r26, 0x02	; 2
 bfe:	02 80       	ldd	r0, Z+2	; 0x02
 c00:	f3 81       	ldd	r31, Z+3	; 0x03
 c02:	e0 2d       	mov	r30, r0
 c04:	12 96       	adiw	r26, 0x02	; 2
 c06:	fc 93       	st	X, r31
 c08:	ee 93       	st	-X, r30
 c0a:	11 97       	sbiw	r26, 0x01	; 1
 c0c:	27 5d       	subi	r18, 0xD7	; 215
 c0e:	38 4f       	sbci	r19, 0xF8	; 248
 c10:	e2 17       	cp	r30, r18
 c12:	f3 07       	cpc	r31, r19
 c14:	29 f4       	brne	.+10     	; 0xc20 <vTaskSwitchContext+0xac>
 c16:	22 81       	ldd	r18, Z+2	; 0x02
 c18:	33 81       	ldd	r19, Z+3	; 0x03
 c1a:	fd 01       	movw	r30, r26
 c1c:	32 83       	std	Z+2, r19	; 0x02
 c1e:	21 83       	std	Z+1, r18	; 0x01
 c20:	fc 01       	movw	r30, r24
 c22:	ee 0f       	add	r30, r30
 c24:	ff 1f       	adc	r31, r31
 c26:	ee 0f       	add	r30, r30
 c28:	ff 1f       	adc	r31, r31
 c2a:	ee 0f       	add	r30, r30
 c2c:	ff 1f       	adc	r31, r31
 c2e:	8e 0f       	add	r24, r30
 c30:	9f 1f       	adc	r25, r31
 c32:	fc 01       	movw	r30, r24
 c34:	ea 5d       	subi	r30, 0xDA	; 218
 c36:	f8 4f       	sbci	r31, 0xF8	; 248
 c38:	01 80       	ldd	r0, Z+1	; 0x01
 c3a:	f2 81       	ldd	r31, Z+2	; 0x02
 c3c:	e0 2d       	mov	r30, r0
 c3e:	86 81       	ldd	r24, Z+6	; 0x06
 c40:	97 81       	ldd	r25, Z+7	; 0x07
 c42:	90 93 4b 07 	sts	0x074B, r25	; 0x80074b <pxCurrentTCB+0x1>
 c46:	80 93 4a 07 	sts	0x074A, r24	; 0x80074a <pxCurrentTCB>
 c4a:	08 95       	ret

00000c4c <memset>:
 c4c:	dc 01       	movw	r26, r24
 c4e:	01 c0       	rjmp	.+2      	; 0xc52 <memset+0x6>
 c50:	6d 93       	st	X+, r22
 c52:	41 50       	subi	r20, 0x01	; 1
 c54:	50 40       	sbci	r21, 0x00	; 0
 c56:	e0 f7       	brcc	.-8      	; 0xc50 <memset+0x4>
 c58:	08 95       	ret

00000c5a <strncpy>:
 c5a:	fb 01       	movw	r30, r22
 c5c:	dc 01       	movw	r26, r24
 c5e:	41 50       	subi	r20, 0x01	; 1
 c60:	50 40       	sbci	r21, 0x00	; 0
 c62:	48 f0       	brcs	.+18     	; 0xc76 <strncpy+0x1c>
 c64:	01 90       	ld	r0, Z+
 c66:	0d 92       	st	X+, r0
 c68:	00 20       	and	r0, r0
 c6a:	c9 f7       	brne	.-14     	; 0xc5e <strncpy+0x4>
 c6c:	01 c0       	rjmp	.+2      	; 0xc70 <strncpy+0x16>
 c6e:	1d 92       	st	X+, r1
 c70:	41 50       	subi	r20, 0x01	; 1
 c72:	50 40       	sbci	r21, 0x00	; 0
 c74:	e0 f7       	brcc	.-8      	; 0xc6e <strncpy+0x14>
 c76:	08 95       	ret

00000c78 <_exit>:
 c78:	f8 94       	cli

00000c7a <__stop_program>:
 c7a:	ff cf       	rjmp	.-2      	; 0xc7a <__stop_program>
