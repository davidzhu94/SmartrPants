
BeltTest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800100  00000d12  00000da6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d12  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000063b  00800114  00800114  00000dba  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000dba  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000dec  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001f0  00000000  00000000  00000e2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002528  00000000  00000000  0000101c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000fde  00000000  00000000  00003544  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000014bc  00000000  00000000  00004522  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004b8  00000000  00000000  000059e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000d1c  00000000  00000000  00005e98  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000013b7  00000000  00000000  00006bb4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001e8  00000000  00000000  00007f6b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	fe c2       	rjmp	.+1532   	; 0x632 <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e2 e1       	ldi	r30, 0x12	; 18
  a0:	fd e0       	ldi	r31, 0x0D	; 13
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 31       	cpi	r26, 0x14	; 20
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	27 e0       	ldi	r18, 0x07	; 7
  b4:	a4 e1       	ldi	r26, 0x14	; 20
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	af 34       	cpi	r26, 0x4F	; 79
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	53 d1       	rcall	.+678    	; 0x36a <main>
  c4:	24 c6       	rjmp	.+3144   	; 0xd0e <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <pvPortMalloc>:

static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
  c8:	cf 93       	push	r28
  ca:	df 93       	push	r29
  cc:	ec 01       	movw	r28, r24
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
		}
	#endif

	vTaskSuspendAll();
  ce:	04 d4       	rcall	.+2056   	; 0x8d8 <vTaskSuspendAll>
	{
		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configTOTAL_HEAP_SIZE ) &&
  d0:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <__data_end>
  d4:	30 91 15 01 	lds	r19, 0x0115	; 0x800115 <__data_end+0x1>
  d8:	ce 01       	movw	r24, r28
  da:	82 0f       	add	r24, r18
  dc:	93 1f       	adc	r25, r19
  de:	8c 3d       	cpi	r24, 0xDC	; 220
  e0:	45 e0       	ldi	r20, 0x05	; 5
  e2:	94 07       	cpc	r25, r20
  e4:	58 f4       	brcc	.+22     	; 0xfc <pvPortMalloc+0x34>
  e6:	28 17       	cp	r18, r24
  e8:	39 07       	cpc	r19, r25
  ea:	58 f4       	brcc	.+22     	; 0x102 <pvPortMalloc+0x3a>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
  ec:	e9 01       	movw	r28, r18
  ee:	ca 5e       	subi	r28, 0xEA	; 234
  f0:	de 4f       	sbci	r29, 0xFE	; 254
			xNextFreeByte += xWantedSize;			
  f2:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <__data_end+0x1>
  f6:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <__data_end>
  fa:	05 c0       	rjmp	.+10     	; 0x106 <pvPortMalloc+0x3e>
static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
void *pvReturn = NULL; 
  fc:	c0 e0       	ldi	r28, 0x00	; 0
  fe:	d0 e0       	ldi	r29, 0x00	; 0
 100:	02 c0       	rjmp	.+4      	; 0x106 <pvPortMalloc+0x3e>
 102:	c0 e0       	ldi	r28, 0x00	; 0
 104:	d0 e0       	ldi	r29, 0x00	; 0
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
			xNextFreeByte += xWantedSize;			
		}	
	}
	xTaskResumeAll();
 106:	af d4       	rcall	.+2398   	; 0xa66 <xTaskResumeAll>
		}
	}
	#endif	

	return pvReturn;
}
 108:	ce 01       	movw	r24, r28
 10a:	df 91       	pop	r29
 10c:	cf 91       	pop	r28
 10e:	08 95       	ret

00000110 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 110:	08 95       	ret

00000112 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList *pxList )
{
 112:	fc 01       	movw	r30, r24
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
 114:	03 96       	adiw	r24, 0x03	; 3
 116:	92 83       	std	Z+2, r25	; 0x02
 118:	81 83       	std	Z+1, r24	; 0x01

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 11a:	2f ef       	ldi	r18, 0xFF	; 255
 11c:	3f ef       	ldi	r19, 0xFF	; 255
 11e:	34 83       	std	Z+4, r19	; 0x04
 120:	23 83       	std	Z+3, r18	; 0x03

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
 122:	96 83       	std	Z+6, r25	; 0x06
 124:	85 83       	std	Z+5, r24	; 0x05
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
 126:	90 87       	std	Z+8, r25	; 0x08
 128:	87 83       	std	Z+7, r24	; 0x07

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
 12a:	10 82       	st	Z, r1
 12c:	08 95       	ret

0000012e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 12e:	fc 01       	movw	r30, r24
 130:	11 86       	std	Z+9, r1	; 0x09
 132:	10 86       	std	Z+8, r1	; 0x08
 134:	08 95       	ret

00000136 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
{
 136:	cf 93       	push	r28
 138:	df 93       	push	r29
 13a:	fc 01       	movw	r30, r24
 13c:	db 01       	movw	r26, r22

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
 13e:	21 81       	ldd	r18, Z+1	; 0x01
 140:	32 81       	ldd	r19, Z+2	; 0x02

	pxNewListItem->pxNext = pxIndex->pxNext;
 142:	e9 01       	movw	r28, r18
 144:	8a 81       	ldd	r24, Y+2	; 0x02
 146:	9b 81       	ldd	r25, Y+3	; 0x03
 148:	13 96       	adiw	r26, 0x03	; 3
 14a:	9c 93       	st	X, r25
 14c:	8e 93       	st	-X, r24
 14e:	12 97       	sbiw	r26, 0x02	; 2
	pxNewListItem->pxPrevious = pxList->pxIndex;
 150:	81 81       	ldd	r24, Z+1	; 0x01
 152:	92 81       	ldd	r25, Z+2	; 0x02
 154:	15 96       	adiw	r26, 0x05	; 5
 156:	9c 93       	st	X, r25
 158:	8e 93       	st	-X, r24
 15a:	14 97       	sbiw	r26, 0x04	; 4
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
 15c:	8a 81       	ldd	r24, Y+2	; 0x02
 15e:	9b 81       	ldd	r25, Y+3	; 0x03
 160:	ec 01       	movw	r28, r24
 162:	7d 83       	std	Y+5, r23	; 0x05
 164:	6c 83       	std	Y+4, r22	; 0x04
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
 166:	e9 01       	movw	r28, r18
 168:	7b 83       	std	Y+3, r23	; 0x03
 16a:	6a 83       	std	Y+2, r22	; 0x02
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
 16c:	72 83       	std	Z+2, r23	; 0x02
 16e:	61 83       	std	Z+1, r22	; 0x01

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 170:	19 96       	adiw	r26, 0x09	; 9
 172:	fc 93       	st	X, r31
 174:	ee 93       	st	-X, r30
 176:	18 97       	sbiw	r26, 0x08	; 8

	( pxList->uxNumberOfItems )++;
 178:	80 81       	ld	r24, Z
 17a:	8f 5f       	subi	r24, 0xFF	; 255
 17c:	80 83       	st	Z, r24
}
 17e:	df 91       	pop	r29
 180:	cf 91       	pop	r28
 182:	08 95       	ret

00000184 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
 184:	cf 93       	push	r28
 186:	df 93       	push	r29
 188:	eb 01       	movw	r28, r22
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
 18a:	48 81       	ld	r20, Y
 18c:	59 81       	ldd	r21, Y+1	; 0x01
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 18e:	4f 3f       	cpi	r20, 0xFF	; 255
 190:	2f ef       	ldi	r18, 0xFF	; 255
 192:	52 07       	cpc	r21, r18
 194:	31 f4       	brne	.+12     	; 0x1a2 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 196:	dc 01       	movw	r26, r24
 198:	17 96       	adiw	r26, 0x07	; 7
 19a:	ed 91       	ld	r30, X+
 19c:	fc 91       	ld	r31, X
 19e:	18 97       	sbiw	r26, 0x08	; 8
 1a0:	17 c0       	rjmp	.+46     	; 0x1d0 <vListInsert+0x4c>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/
		
		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
 1a2:	fc 01       	movw	r30, r24
 1a4:	33 96       	adiw	r30, 0x03	; 3
 1a6:	dc 01       	movw	r26, r24
 1a8:	15 96       	adiw	r26, 0x05	; 5
 1aa:	2d 91       	ld	r18, X+
 1ac:	3c 91       	ld	r19, X
 1ae:	16 97       	sbiw	r26, 0x06	; 6
 1b0:	d9 01       	movw	r26, r18
 1b2:	2d 91       	ld	r18, X+
 1b4:	3c 91       	ld	r19, X
 1b6:	42 17       	cp	r20, r18
 1b8:	53 07       	cpc	r21, r19
 1ba:	50 f0       	brcs	.+20     	; 0x1d0 <vListInsert+0x4c>
 1bc:	02 80       	ldd	r0, Z+2	; 0x02
 1be:	f3 81       	ldd	r31, Z+3	; 0x03
 1c0:	e0 2d       	mov	r30, r0
 1c2:	a2 81       	ldd	r26, Z+2	; 0x02
 1c4:	b3 81       	ldd	r27, Z+3	; 0x03
 1c6:	2d 91       	ld	r18, X+
 1c8:	3c 91       	ld	r19, X
 1ca:	42 17       	cp	r20, r18
 1cc:	53 07       	cpc	r21, r19
 1ce:	b0 f7       	brcc	.-20     	; 0x1bc <vListInsert+0x38>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 1d0:	a2 81       	ldd	r26, Z+2	; 0x02
 1d2:	b3 81       	ldd	r27, Z+3	; 0x03
 1d4:	bb 83       	std	Y+3, r27	; 0x03
 1d6:	aa 83       	std	Y+2, r26	; 0x02
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
 1d8:	15 96       	adiw	r26, 0x05	; 5
 1da:	dc 93       	st	X, r29
 1dc:	ce 93       	st	-X, r28
 1de:	14 97       	sbiw	r26, 0x04	; 4
	pxNewListItem->pxPrevious = pxIterator;
 1e0:	fd 83       	std	Y+5, r31	; 0x05
 1e2:	ec 83       	std	Y+4, r30	; 0x04
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
 1e4:	d3 83       	std	Z+3, r29	; 0x03
 1e6:	c2 83       	std	Z+2, r28	; 0x02

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 1e8:	99 87       	std	Y+9, r25	; 0x09
 1ea:	88 87       	std	Y+8, r24	; 0x08

	( pxList->uxNumberOfItems )++;
 1ec:	fc 01       	movw	r30, r24
 1ee:	20 81       	ld	r18, Z
 1f0:	2f 5f       	subi	r18, 0xFF	; 255
 1f2:	20 83       	st	Z, r18
}
 1f4:	df 91       	pop	r29
 1f6:	cf 91       	pop	r28
 1f8:	08 95       	ret

000001fa <vListRemove>:
/*-----------------------------------------------------------*/

void vListRemove( xListItem *pxItemToRemove )
{
 1fa:	fc 01       	movw	r30, r24
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 1fc:	a2 81       	ldd	r26, Z+2	; 0x02
 1fe:	b3 81       	ldd	r27, Z+3	; 0x03
 200:	84 81       	ldd	r24, Z+4	; 0x04
 202:	95 81       	ldd	r25, Z+5	; 0x05
 204:	15 96       	adiw	r26, 0x05	; 5
 206:	9c 93       	st	X, r25
 208:	8e 93       	st	-X, r24
 20a:	14 97       	sbiw	r26, 0x04	; 4
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 20c:	a4 81       	ldd	r26, Z+4	; 0x04
 20e:	b5 81       	ldd	r27, Z+5	; 0x05
 210:	82 81       	ldd	r24, Z+2	; 0x02
 212:	93 81       	ldd	r25, Z+3	; 0x03
 214:	13 96       	adiw	r26, 0x03	; 3
 216:	9c 93       	st	X, r25
 218:	8e 93       	st	-X, r24
 21a:	12 97       	sbiw	r26, 0x02	; 2
	
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
 21c:	a0 85       	ldd	r26, Z+8	; 0x08
 21e:	b1 85       	ldd	r27, Z+9	; 0x09

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 220:	11 96       	adiw	r26, 0x01	; 1
 222:	8d 91       	ld	r24, X+
 224:	9c 91       	ld	r25, X
 226:	12 97       	sbiw	r26, 0x02	; 2
 228:	8e 17       	cp	r24, r30
 22a:	9f 07       	cpc	r25, r31
 22c:	31 f4       	brne	.+12     	; 0x23a <vListRemove+0x40>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 22e:	84 81       	ldd	r24, Z+4	; 0x04
 230:	95 81       	ldd	r25, Z+5	; 0x05
 232:	12 96       	adiw	r26, 0x02	; 2
 234:	9c 93       	st	X, r25
 236:	8e 93       	st	-X, r24
 238:	11 97       	sbiw	r26, 0x01	; 1
	}

	pxItemToRemove->pvContainer = NULL;
 23a:	11 86       	std	Z+9, r1	; 0x09
 23c:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
 23e:	8c 91       	ld	r24, X
 240:	81 50       	subi	r24, 0x01	; 1
 242:	8c 93       	st	X, r24
 244:	08 95       	ret

00000246 <initUSART>:
enum BeltState {INIT, Release, Connect} belt_state;

unsigned char temp;

void Belt_Init(){
	belt_state = INIT;
 246:	81 30       	cpi	r24, 0x01	; 1
 248:	81 f0       	breq	.+32     	; 0x26a <initUSART+0x24>
 24a:	e1 ec       	ldi	r30, 0xC1	; 193
 24c:	f0 e0       	ldi	r31, 0x00	; 0
 24e:	80 81       	ld	r24, Z
 250:	88 61       	ori	r24, 0x18	; 24
 252:	80 83       	st	Z, r24
 254:	e2 ec       	ldi	r30, 0xC2	; 194
 256:	f0 e0       	ldi	r31, 0x00	; 0
 258:	80 81       	ld	r24, Z
 25a:	86 60       	ori	r24, 0x06	; 6
 25c:	80 83       	st	Z, r24
 25e:	83 e3       	ldi	r24, 0x33	; 51
 260:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 264:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 268:	08 95       	ret
 26a:	e9 ec       	ldi	r30, 0xC9	; 201
 26c:	f0 e0       	ldi	r31, 0x00	; 0
 26e:	80 81       	ld	r24, Z
 270:	88 61       	ori	r24, 0x18	; 24
 272:	80 83       	st	Z, r24
 274:	ea ec       	ldi	r30, 0xCA	; 202
 276:	f0 e0       	ldi	r31, 0x00	; 0
 278:	80 81       	ld	r24, Z
 27a:	86 60       	ori	r24, 0x06	; 6
 27c:	80 83       	st	Z, r24
 27e:	83 e3       	ldi	r24, 0x33	; 51
 280:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
 284:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
 288:	08 95       	ret

0000028a <USART_Flush>:
 28a:	81 30       	cpi	r24, 0x01	; 1
 28c:	29 f4       	brne	.+10     	; 0x298 <USART_Flush+0xe>
 28e:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
 292:	88 23       	and	r24, r24
 294:	84 f0       	brlt	.+32     	; 0x2b6 <USART_Flush+0x2c>
 296:	08 95       	ret
 298:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
 29c:	88 23       	and	r24, r24
 29e:	ac f4       	brge	.+42     	; 0x2ca <USART_Flush+0x40>
 2a0:	a6 ec       	ldi	r26, 0xC6	; 198
 2a2:	b0 e0       	ldi	r27, 0x00	; 0
 2a4:	e0 ec       	ldi	r30, 0xC0	; 192
 2a6:	f0 e0       	ldi	r31, 0x00	; 0
 2a8:	8c 91       	ld	r24, X
 2aa:	80 93 f2 06 	sts	0x06F2, r24	; 0x8006f2 <dummy.2480>
 2ae:	80 81       	ld	r24, Z
 2b0:	88 23       	and	r24, r24
 2b2:	d4 f3       	brlt	.-12     	; 0x2a8 <USART_Flush+0x1e>
 2b4:	08 95       	ret
 2b6:	ae ec       	ldi	r26, 0xCE	; 206
 2b8:	b0 e0       	ldi	r27, 0x00	; 0
 2ba:	e8 ec       	ldi	r30, 0xC8	; 200
 2bc:	f0 e0       	ldi	r31, 0x00	; 0
 2be:	8c 91       	ld	r24, X
 2c0:	80 93 f2 06 	sts	0x06F2, r24	; 0x8006f2 <dummy.2480>
 2c4:	80 81       	ld	r24, Z
 2c6:	88 23       	and	r24, r24
 2c8:	d4 f3       	brlt	.-12     	; 0x2be <USART_Flush+0x34>
 2ca:	08 95       	ret

000002cc <Belt_Tick>:
		case Connect:
			//charge magnets and wait 3 seconds, then tighten belt until load sensor reaches threshold 
			break;
	}
	//Transitions
	switch(belt_state){
 2cc:	80 91 4e 07 	lds	r24, 0x074E	; 0x80074e <belt_state>
 2d0:	81 30       	cpi	r24, 0x01	; 1
 2d2:	41 f0       	breq	.+16     	; 0x2e4 <Belt_Tick+0x18>
 2d4:	18 f0       	brcs	.+6      	; 0x2dc <Belt_Tick+0x10>
 2d6:	82 30       	cpi	r24, 0x02	; 2
 2d8:	b1 f0       	breq	.+44     	; 0x306 <Belt_Tick+0x3a>
 2da:	08 95       	ret
		case INIT:
			belt_state = Release;
 2dc:	81 e0       	ldi	r24, 0x01	; 1
 2de:	80 93 4e 07 	sts	0x074E, r24	; 0x80074e <belt_state>
			break;
 2e2:	08 95       	ret
//Functionality - checks if USART has recieved data
//Parameter: usartNum specifies which USART is checked
//Returns: 1 if true else 0
unsigned char USART_HasReceived(unsigned char usartNum)
{
	return (usartNum != 1) ? (UCSR0A & (1 << RXC0)) : (UCSR1A & (1 << RXC1));
 2e4:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
		case Release:
			if(USART_HasReceived(0))
 2e8:	88 23       	and	r24, r24
 2ea:	c4 f4       	brge	.+48     	; 0x31c <Belt_Tick+0x50>
 2ec:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
 2f0:	80 78       	andi	r24, 0x80	; 128
			{
				temp = USART_HasReceived(0);
 2f2:	80 93 4d 07 	sts	0x074D, r24	; 0x80074d <temp>
				if(temp == 0)
 2f6:	81 11       	cpse	r24, r1
 2f8:	03 c0       	rjmp	.+6      	; 0x300 <Belt_Tick+0x34>
				belt_state = Connect;
 2fa:	82 e0       	ldi	r24, 0x02	; 2
 2fc:	80 93 4e 07 	sts	0x074E, r24	; 0x80074e <belt_state>
				USART_Flush(0);
 300:	80 e0       	ldi	r24, 0x00	; 0
 302:	c3 cf       	rjmp	.-122    	; 0x28a <USART_Flush>
 304:	08 95       	ret
 306:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
			}
			break;
		case Connect:
			if(USART_HasReceived(0))
 30a:	88 23       	and	r24, r24
 30c:	3c f4       	brge	.+14     	; 0x31c <Belt_Tick+0x50>
 30e:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
 312:	80 78       	andi	r24, 0x80	; 128
			{
				temp = USART_HasReceived(0);
 314:	80 93 4d 07 	sts	0x074D, r24	; 0x80074d <temp>
				if(temp == 1)
				belt_state = Release;
				USART_Flush(0);
 318:	80 e0       	ldi	r24, 0x00	; 0
 31a:	b7 cf       	rjmp	.-146    	; 0x28a <USART_Flush>
 31c:	08 95       	ret

0000031e <BeltSecTask>:
enum BeltState {INIT, Release, Connect} belt_state;

unsigned char temp;

void Belt_Init(){
	belt_state = INIT;
 31e:	10 92 4e 07 	sts	0x074E, r1	; 0x80074e <belt_state>
void BeltSecTask()
{
	Belt_Init();
   for(;;) 
   { 	
	Belt_Tick();
 322:	d4 df       	rcall	.-88     	; 0x2cc <Belt_Tick>
	vTaskDelay(100); 
 324:	84 e6       	ldi	r24, 0x64	; 100
 326:	90 e0       	ldi	r25, 0x00	; 0
 328:	1f d4       	rcall	.+2110   	; 0xb68 <vTaskDelay>
   } 
 32a:	fb cf       	rjmp	.-10     	; 0x322 <BeltSecTask+0x4>

0000032c <StartSecPulse>:
}

void StartSecPulse(unsigned portBASE_TYPE Priority)
{
 32c:	af 92       	push	r10
 32e:	bf 92       	push	r11
 330:	cf 92       	push	r12
 332:	df 92       	push	r13
 334:	ef 92       	push	r14
 336:	ff 92       	push	r15
 338:	0f 93       	push	r16
	xTaskCreate(BeltSecTask, (signed portCHAR *)"BeltSecTask", configMINIMAL_STACK_SIZE, NULL, Priority, NULL );
 33a:	a1 2c       	mov	r10, r1
 33c:	b1 2c       	mov	r11, r1
 33e:	c1 2c       	mov	r12, r1
 340:	d1 2c       	mov	r13, r1
 342:	e1 2c       	mov	r14, r1
 344:	f1 2c       	mov	r15, r1
 346:	08 2f       	mov	r16, r24
 348:	20 e0       	ldi	r18, 0x00	; 0
 34a:	30 e0       	ldi	r19, 0x00	; 0
 34c:	45 e5       	ldi	r20, 0x55	; 85
 34e:	50 e0       	ldi	r21, 0x00	; 0
 350:	62 e0       	ldi	r22, 0x02	; 2
 352:	71 e0       	ldi	r23, 0x01	; 1
 354:	8f e8       	ldi	r24, 0x8F	; 143
 356:	91 e0       	ldi	r25, 0x01	; 1
 358:	a3 d1       	rcall	.+838    	; 0x6a0 <xTaskGenericCreate>
}	
 35a:	0f 91       	pop	r16
 35c:	ff 90       	pop	r15
 35e:	ef 90       	pop	r14
 360:	df 90       	pop	r13
 362:	cf 90       	pop	r12
 364:	bf 90       	pop	r11
 366:	af 90       	pop	r10
 368:	08 95       	ret

0000036a <main>:
 
int main(void) 
{ 
   DDRB = 0xFF; PORTB=0x00;
 36a:	8f ef       	ldi	r24, 0xFF	; 255
 36c:	84 b9       	out	0x04, r24	; 4
 36e:	15 b8       	out	0x05, r1	; 5
   DDRD = 0x00; PORTD = 0xFF;
 370:	1a b8       	out	0x0a, r1	; 10
 372:	8b b9       	out	0x0b, r24	; 11
   initUSART(0);
 374:	80 e0       	ldi	r24, 0x00	; 0
 376:	67 df       	rcall	.-306    	; 0x246 <initUSART>
   //Start Tasks  
   StartSecPulse(1);
 378:	81 e0       	ldi	r24, 0x01	; 1
 37a:	d8 df       	rcall	.-80     	; 0x32c <StartSecPulse>
    //RunSchedular 
   vTaskStartScheduler(); 
 37c:	84 d2       	rcall	.+1288   	; 0x886 <vTaskStartScheduler>
 
   return 0; 
 37e:	80 e0       	ldi	r24, 0x00	; 0
 380:	90 e0       	ldi	r25, 0x00	; 0
 382:	08 95       	ret

00000384 <pxPortInitialiseStack>:
	return pdTRUE;
}
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
 384:	31 e1       	ldi	r19, 0x11	; 17
 386:	fc 01       	movw	r30, r24
 388:	30 83       	st	Z, r19
 38a:	31 97       	sbiw	r30, 0x01	; 1
 38c:	22 e2       	ldi	r18, 0x22	; 34
 38e:	20 83       	st	Z, r18
 390:	31 97       	sbiw	r30, 0x01	; 1
 392:	a3 e3       	ldi	r26, 0x33	; 51
 394:	a0 83       	st	Z, r26
 396:	31 97       	sbiw	r30, 0x01	; 1
 398:	60 83       	st	Z, r22
 39a:	31 97       	sbiw	r30, 0x01	; 1
 39c:	70 83       	st	Z, r23
 39e:	31 97       	sbiw	r30, 0x01	; 1
 3a0:	10 82       	st	Z, r1
 3a2:	31 97       	sbiw	r30, 0x01	; 1
 3a4:	60 e8       	ldi	r22, 0x80	; 128
 3a6:	60 83       	st	Z, r22
 3a8:	31 97       	sbiw	r30, 0x01	; 1
 3aa:	10 82       	st	Z, r1
 3ac:	31 97       	sbiw	r30, 0x01	; 1
 3ae:	62 e0       	ldi	r22, 0x02	; 2
 3b0:	60 83       	st	Z, r22
 3b2:	31 97       	sbiw	r30, 0x01	; 1
 3b4:	63 e0       	ldi	r22, 0x03	; 3
 3b6:	60 83       	st	Z, r22
 3b8:	31 97       	sbiw	r30, 0x01	; 1
 3ba:	64 e0       	ldi	r22, 0x04	; 4
 3bc:	60 83       	st	Z, r22
 3be:	31 97       	sbiw	r30, 0x01	; 1
 3c0:	65 e0       	ldi	r22, 0x05	; 5
 3c2:	60 83       	st	Z, r22
 3c4:	31 97       	sbiw	r30, 0x01	; 1
 3c6:	66 e0       	ldi	r22, 0x06	; 6
 3c8:	60 83       	st	Z, r22
 3ca:	31 97       	sbiw	r30, 0x01	; 1
 3cc:	67 e0       	ldi	r22, 0x07	; 7
 3ce:	60 83       	st	Z, r22
 3d0:	31 97       	sbiw	r30, 0x01	; 1
 3d2:	68 e0       	ldi	r22, 0x08	; 8
 3d4:	60 83       	st	Z, r22
 3d6:	31 97       	sbiw	r30, 0x01	; 1
 3d8:	69 e0       	ldi	r22, 0x09	; 9
 3da:	60 83       	st	Z, r22
 3dc:	31 97       	sbiw	r30, 0x01	; 1
 3de:	60 e1       	ldi	r22, 0x10	; 16
 3e0:	60 83       	st	Z, r22
 3e2:	31 97       	sbiw	r30, 0x01	; 1
 3e4:	30 83       	st	Z, r19
 3e6:	31 97       	sbiw	r30, 0x01	; 1
 3e8:	32 e1       	ldi	r19, 0x12	; 18
 3ea:	30 83       	st	Z, r19
 3ec:	31 97       	sbiw	r30, 0x01	; 1
 3ee:	33 e1       	ldi	r19, 0x13	; 19
 3f0:	30 83       	st	Z, r19
 3f2:	31 97       	sbiw	r30, 0x01	; 1
 3f4:	34 e1       	ldi	r19, 0x14	; 20
 3f6:	30 83       	st	Z, r19
 3f8:	31 97       	sbiw	r30, 0x01	; 1
 3fa:	35 e1       	ldi	r19, 0x15	; 21
 3fc:	30 83       	st	Z, r19
 3fe:	31 97       	sbiw	r30, 0x01	; 1
 400:	36 e1       	ldi	r19, 0x16	; 22
 402:	30 83       	st	Z, r19
 404:	31 97       	sbiw	r30, 0x01	; 1
 406:	37 e1       	ldi	r19, 0x17	; 23
 408:	30 83       	st	Z, r19
 40a:	31 97       	sbiw	r30, 0x01	; 1
 40c:	38 e1       	ldi	r19, 0x18	; 24
 40e:	30 83       	st	Z, r19
 410:	31 97       	sbiw	r30, 0x01	; 1
 412:	39 e1       	ldi	r19, 0x19	; 25
 414:	30 83       	st	Z, r19
 416:	31 97       	sbiw	r30, 0x01	; 1
 418:	30 e2       	ldi	r19, 0x20	; 32
 41a:	30 83       	st	Z, r19
 41c:	31 97       	sbiw	r30, 0x01	; 1
 41e:	31 e2       	ldi	r19, 0x21	; 33
 420:	30 83       	st	Z, r19
 422:	31 97       	sbiw	r30, 0x01	; 1
 424:	20 83       	st	Z, r18
 426:	31 97       	sbiw	r30, 0x01	; 1
 428:	23 e2       	ldi	r18, 0x23	; 35
 42a:	20 83       	st	Z, r18
 42c:	31 97       	sbiw	r30, 0x01	; 1
 42e:	40 83       	st	Z, r20
 430:	31 97       	sbiw	r30, 0x01	; 1
 432:	50 83       	st	Z, r21
 434:	31 97       	sbiw	r30, 0x01	; 1
 436:	26 e2       	ldi	r18, 0x26	; 38
 438:	20 83       	st	Z, r18
 43a:	31 97       	sbiw	r30, 0x01	; 1
 43c:	27 e2       	ldi	r18, 0x27	; 39
 43e:	20 83       	st	Z, r18
 440:	31 97       	sbiw	r30, 0x01	; 1
 442:	28 e2       	ldi	r18, 0x28	; 40
 444:	20 83       	st	Z, r18
 446:	31 97       	sbiw	r30, 0x01	; 1
 448:	29 e2       	ldi	r18, 0x29	; 41
 44a:	20 83       	st	Z, r18
 44c:	31 97       	sbiw	r30, 0x01	; 1
 44e:	20 e3       	ldi	r18, 0x30	; 48
 450:	20 83       	st	Z, r18
 452:	31 97       	sbiw	r30, 0x01	; 1
 454:	21 e3       	ldi	r18, 0x31	; 49
 456:	20 83       	st	Z, r18
 458:	86 97       	sbiw	r24, 0x26	; 38
 45a:	08 95       	ret

0000045c <xPortStartScheduler>:
 45c:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 460:	8c e7       	ldi	r24, 0x7C	; 124
 462:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 466:	8b e0       	ldi	r24, 0x0B	; 11
 468:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 46c:	ef e6       	ldi	r30, 0x6F	; 111
 46e:	f0 e0       	ldi	r31, 0x00	; 0
 470:	80 81       	ld	r24, Z
 472:	82 60       	ori	r24, 0x02	; 2
 474:	80 83       	st	Z, r24
 476:	a0 91 4b 07 	lds	r26, 0x074B	; 0x80074b <pxCurrentTCB>
 47a:	b0 91 4c 07 	lds	r27, 0x074C	; 0x80074c <pxCurrentTCB+0x1>
 47e:	cd 91       	ld	r28, X+
 480:	cd bf       	out	0x3d, r28	; 61
 482:	dd 91       	ld	r29, X+
 484:	de bf       	out	0x3e, r29	; 62
 486:	ff 91       	pop	r31
 488:	ef 91       	pop	r30
 48a:	df 91       	pop	r29
 48c:	cf 91       	pop	r28
 48e:	bf 91       	pop	r27
 490:	af 91       	pop	r26
 492:	9f 91       	pop	r25
 494:	8f 91       	pop	r24
 496:	7f 91       	pop	r23
 498:	6f 91       	pop	r22
 49a:	5f 91       	pop	r21
 49c:	4f 91       	pop	r20
 49e:	3f 91       	pop	r19
 4a0:	2f 91       	pop	r18
 4a2:	1f 91       	pop	r17
 4a4:	0f 91       	pop	r16
 4a6:	ff 90       	pop	r15
 4a8:	ef 90       	pop	r14
 4aa:	df 90       	pop	r13
 4ac:	cf 90       	pop	r12
 4ae:	bf 90       	pop	r11
 4b0:	af 90       	pop	r10
 4b2:	9f 90       	pop	r9
 4b4:	8f 90       	pop	r8
 4b6:	7f 90       	pop	r7
 4b8:	6f 90       	pop	r6
 4ba:	5f 90       	pop	r5
 4bc:	4f 90       	pop	r4
 4be:	3f 90       	pop	r3
 4c0:	2f 90       	pop	r2
 4c2:	1f 90       	pop	r1
 4c4:	0f 90       	pop	r0
 4c6:	0f be       	out	0x3f, r0	; 63
 4c8:	0f 90       	pop	r0
 4ca:	08 95       	ret
 4cc:	81 e0       	ldi	r24, 0x01	; 1
 4ce:	08 95       	ret

000004d0 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
 4d0:	0f 92       	push	r0
 4d2:	0f b6       	in	r0, 0x3f	; 63
 4d4:	f8 94       	cli
 4d6:	0f 92       	push	r0
 4d8:	1f 92       	push	r1
 4da:	11 24       	eor	r1, r1
 4dc:	2f 92       	push	r2
 4de:	3f 92       	push	r3
 4e0:	4f 92       	push	r4
 4e2:	5f 92       	push	r5
 4e4:	6f 92       	push	r6
 4e6:	7f 92       	push	r7
 4e8:	8f 92       	push	r8
 4ea:	9f 92       	push	r9
 4ec:	af 92       	push	r10
 4ee:	bf 92       	push	r11
 4f0:	cf 92       	push	r12
 4f2:	df 92       	push	r13
 4f4:	ef 92       	push	r14
 4f6:	ff 92       	push	r15
 4f8:	0f 93       	push	r16
 4fa:	1f 93       	push	r17
 4fc:	2f 93       	push	r18
 4fe:	3f 93       	push	r19
 500:	4f 93       	push	r20
 502:	5f 93       	push	r21
 504:	6f 93       	push	r22
 506:	7f 93       	push	r23
 508:	8f 93       	push	r24
 50a:	9f 93       	push	r25
 50c:	af 93       	push	r26
 50e:	bf 93       	push	r27
 510:	cf 93       	push	r28
 512:	df 93       	push	r29
 514:	ef 93       	push	r30
 516:	ff 93       	push	r31
 518:	a0 91 4b 07 	lds	r26, 0x074B	; 0x80074b <pxCurrentTCB>
 51c:	b0 91 4c 07 	lds	r27, 0x074C	; 0x80074c <pxCurrentTCB+0x1>
 520:	0d b6       	in	r0, 0x3d	; 61
 522:	0d 92       	st	X+, r0
 524:	0e b6       	in	r0, 0x3e	; 62
 526:	0d 92       	st	X+, r0
	vTaskSwitchContext();
 528:	70 d3       	rcall	.+1760   	; 0xc0a <vTaskSwitchContext>
	portRESTORE_CONTEXT();
 52a:	a0 91 4b 07 	lds	r26, 0x074B	; 0x80074b <pxCurrentTCB>
 52e:	b0 91 4c 07 	lds	r27, 0x074C	; 0x80074c <pxCurrentTCB+0x1>
 532:	cd 91       	ld	r28, X+
 534:	cd bf       	out	0x3d, r28	; 61
 536:	dd 91       	ld	r29, X+
 538:	de bf       	out	0x3e, r29	; 62
 53a:	ff 91       	pop	r31
 53c:	ef 91       	pop	r30
 53e:	df 91       	pop	r29
 540:	cf 91       	pop	r28
 542:	bf 91       	pop	r27
 544:	af 91       	pop	r26
 546:	9f 91       	pop	r25
 548:	8f 91       	pop	r24
 54a:	7f 91       	pop	r23
 54c:	6f 91       	pop	r22
 54e:	5f 91       	pop	r21
 550:	4f 91       	pop	r20
 552:	3f 91       	pop	r19
 554:	2f 91       	pop	r18
 556:	1f 91       	pop	r17
 558:	0f 91       	pop	r16
 55a:	ff 90       	pop	r15
 55c:	ef 90       	pop	r14
 55e:	df 90       	pop	r13
 560:	cf 90       	pop	r12
 562:	bf 90       	pop	r11
 564:	af 90       	pop	r10
 566:	9f 90       	pop	r9
 568:	8f 90       	pop	r8
 56a:	7f 90       	pop	r7
 56c:	6f 90       	pop	r6
 56e:	5f 90       	pop	r5
 570:	4f 90       	pop	r4
 572:	3f 90       	pop	r3
 574:	2f 90       	pop	r2
 576:	1f 90       	pop	r1
 578:	0f 90       	pop	r0
 57a:	0f be       	out	0x3f, r0	; 63
 57c:	0f 90       	pop	r0

	asm volatile ( "ret" );
 57e:	08 95       	ret

00000580 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
 580:	0f 92       	push	r0
 582:	0f b6       	in	r0, 0x3f	; 63
 584:	f8 94       	cli
 586:	0f 92       	push	r0
 588:	1f 92       	push	r1
 58a:	11 24       	eor	r1, r1
 58c:	2f 92       	push	r2
 58e:	3f 92       	push	r3
 590:	4f 92       	push	r4
 592:	5f 92       	push	r5
 594:	6f 92       	push	r6
 596:	7f 92       	push	r7
 598:	8f 92       	push	r8
 59a:	9f 92       	push	r9
 59c:	af 92       	push	r10
 59e:	bf 92       	push	r11
 5a0:	cf 92       	push	r12
 5a2:	df 92       	push	r13
 5a4:	ef 92       	push	r14
 5a6:	ff 92       	push	r15
 5a8:	0f 93       	push	r16
 5aa:	1f 93       	push	r17
 5ac:	2f 93       	push	r18
 5ae:	3f 93       	push	r19
 5b0:	4f 93       	push	r20
 5b2:	5f 93       	push	r21
 5b4:	6f 93       	push	r22
 5b6:	7f 93       	push	r23
 5b8:	8f 93       	push	r24
 5ba:	9f 93       	push	r25
 5bc:	af 93       	push	r26
 5be:	bf 93       	push	r27
 5c0:	cf 93       	push	r28
 5c2:	df 93       	push	r29
 5c4:	ef 93       	push	r30
 5c6:	ff 93       	push	r31
 5c8:	a0 91 4b 07 	lds	r26, 0x074B	; 0x80074b <pxCurrentTCB>
 5cc:	b0 91 4c 07 	lds	r27, 0x074C	; 0x80074c <pxCurrentTCB+0x1>
 5d0:	0d b6       	in	r0, 0x3d	; 61
 5d2:	0d 92       	st	X+, r0
 5d4:	0e b6       	in	r0, 0x3e	; 62
 5d6:	0d 92       	st	X+, r0
	vTaskIncrementTick();
 5d8:	85 d1       	rcall	.+778    	; 0x8e4 <vTaskIncrementTick>
	vTaskSwitchContext();
 5da:	17 d3       	rcall	.+1582   	; 0xc0a <vTaskSwitchContext>
	portRESTORE_CONTEXT();
 5dc:	a0 91 4b 07 	lds	r26, 0x074B	; 0x80074b <pxCurrentTCB>
 5e0:	b0 91 4c 07 	lds	r27, 0x074C	; 0x80074c <pxCurrentTCB+0x1>
 5e4:	cd 91       	ld	r28, X+
 5e6:	cd bf       	out	0x3d, r28	; 61
 5e8:	dd 91       	ld	r29, X+
 5ea:	de bf       	out	0x3e, r29	; 62
 5ec:	ff 91       	pop	r31
 5ee:	ef 91       	pop	r30
 5f0:	df 91       	pop	r29
 5f2:	cf 91       	pop	r28
 5f4:	bf 91       	pop	r27
 5f6:	af 91       	pop	r26
 5f8:	9f 91       	pop	r25
 5fa:	8f 91       	pop	r24
 5fc:	7f 91       	pop	r23
 5fe:	6f 91       	pop	r22
 600:	5f 91       	pop	r21
 602:	4f 91       	pop	r20
 604:	3f 91       	pop	r19
 606:	2f 91       	pop	r18
 608:	1f 91       	pop	r17
 60a:	0f 91       	pop	r16
 60c:	ff 90       	pop	r15
 60e:	ef 90       	pop	r14
 610:	df 90       	pop	r13
 612:	cf 90       	pop	r12
 614:	bf 90       	pop	r11
 616:	af 90       	pop	r10
 618:	9f 90       	pop	r9
 61a:	8f 90       	pop	r8
 61c:	7f 90       	pop	r7
 61e:	6f 90       	pop	r6
 620:	5f 90       	pop	r5
 622:	4f 90       	pop	r4
 624:	3f 90       	pop	r3
 626:	2f 90       	pop	r2
 628:	1f 90       	pop	r1
 62a:	0f 90       	pop	r0
 62c:	0f be       	out	0x3f, r0	; 63
 62e:	0f 90       	pop	r0

	asm volatile ( "ret" );
 630:	08 95       	ret

00000632 <__vector_13>:
	 * count is incremented after the context is saved.
	 */
	void TIMER1_COMPA_vect( void ) __attribute__ ( ( signal, naked ) );
	void TIMER1_COMPA_vect( void )
	{
		vPortYieldFromTick();
 632:	a6 df       	rcall	.-180    	; 0x580 <vPortYieldFromTick>
		asm volatile ( "reti" );
 634:	18 95       	reti

00000636 <prvAddCurrentTaskToDelayedList>:
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
		{
			portYIELD_WITHIN_API();
		}
	}
 636:	cf 93       	push	r28
 638:	df 93       	push	r29
 63a:	ec 01       	movw	r28, r24
 63c:	e0 91 4b 07 	lds	r30, 0x074B	; 0x80074b <pxCurrentTCB>
 640:	f0 91 4c 07 	lds	r31, 0x074C	; 0x80074c <pxCurrentTCB+0x1>
 644:	93 83       	std	Z+3, r25	; 0x03
 646:	82 83       	std	Z+2, r24	; 0x02
 648:	80 91 fb 06 	lds	r24, 0x06FB	; 0x8006fb <xTickCount>
 64c:	90 91 fc 06 	lds	r25, 0x06FC	; 0x8006fc <xTickCount+0x1>
 650:	c8 17       	cp	r28, r24
 652:	d9 07       	cpc	r29, r25
 654:	60 f4       	brcc	.+24     	; 0x66e <prvAddCurrentTaskToDelayedList+0x38>
 656:	60 91 4b 07 	lds	r22, 0x074B	; 0x80074b <pxCurrentTCB>
 65a:	70 91 4c 07 	lds	r23, 0x074C	; 0x80074c <pxCurrentTCB+0x1>
 65e:	80 91 11 07 	lds	r24, 0x0711	; 0x800711 <pxOverflowDelayedTaskList>
 662:	90 91 12 07 	lds	r25, 0x0712	; 0x800712 <pxOverflowDelayedTaskList+0x1>
 666:	6e 5f       	subi	r22, 0xFE	; 254
 668:	7f 4f       	sbci	r23, 0xFF	; 255
 66a:	8c dd       	rcall	.-1256   	; 0x184 <vListInsert>
 66c:	16 c0       	rjmp	.+44     	; 0x69a <prvAddCurrentTaskToDelayedList+0x64>
 66e:	60 91 4b 07 	lds	r22, 0x074B	; 0x80074b <pxCurrentTCB>
 672:	70 91 4c 07 	lds	r23, 0x074C	; 0x80074c <pxCurrentTCB+0x1>
 676:	80 91 13 07 	lds	r24, 0x0713	; 0x800713 <pxDelayedTaskList>
 67a:	90 91 14 07 	lds	r25, 0x0714	; 0x800714 <pxDelayedTaskList+0x1>
 67e:	6e 5f       	subi	r22, 0xFE	; 254
 680:	7f 4f       	sbci	r23, 0xFF	; 255
 682:	80 dd       	rcall	.-1280   	; 0x184 <vListInsert>
 684:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 688:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 68c:	c8 17       	cp	r28, r24
 68e:	d9 07       	cpc	r29, r25
 690:	20 f4       	brcc	.+8      	; 0x69a <prvAddCurrentTaskToDelayedList+0x64>
 692:	d0 93 01 01 	sts	0x0101, r29	; 0x800101 <__data_start+0x1>
 696:	c0 93 00 01 	sts	0x0100, r28	; 0x800100 <__data_start>
 69a:	df 91       	pop	r29
 69c:	cf 91       	pop	r28
 69e:	08 95       	ret

000006a0 <xTaskGenericCreate>:
 6a0:	4f 92       	push	r4
 6a2:	5f 92       	push	r5
 6a4:	6f 92       	push	r6
 6a6:	7f 92       	push	r7
 6a8:	8f 92       	push	r8
 6aa:	9f 92       	push	r9
 6ac:	af 92       	push	r10
 6ae:	bf 92       	push	r11
 6b0:	cf 92       	push	r12
 6b2:	df 92       	push	r13
 6b4:	ef 92       	push	r14
 6b6:	ff 92       	push	r15
 6b8:	0f 93       	push	r16
 6ba:	1f 93       	push	r17
 6bc:	cf 93       	push	r28
 6be:	df 93       	push	r29
 6c0:	5c 01       	movw	r10, r24
 6c2:	4b 01       	movw	r8, r22
 6c4:	3a 01       	movw	r6, r20
 6c6:	29 01       	movw	r4, r18
 6c8:	81 e2       	ldi	r24, 0x21	; 33
 6ca:	90 e0       	ldi	r25, 0x00	; 0
 6cc:	fd dc       	rcall	.-1542   	; 0xc8 <pvPortMalloc>
 6ce:	ec 01       	movw	r28, r24
 6d0:	89 2b       	or	r24, r25
 6d2:	09 f4       	brne	.+2      	; 0x6d6 <xTaskGenericCreate+0x36>
 6d4:	c6 c0       	rjmp	.+396    	; 0x862 <xTaskGenericCreate+0x1c2>
 6d6:	c1 14       	cp	r12, r1
 6d8:	d1 04       	cpc	r13, r1
 6da:	09 f0       	breq	.+2      	; 0x6de <xTaskGenericCreate+0x3e>
 6dc:	be c0       	rjmp	.+380    	; 0x85a <xTaskGenericCreate+0x1ba>
 6de:	c3 01       	movw	r24, r6
 6e0:	f3 dc       	rcall	.-1562   	; 0xc8 <pvPortMalloc>
 6e2:	98 8f       	std	Y+24, r25	; 0x18
 6e4:	8f 8b       	std	Y+23, r24	; 0x17
 6e6:	00 97       	sbiw	r24, 0x00	; 0
 6e8:	19 f4       	brne	.+6      	; 0x6f0 <xTaskGenericCreate+0x50>
 6ea:	ce 01       	movw	r24, r28
 6ec:	11 dd       	rcall	.-1502   	; 0x110 <vPortFree>
 6ee:	b9 c0       	rjmp	.+370    	; 0x862 <xTaskGenericCreate+0x1c2>
 6f0:	a3 01       	movw	r20, r6
 6f2:	65 ea       	ldi	r22, 0xA5	; 165
 6f4:	70 e0       	ldi	r23, 0x00	; 0
 6f6:	f5 d2       	rcall	.+1514   	; 0xce2 <memset>
 6f8:	93 01       	movw	r18, r6
 6fa:	21 50       	subi	r18, 0x01	; 1
 6fc:	31 09       	sbc	r19, r1
 6fe:	8f 89       	ldd	r24, Y+23	; 0x17
 700:	98 8d       	ldd	r25, Y+24	; 0x18
 702:	3c 01       	movw	r6, r24
 704:	62 0e       	add	r6, r18
 706:	73 1e       	adc	r7, r19
 708:	48 e0       	ldi	r20, 0x08	; 8
 70a:	50 e0       	ldi	r21, 0x00	; 0
 70c:	b4 01       	movw	r22, r8
 70e:	ce 01       	movw	r24, r28
 710:	49 96       	adiw	r24, 0x19	; 25
 712:	ee d2       	rcall	.+1500   	; 0xcf0 <strncpy>
 714:	18 a2       	std	Y+32, r1	; 0x20
 716:	10 2f       	mov	r17, r16
 718:	04 30       	cpi	r16, 0x04	; 4
 71a:	08 f0       	brcs	.+2      	; 0x71e <xTaskGenericCreate+0x7e>
 71c:	13 e0       	ldi	r17, 0x03	; 3
 71e:	1e 8b       	std	Y+22, r17	; 0x16
 720:	6e 01       	movw	r12, r28
 722:	82 e0       	ldi	r24, 0x02	; 2
 724:	c8 0e       	add	r12, r24
 726:	d1 1c       	adc	r13, r1
 728:	c6 01       	movw	r24, r12
 72a:	01 dd       	rcall	.-1534   	; 0x12e <vListInitialiseItem>
 72c:	ce 01       	movw	r24, r28
 72e:	0c 96       	adiw	r24, 0x0c	; 12
 730:	fe dc       	rcall	.-1540   	; 0x12e <vListInitialiseItem>
 732:	d9 87       	std	Y+9, r29	; 0x09
 734:	c8 87       	std	Y+8, r28	; 0x08
 736:	84 e0       	ldi	r24, 0x04	; 4
 738:	90 e0       	ldi	r25, 0x00	; 0
 73a:	81 1b       	sub	r24, r17
 73c:	91 09       	sbc	r25, r1
 73e:	9d 87       	std	Y+13, r25	; 0x0d
 740:	8c 87       	std	Y+12, r24	; 0x0c
 742:	db 8b       	std	Y+19, r29	; 0x13
 744:	ca 8b       	std	Y+18, r28	; 0x12
 746:	a2 01       	movw	r20, r4
 748:	b5 01       	movw	r22, r10
 74a:	c3 01       	movw	r24, r6
 74c:	1b de       	rcall	.-970    	; 0x384 <pxPortInitialiseStack>
 74e:	99 83       	std	Y+1, r25	; 0x01
 750:	88 83       	st	Y, r24
 752:	e1 14       	cp	r14, r1
 754:	f1 04       	cpc	r15, r1
 756:	19 f0       	breq	.+6      	; 0x75e <xTaskGenericCreate+0xbe>
 758:	f7 01       	movw	r30, r14
 75a:	d1 83       	std	Z+1, r29	; 0x01
 75c:	c0 83       	st	Z, r28
 75e:	0f b6       	in	r0, 0x3f	; 63
 760:	f8 94       	cli
 762:	0f 92       	push	r0
 764:	80 91 fd 06 	lds	r24, 0x06FD	; 0x8006fd <uxCurrentNumberOfTasks>
 768:	8f 5f       	subi	r24, 0xFF	; 255
 76a:	80 93 fd 06 	sts	0x06FD, r24	; 0x8006fd <uxCurrentNumberOfTasks>
 76e:	80 91 4b 07 	lds	r24, 0x074B	; 0x80074b <pxCurrentTCB>
 772:	90 91 4c 07 	lds	r25, 0x074C	; 0x80074c <pxCurrentTCB+0x1>
 776:	89 2b       	or	r24, r25
 778:	69 f5       	brne	.+90     	; 0x7d4 <xTaskGenericCreate+0x134>
 77a:	d0 93 4c 07 	sts	0x074C, r29	; 0x80074c <pxCurrentTCB+0x1>
 77e:	c0 93 4b 07 	sts	0x074B, r28	; 0x80074b <pxCurrentTCB>
 782:	80 91 fd 06 	lds	r24, 0x06FD	; 0x8006fd <uxCurrentNumberOfTasks>
 786:	81 30       	cpi	r24, 0x01	; 1
 788:	a1 f5       	brne	.+104    	; 0x7f2 <xTaskGenericCreate+0x152>
 78a:	87 e2       	ldi	r24, 0x27	; 39
 78c:	97 e0       	ldi	r25, 0x07	; 7
 78e:	c1 dc       	rcall	.-1662   	; 0x112 <vListInitialise>
 790:	80 e3       	ldi	r24, 0x30	; 48
 792:	97 e0       	ldi	r25, 0x07	; 7
 794:	be dc       	rcall	.-1668   	; 0x112 <vListInitialise>
 796:	89 e3       	ldi	r24, 0x39	; 57
 798:	97 e0       	ldi	r25, 0x07	; 7
 79a:	bb dc       	rcall	.-1674   	; 0x112 <vListInitialise>
 79c:	82 e4       	ldi	r24, 0x42	; 66
 79e:	97 e0       	ldi	r25, 0x07	; 7
 7a0:	b8 dc       	rcall	.-1680   	; 0x112 <vListInitialise>
 7a2:	8e e1       	ldi	r24, 0x1E	; 30
 7a4:	97 e0       	ldi	r25, 0x07	; 7
 7a6:	b5 dc       	rcall	.-1686   	; 0x112 <vListInitialise>
 7a8:	85 e1       	ldi	r24, 0x15	; 21
 7aa:	97 e0       	ldi	r25, 0x07	; 7
 7ac:	b2 dc       	rcall	.-1692   	; 0x112 <vListInitialise>
 7ae:	88 e0       	ldi	r24, 0x08	; 8
 7b0:	97 e0       	ldi	r25, 0x07	; 7
 7b2:	af dc       	rcall	.-1698   	; 0x112 <vListInitialise>
 7b4:	8f ef       	ldi	r24, 0xFF	; 255
 7b6:	96 e0       	ldi	r25, 0x06	; 6
 7b8:	ac dc       	rcall	.-1704   	; 0x112 <vListInitialise>
 7ba:	8e e1       	ldi	r24, 0x1E	; 30
 7bc:	97 e0       	ldi	r25, 0x07	; 7
 7be:	90 93 14 07 	sts	0x0714, r25	; 0x800714 <pxDelayedTaskList+0x1>
 7c2:	80 93 13 07 	sts	0x0713, r24	; 0x800713 <pxDelayedTaskList>
 7c6:	85 e1       	ldi	r24, 0x15	; 21
 7c8:	97 e0       	ldi	r25, 0x07	; 7
 7ca:	90 93 12 07 	sts	0x0712, r25	; 0x800712 <pxOverflowDelayedTaskList+0x1>
 7ce:	80 93 11 07 	sts	0x0711, r24	; 0x800711 <pxOverflowDelayedTaskList>
 7d2:	0f c0       	rjmp	.+30     	; 0x7f2 <xTaskGenericCreate+0x152>
 7d4:	80 91 f8 06 	lds	r24, 0x06F8	; 0x8006f8 <xSchedulerRunning>
 7d8:	81 11       	cpse	r24, r1
 7da:	0b c0       	rjmp	.+22     	; 0x7f2 <xTaskGenericCreate+0x152>
 7dc:	e0 91 4b 07 	lds	r30, 0x074B	; 0x80074b <pxCurrentTCB>
 7e0:	f0 91 4c 07 	lds	r31, 0x074C	; 0x80074c <pxCurrentTCB+0x1>
 7e4:	86 89       	ldd	r24, Z+22	; 0x16
 7e6:	08 17       	cp	r16, r24
 7e8:	20 f0       	brcs	.+8      	; 0x7f2 <xTaskGenericCreate+0x152>
 7ea:	d0 93 4c 07 	sts	0x074C, r29	; 0x80074c <pxCurrentTCB+0x1>
 7ee:	c0 93 4b 07 	sts	0x074B, r28	; 0x80074b <pxCurrentTCB>
 7f2:	8e 89       	ldd	r24, Y+22	; 0x16
 7f4:	90 91 fa 06 	lds	r25, 0x06FA	; 0x8006fa <uxTopUsedPriority>
 7f8:	98 17       	cp	r25, r24
 7fa:	10 f4       	brcc	.+4      	; 0x800 <xTaskGenericCreate+0x160>
 7fc:	80 93 fa 06 	sts	0x06FA, r24	; 0x8006fa <uxTopUsedPriority>
 800:	90 91 f3 06 	lds	r25, 0x06F3	; 0x8006f3 <uxTaskNumber>
 804:	9f 5f       	subi	r25, 0xFF	; 255
 806:	90 93 f3 06 	sts	0x06F3, r25	; 0x8006f3 <uxTaskNumber>
 80a:	90 91 f9 06 	lds	r25, 0x06F9	; 0x8006f9 <uxTopReadyPriority>
 80e:	98 17       	cp	r25, r24
 810:	10 f4       	brcc	.+4      	; 0x816 <xTaskGenericCreate+0x176>
 812:	80 93 f9 06 	sts	0x06F9, r24	; 0x8006f9 <uxTopReadyPriority>
 816:	90 e0       	ldi	r25, 0x00	; 0
 818:	9c 01       	movw	r18, r24
 81a:	22 0f       	add	r18, r18
 81c:	33 1f       	adc	r19, r19
 81e:	22 0f       	add	r18, r18
 820:	33 1f       	adc	r19, r19
 822:	22 0f       	add	r18, r18
 824:	33 1f       	adc	r19, r19
 826:	82 0f       	add	r24, r18
 828:	93 1f       	adc	r25, r19
 82a:	b6 01       	movw	r22, r12
 82c:	89 5d       	subi	r24, 0xD9	; 217
 82e:	98 4f       	sbci	r25, 0xF8	; 248
 830:	82 dc       	rcall	.-1788   	; 0x136 <vListInsertEnd>
 832:	0f 90       	pop	r0
 834:	0f be       	out	0x3f, r0	; 63
 836:	80 91 f8 06 	lds	r24, 0x06F8	; 0x8006f8 <xSchedulerRunning>
 83a:	88 23       	and	r24, r24
 83c:	51 f0       	breq	.+20     	; 0x852 <xTaskGenericCreate+0x1b2>
 83e:	e0 91 4b 07 	lds	r30, 0x074B	; 0x80074b <pxCurrentTCB>
 842:	f0 91 4c 07 	lds	r31, 0x074C	; 0x80074c <pxCurrentTCB+0x1>
 846:	86 89       	ldd	r24, Z+22	; 0x16
 848:	80 17       	cp	r24, r16
 84a:	28 f4       	brcc	.+10     	; 0x856 <xTaskGenericCreate+0x1b6>
 84c:	41 de       	rcall	.-894    	; 0x4d0 <vPortYield>
 84e:	81 e0       	ldi	r24, 0x01	; 1
 850:	09 c0       	rjmp	.+18     	; 0x864 <xTaskGenericCreate+0x1c4>
 852:	81 e0       	ldi	r24, 0x01	; 1
 854:	07 c0       	rjmp	.+14     	; 0x864 <xTaskGenericCreate+0x1c4>
 856:	81 e0       	ldi	r24, 0x01	; 1
 858:	05 c0       	rjmp	.+10     	; 0x864 <xTaskGenericCreate+0x1c4>
 85a:	d8 8e       	std	Y+24, r13	; 0x18
 85c:	cf 8a       	std	Y+23, r12	; 0x17
 85e:	c6 01       	movw	r24, r12
 860:	47 cf       	rjmp	.-370    	; 0x6f0 <xTaskGenericCreate+0x50>
 862:	8f ef       	ldi	r24, 0xFF	; 255
 864:	df 91       	pop	r29
 866:	cf 91       	pop	r28
 868:	1f 91       	pop	r17
 86a:	0f 91       	pop	r16
 86c:	ff 90       	pop	r15
 86e:	ef 90       	pop	r14
 870:	df 90       	pop	r13
 872:	cf 90       	pop	r12
 874:	bf 90       	pop	r11
 876:	af 90       	pop	r10
 878:	9f 90       	pop	r9
 87a:	8f 90       	pop	r8
 87c:	7f 90       	pop	r7
 87e:	6f 90       	pop	r6
 880:	5f 90       	pop	r5
 882:	4f 90       	pop	r4
 884:	08 95       	ret

00000886 <vTaskStartScheduler>:
 886:	af 92       	push	r10
 888:	bf 92       	push	r11
 88a:	cf 92       	push	r12
 88c:	df 92       	push	r13
 88e:	ef 92       	push	r14
 890:	ff 92       	push	r15
 892:	0f 93       	push	r16
 894:	a1 2c       	mov	r10, r1
 896:	b1 2c       	mov	r11, r1
 898:	c1 2c       	mov	r12, r1
 89a:	d1 2c       	mov	r13, r1
 89c:	e1 2c       	mov	r14, r1
 89e:	f1 2c       	mov	r15, r1
 8a0:	00 e0       	ldi	r16, 0x00	; 0
 8a2:	20 e0       	ldi	r18, 0x00	; 0
 8a4:	30 e0       	ldi	r19, 0x00	; 0
 8a6:	45 e5       	ldi	r20, 0x55	; 85
 8a8:	50 e0       	ldi	r21, 0x00	; 0
 8aa:	6e e0       	ldi	r22, 0x0E	; 14
 8ac:	71 e0       	ldi	r23, 0x01	; 1
 8ae:	8f ec       	ldi	r24, 0xCF	; 207
 8b0:	95 e0       	ldi	r25, 0x05	; 5
 8b2:	f6 de       	rcall	.-532    	; 0x6a0 <xTaskGenericCreate>
 8b4:	81 30       	cpi	r24, 0x01	; 1
 8b6:	41 f4       	brne	.+16     	; 0x8c8 <vTaskStartScheduler+0x42>
 8b8:	f8 94       	cli
 8ba:	80 93 f8 06 	sts	0x06F8, r24	; 0x8006f8 <xSchedulerRunning>
 8be:	10 92 fc 06 	sts	0x06FC, r1	; 0x8006fc <xTickCount+0x1>
 8c2:	10 92 fb 06 	sts	0x06FB, r1	; 0x8006fb <xTickCount>
 8c6:	ca dd       	rcall	.-1132   	; 0x45c <xPortStartScheduler>
 8c8:	0f 91       	pop	r16
 8ca:	ff 90       	pop	r15
 8cc:	ef 90       	pop	r14
 8ce:	df 90       	pop	r13
 8d0:	cf 90       	pop	r12
 8d2:	bf 90       	pop	r11
 8d4:	af 90       	pop	r10
 8d6:	08 95       	ret

000008d8 <vTaskSuspendAll>:
 8d8:	80 91 f7 06 	lds	r24, 0x06F7	; 0x8006f7 <uxSchedulerSuspended>
 8dc:	8f 5f       	subi	r24, 0xFF	; 255
 8de:	80 93 f7 06 	sts	0x06F7, r24	; 0x8006f7 <uxSchedulerSuspended>
 8e2:	08 95       	ret

000008e4 <vTaskIncrementTick>:
 8e4:	0f 93       	push	r16
 8e6:	1f 93       	push	r17
 8e8:	cf 93       	push	r28
 8ea:	df 93       	push	r29
 8ec:	80 91 f7 06 	lds	r24, 0x06F7	; 0x8006f7 <uxSchedulerSuspended>
 8f0:	81 11       	cpse	r24, r1
 8f2:	af c0       	rjmp	.+350    	; 0xa52 <vTaskIncrementTick+0x16e>
 8f4:	80 91 fb 06 	lds	r24, 0x06FB	; 0x8006fb <xTickCount>
 8f8:	90 91 fc 06 	lds	r25, 0x06FC	; 0x8006fc <xTickCount+0x1>
 8fc:	01 96       	adiw	r24, 0x01	; 1
 8fe:	90 93 fc 06 	sts	0x06FC, r25	; 0x8006fc <xTickCount+0x1>
 902:	80 93 fb 06 	sts	0x06FB, r24	; 0x8006fb <xTickCount>
 906:	80 91 fb 06 	lds	r24, 0x06FB	; 0x8006fb <xTickCount>
 90a:	90 91 fc 06 	lds	r25, 0x06FC	; 0x8006fc <xTickCount+0x1>
 90e:	89 2b       	or	r24, r25
 910:	99 f5       	brne	.+102    	; 0x978 <vTaskIncrementTick+0x94>
 912:	80 91 13 07 	lds	r24, 0x0713	; 0x800713 <pxDelayedTaskList>
 916:	90 91 14 07 	lds	r25, 0x0714	; 0x800714 <pxDelayedTaskList+0x1>
 91a:	20 91 11 07 	lds	r18, 0x0711	; 0x800711 <pxOverflowDelayedTaskList>
 91e:	30 91 12 07 	lds	r19, 0x0712	; 0x800712 <pxOverflowDelayedTaskList+0x1>
 922:	30 93 14 07 	sts	0x0714, r19	; 0x800714 <pxDelayedTaskList+0x1>
 926:	20 93 13 07 	sts	0x0713, r18	; 0x800713 <pxDelayedTaskList>
 92a:	90 93 12 07 	sts	0x0712, r25	; 0x800712 <pxOverflowDelayedTaskList+0x1>
 92e:	80 93 11 07 	sts	0x0711, r24	; 0x800711 <pxOverflowDelayedTaskList>
 932:	80 91 f4 06 	lds	r24, 0x06F4	; 0x8006f4 <xNumOfOverflows>
 936:	8f 5f       	subi	r24, 0xFF	; 255
 938:	80 93 f4 06 	sts	0x06F4, r24	; 0x8006f4 <xNumOfOverflows>
 93c:	e0 91 13 07 	lds	r30, 0x0713	; 0x800713 <pxDelayedTaskList>
 940:	f0 91 14 07 	lds	r31, 0x0714	; 0x800714 <pxDelayedTaskList+0x1>
 944:	80 81       	ld	r24, Z
 946:	81 11       	cpse	r24, r1
 948:	07 c0       	rjmp	.+14     	; 0x958 <vTaskIncrementTick+0x74>
 94a:	8f ef       	ldi	r24, 0xFF	; 255
 94c:	9f ef       	ldi	r25, 0xFF	; 255
 94e:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 952:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 956:	10 c0       	rjmp	.+32     	; 0x978 <vTaskIncrementTick+0x94>
 958:	e0 91 13 07 	lds	r30, 0x0713	; 0x800713 <pxDelayedTaskList>
 95c:	f0 91 14 07 	lds	r31, 0x0714	; 0x800714 <pxDelayedTaskList+0x1>
 960:	05 80       	ldd	r0, Z+5	; 0x05
 962:	f6 81       	ldd	r31, Z+6	; 0x06
 964:	e0 2d       	mov	r30, r0
 966:	06 80       	ldd	r0, Z+6	; 0x06
 968:	f7 81       	ldd	r31, Z+7	; 0x07
 96a:	e0 2d       	mov	r30, r0
 96c:	82 81       	ldd	r24, Z+2	; 0x02
 96e:	93 81       	ldd	r25, Z+3	; 0x03
 970:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 974:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 978:	20 91 fb 06 	lds	r18, 0x06FB	; 0x8006fb <xTickCount>
 97c:	30 91 fc 06 	lds	r19, 0x06FC	; 0x8006fc <xTickCount+0x1>
 980:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 984:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 988:	28 17       	cp	r18, r24
 98a:	39 07       	cpc	r19, r25
 98c:	08 f4       	brcc	.+2      	; 0x990 <vTaskIncrementTick+0xac>
 98e:	66 c0       	rjmp	.+204    	; 0xa5c <vTaskIncrementTick+0x178>
 990:	e0 91 13 07 	lds	r30, 0x0713	; 0x800713 <pxDelayedTaskList>
 994:	f0 91 14 07 	lds	r31, 0x0714	; 0x800714 <pxDelayedTaskList+0x1>
 998:	80 81       	ld	r24, Z
 99a:	88 23       	and	r24, r24
 99c:	99 f0       	breq	.+38     	; 0x9c4 <vTaskIncrementTick+0xe0>
 99e:	e0 91 13 07 	lds	r30, 0x0713	; 0x800713 <pxDelayedTaskList>
 9a2:	f0 91 14 07 	lds	r31, 0x0714	; 0x800714 <pxDelayedTaskList+0x1>
 9a6:	05 80       	ldd	r0, Z+5	; 0x05
 9a8:	f6 81       	ldd	r31, Z+6	; 0x06
 9aa:	e0 2d       	mov	r30, r0
 9ac:	c6 81       	ldd	r28, Z+6	; 0x06
 9ae:	d7 81       	ldd	r29, Z+7	; 0x07
 9b0:	8a 81       	ldd	r24, Y+2	; 0x02
 9b2:	9b 81       	ldd	r25, Y+3	; 0x03
 9b4:	20 91 fb 06 	lds	r18, 0x06FB	; 0x8006fb <xTickCount>
 9b8:	30 91 fc 06 	lds	r19, 0x06FC	; 0x8006fc <xTickCount+0x1>
 9bc:	28 17       	cp	r18, r24
 9be:	39 07       	cpc	r19, r25
 9c0:	f8 f4       	brcc	.+62     	; 0xa00 <vTaskIncrementTick+0x11c>
 9c2:	19 c0       	rjmp	.+50     	; 0x9f6 <vTaskIncrementTick+0x112>
 9c4:	8f ef       	ldi	r24, 0xFF	; 255
 9c6:	9f ef       	ldi	r25, 0xFF	; 255
 9c8:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 9cc:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 9d0:	45 c0       	rjmp	.+138    	; 0xa5c <vTaskIncrementTick+0x178>
 9d2:	e0 91 13 07 	lds	r30, 0x0713	; 0x800713 <pxDelayedTaskList>
 9d6:	f0 91 14 07 	lds	r31, 0x0714	; 0x800714 <pxDelayedTaskList+0x1>
 9da:	05 80       	ldd	r0, Z+5	; 0x05
 9dc:	f6 81       	ldd	r31, Z+6	; 0x06
 9de:	e0 2d       	mov	r30, r0
 9e0:	c6 81       	ldd	r28, Z+6	; 0x06
 9e2:	d7 81       	ldd	r29, Z+7	; 0x07
 9e4:	8a 81       	ldd	r24, Y+2	; 0x02
 9e6:	9b 81       	ldd	r25, Y+3	; 0x03
 9e8:	20 91 fb 06 	lds	r18, 0x06FB	; 0x8006fb <xTickCount>
 9ec:	30 91 fc 06 	lds	r19, 0x06FC	; 0x8006fc <xTickCount+0x1>
 9f0:	28 17       	cp	r18, r24
 9f2:	39 07       	cpc	r19, r25
 9f4:	28 f4       	brcc	.+10     	; 0xa00 <vTaskIncrementTick+0x11c>
 9f6:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 9fa:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 9fe:	2e c0       	rjmp	.+92     	; 0xa5c <vTaskIncrementTick+0x178>
 a00:	8e 01       	movw	r16, r28
 a02:	0e 5f       	subi	r16, 0xFE	; 254
 a04:	1f 4f       	sbci	r17, 0xFF	; 255
 a06:	c8 01       	movw	r24, r16
 a08:	f8 db       	rcall	.-2064   	; 0x1fa <vListRemove>
 a0a:	8c 89       	ldd	r24, Y+20	; 0x14
 a0c:	9d 89       	ldd	r25, Y+21	; 0x15
 a0e:	89 2b       	or	r24, r25
 a10:	19 f0       	breq	.+6      	; 0xa18 <vTaskIncrementTick+0x134>
 a12:	ce 01       	movw	r24, r28
 a14:	0c 96       	adiw	r24, 0x0c	; 12
 a16:	f1 db       	rcall	.-2078   	; 0x1fa <vListRemove>
 a18:	2e 89       	ldd	r18, Y+22	; 0x16
 a1a:	80 91 f9 06 	lds	r24, 0x06F9	; 0x8006f9 <uxTopReadyPriority>
 a1e:	82 17       	cp	r24, r18
 a20:	10 f4       	brcc	.+4      	; 0xa26 <vTaskIncrementTick+0x142>
 a22:	20 93 f9 06 	sts	0x06F9, r18	; 0x8006f9 <uxTopReadyPriority>
 a26:	30 e0       	ldi	r19, 0x00	; 0
 a28:	c9 01       	movw	r24, r18
 a2a:	88 0f       	add	r24, r24
 a2c:	99 1f       	adc	r25, r25
 a2e:	88 0f       	add	r24, r24
 a30:	99 1f       	adc	r25, r25
 a32:	88 0f       	add	r24, r24
 a34:	99 1f       	adc	r25, r25
 a36:	82 0f       	add	r24, r18
 a38:	93 1f       	adc	r25, r19
 a3a:	b8 01       	movw	r22, r16
 a3c:	89 5d       	subi	r24, 0xD9	; 217
 a3e:	98 4f       	sbci	r25, 0xF8	; 248
 a40:	7a db       	rcall	.-2316   	; 0x136 <vListInsertEnd>
 a42:	e0 91 13 07 	lds	r30, 0x0713	; 0x800713 <pxDelayedTaskList>
 a46:	f0 91 14 07 	lds	r31, 0x0714	; 0x800714 <pxDelayedTaskList+0x1>
 a4a:	80 81       	ld	r24, Z
 a4c:	81 11       	cpse	r24, r1
 a4e:	c1 cf       	rjmp	.-126    	; 0x9d2 <vTaskIncrementTick+0xee>
 a50:	b9 cf       	rjmp	.-142    	; 0x9c4 <vTaskIncrementTick+0xe0>
 a52:	80 91 f6 06 	lds	r24, 0x06F6	; 0x8006f6 <uxMissedTicks>
 a56:	8f 5f       	subi	r24, 0xFF	; 255
 a58:	80 93 f6 06 	sts	0x06F6, r24	; 0x8006f6 <uxMissedTicks>
 a5c:	df 91       	pop	r29
 a5e:	cf 91       	pop	r28
 a60:	1f 91       	pop	r17
 a62:	0f 91       	pop	r16
 a64:	08 95       	ret

00000a66 <xTaskResumeAll>:
 a66:	cf 92       	push	r12
 a68:	df 92       	push	r13
 a6a:	ef 92       	push	r14
 a6c:	ff 92       	push	r15
 a6e:	0f 93       	push	r16
 a70:	1f 93       	push	r17
 a72:	cf 93       	push	r28
 a74:	df 93       	push	r29
 a76:	0f b6       	in	r0, 0x3f	; 63
 a78:	f8 94       	cli
 a7a:	0f 92       	push	r0
 a7c:	80 91 f7 06 	lds	r24, 0x06F7	; 0x8006f7 <uxSchedulerSuspended>
 a80:	81 50       	subi	r24, 0x01	; 1
 a82:	80 93 f7 06 	sts	0x06F7, r24	; 0x8006f7 <uxSchedulerSuspended>
 a86:	80 91 f7 06 	lds	r24, 0x06F7	; 0x8006f7 <uxSchedulerSuspended>
 a8a:	81 11       	cpse	r24, r1
 a8c:	5f c0       	rjmp	.+190    	; 0xb4c <xTaskResumeAll+0xe6>
 a8e:	80 91 fd 06 	lds	r24, 0x06FD	; 0x8006fd <uxCurrentNumberOfTasks>
 a92:	81 11       	cpse	r24, r1
 a94:	2f c0       	rjmp	.+94     	; 0xaf4 <xTaskResumeAll+0x8e>
 a96:	5d c0       	rjmp	.+186    	; 0xb52 <xTaskResumeAll+0xec>
 a98:	d7 01       	movw	r26, r14
 a9a:	15 96       	adiw	r26, 0x05	; 5
 a9c:	ed 91       	ld	r30, X+
 a9e:	fc 91       	ld	r31, X
 aa0:	16 97       	sbiw	r26, 0x06	; 6
 aa2:	c6 81       	ldd	r28, Z+6	; 0x06
 aa4:	d7 81       	ldd	r29, Z+7	; 0x07
 aa6:	ce 01       	movw	r24, r28
 aa8:	0c 96       	adiw	r24, 0x0c	; 12
 aaa:	a7 db       	rcall	.-2226   	; 0x1fa <vListRemove>
 aac:	8e 01       	movw	r16, r28
 aae:	0e 5f       	subi	r16, 0xFE	; 254
 ab0:	1f 4f       	sbci	r17, 0xFF	; 255
 ab2:	c8 01       	movw	r24, r16
 ab4:	a2 db       	rcall	.-2236   	; 0x1fa <vListRemove>
 ab6:	2e 89       	ldd	r18, Y+22	; 0x16
 ab8:	80 91 f9 06 	lds	r24, 0x06F9	; 0x8006f9 <uxTopReadyPriority>
 abc:	82 17       	cp	r24, r18
 abe:	10 f4       	brcc	.+4      	; 0xac4 <xTaskResumeAll+0x5e>
 ac0:	20 93 f9 06 	sts	0x06F9, r18	; 0x8006f9 <uxTopReadyPriority>
 ac4:	30 e0       	ldi	r19, 0x00	; 0
 ac6:	c9 01       	movw	r24, r18
 ac8:	88 0f       	add	r24, r24
 aca:	99 1f       	adc	r25, r25
 acc:	88 0f       	add	r24, r24
 ace:	99 1f       	adc	r25, r25
 ad0:	88 0f       	add	r24, r24
 ad2:	99 1f       	adc	r25, r25
 ad4:	82 0f       	add	r24, r18
 ad6:	93 1f       	adc	r25, r19
 ad8:	b8 01       	movw	r22, r16
 ada:	89 5d       	subi	r24, 0xD9	; 217
 adc:	98 4f       	sbci	r25, 0xF8	; 248
 ade:	2b db       	rcall	.-2474   	; 0x136 <vListInsertEnd>
 ae0:	e0 91 4b 07 	lds	r30, 0x074B	; 0x80074b <pxCurrentTCB>
 ae4:	f0 91 4c 07 	lds	r31, 0x074C	; 0x80074c <pxCurrentTCB+0x1>
 ae8:	9e 89       	ldd	r25, Y+22	; 0x16
 aea:	86 89       	ldd	r24, Z+22	; 0x16
 aec:	98 17       	cp	r25, r24
 aee:	58 f0       	brcs	.+22     	; 0xb06 <xTaskResumeAll+0xa0>
 af0:	dc 2c       	mov	r13, r12
 af2:	09 c0       	rjmp	.+18     	; 0xb06 <xTaskResumeAll+0xa0>
 af4:	d1 2c       	mov	r13, r1
 af6:	0f 2e       	mov	r0, r31
 af8:	f8 e0       	ldi	r31, 0x08	; 8
 afa:	ef 2e       	mov	r14, r31
 afc:	f7 e0       	ldi	r31, 0x07	; 7
 afe:	ff 2e       	mov	r15, r31
 b00:	f0 2d       	mov	r31, r0
 b02:	cc 24       	eor	r12, r12
 b04:	c3 94       	inc	r12
 b06:	f7 01       	movw	r30, r14
 b08:	80 81       	ld	r24, Z
 b0a:	81 11       	cpse	r24, r1
 b0c:	c5 cf       	rjmp	.-118    	; 0xa98 <xTaskResumeAll+0x32>
 b0e:	80 91 f6 06 	lds	r24, 0x06F6	; 0x8006f6 <uxMissedTicks>
 b12:	88 23       	and	r24, r24
 b14:	79 f0       	breq	.+30     	; 0xb34 <xTaskResumeAll+0xce>
 b16:	80 91 f6 06 	lds	r24, 0x06F6	; 0x8006f6 <uxMissedTicks>
 b1a:	88 23       	and	r24, r24
 b1c:	91 f0       	breq	.+36     	; 0xb42 <xTaskResumeAll+0xdc>
 b1e:	e2 de       	rcall	.-572    	; 0x8e4 <vTaskIncrementTick>
 b20:	80 91 f6 06 	lds	r24, 0x06F6	; 0x8006f6 <uxMissedTicks>
 b24:	81 50       	subi	r24, 0x01	; 1
 b26:	80 93 f6 06 	sts	0x06F6, r24	; 0x8006f6 <uxMissedTicks>
 b2a:	80 91 f6 06 	lds	r24, 0x06F6	; 0x8006f6 <uxMissedTicks>
 b2e:	81 11       	cpse	r24, r1
 b30:	f6 cf       	rjmp	.-20     	; 0xb1e <xTaskResumeAll+0xb8>
 b32:	07 c0       	rjmp	.+14     	; 0xb42 <xTaskResumeAll+0xdc>
 b34:	f1 e0       	ldi	r31, 0x01	; 1
 b36:	df 16       	cp	r13, r31
 b38:	21 f0       	breq	.+8      	; 0xb42 <xTaskResumeAll+0xdc>
 b3a:	80 91 f5 06 	lds	r24, 0x06F5	; 0x8006f5 <xMissedYield>
 b3e:	81 30       	cpi	r24, 0x01	; 1
 b40:	39 f4       	brne	.+14     	; 0xb50 <xTaskResumeAll+0xea>
 b42:	10 92 f5 06 	sts	0x06F5, r1	; 0x8006f5 <xMissedYield>
 b46:	c4 dc       	rcall	.-1656   	; 0x4d0 <vPortYield>
 b48:	81 e0       	ldi	r24, 0x01	; 1
 b4a:	03 c0       	rjmp	.+6      	; 0xb52 <xTaskResumeAll+0xec>
 b4c:	80 e0       	ldi	r24, 0x00	; 0
 b4e:	01 c0       	rjmp	.+2      	; 0xb52 <xTaskResumeAll+0xec>
 b50:	80 e0       	ldi	r24, 0x00	; 0
 b52:	0f 90       	pop	r0
 b54:	0f be       	out	0x3f, r0	; 63
 b56:	df 91       	pop	r29
 b58:	cf 91       	pop	r28
 b5a:	1f 91       	pop	r17
 b5c:	0f 91       	pop	r16
 b5e:	ff 90       	pop	r15
 b60:	ef 90       	pop	r14
 b62:	df 90       	pop	r13
 b64:	cf 90       	pop	r12
 b66:	08 95       	ret

00000b68 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
 b68:	cf 93       	push	r28
 b6a:	df 93       	push	r29
 b6c:	ec 01       	movw	r28, r24
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0U )
 b6e:	89 2b       	or	r24, r25
 b70:	91 f0       	breq	.+36     	; 0xb96 <vTaskDelay+0x2e>
		{
			vTaskSuspendAll();
 b72:	b2 de       	rcall	.-668    	; 0x8d8 <vTaskSuspendAll>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
 b74:	80 91 fb 06 	lds	r24, 0x06FB	; 0x8006fb <xTickCount>
 b78:	90 91 fc 06 	lds	r25, 0x06FC	; 0x8006fc <xTickCount+0x1>
 b7c:	c8 0f       	add	r28, r24
 b7e:	d9 1f       	adc	r29, r25

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
 b80:	80 91 4b 07 	lds	r24, 0x074B	; 0x80074b <pxCurrentTCB>
 b84:	90 91 4c 07 	lds	r25, 0x074C	; 0x80074c <pxCurrentTCB+0x1>
 b88:	02 96       	adiw	r24, 0x02	; 2
 b8a:	37 db       	rcall	.-2450   	; 0x1fa <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
 b8c:	ce 01       	movw	r24, r28
 b8e:	53 dd       	rcall	.-1370   	; 0x636 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 b90:	6a df       	rcall	.-300    	; 0xa66 <xTaskResumeAll>
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 b92:	81 11       	cpse	r24, r1
 b94:	01 c0       	rjmp	.+2      	; 0xb98 <vTaskDelay+0x30>
		{
			portYIELD_WITHIN_API();
 b96:	9c dc       	rcall	.-1736   	; 0x4d0 <vPortYield>
		}
	}
 b98:	df 91       	pop	r29
 b9a:	cf 91       	pop	r28
 b9c:	08 95       	ret

00000b9e <prvIdleTask>:
		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
		{
			vTaskSuspendAll();
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 b9e:	0f 2e       	mov	r0, r31
 ba0:	ff ef       	ldi	r31, 0xFF	; 255
 ba2:	ef 2e       	mov	r14, r31
 ba4:	f6 e0       	ldi	r31, 0x06	; 6
 ba6:	ff 2e       	mov	r15, r31
 ba8:	f0 2d       	mov	r31, r0

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
 baa:	c7 e2       	ldi	r28, 0x27	; 39
 bac:	d7 e0       	ldi	r29, 0x07	; 7
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
 bae:	80 91 fe 06 	lds	r24, 0x06FE	; 0x8006fe <uxTasksDeleted>
 bb2:	88 23       	and	r24, r24
 bb4:	29 f1       	breq	.+74     	; 0xc00 <prvIdleTask+0x62>
		{
			vTaskSuspendAll();
 bb6:	90 de       	rcall	.-736    	; 0x8d8 <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 bb8:	d7 01       	movw	r26, r14
 bba:	1c 91       	ld	r17, X
			xTaskResumeAll();
 bbc:	54 df       	rcall	.-344    	; 0xa66 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
 bbe:	11 23       	and	r17, r17
 bc0:	f9 f0       	breq	.+62     	; 0xc00 <prvIdleTask+0x62>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
 bc2:	0f b6       	in	r0, 0x3f	; 63
 bc4:	f8 94       	cli
 bc6:	0f 92       	push	r0
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
 bc8:	d7 01       	movw	r26, r14
 bca:	15 96       	adiw	r26, 0x05	; 5
 bcc:	ed 91       	ld	r30, X+
 bce:	fc 91       	ld	r31, X
 bd0:	16 97       	sbiw	r26, 0x06	; 6
 bd2:	06 81       	ldd	r16, Z+6	; 0x06
 bd4:	17 81       	ldd	r17, Z+7	; 0x07
					vListRemove( &( pxTCB->xGenericListItem ) );
 bd6:	c8 01       	movw	r24, r16
 bd8:	02 96       	adiw	r24, 0x02	; 2
 bda:	0f db       	rcall	.-2530   	; 0x1fa <vListRemove>
					--uxCurrentNumberOfTasks;
 bdc:	80 91 fd 06 	lds	r24, 0x06FD	; 0x8006fd <uxCurrentNumberOfTasks>
 be0:	81 50       	subi	r24, 0x01	; 1
 be2:	80 93 fd 06 	sts	0x06FD, r24	; 0x8006fd <uxCurrentNumberOfTasks>
					--uxTasksDeleted;
 be6:	80 91 fe 06 	lds	r24, 0x06FE	; 0x8006fe <uxTasksDeleted>
 bea:	81 50       	subi	r24, 0x01	; 1
 bec:	80 93 fe 06 	sts	0x06FE, r24	; 0x8006fe <uxTasksDeleted>
				}
				taskEXIT_CRITICAL();
 bf0:	0f 90       	pop	r0
 bf2:	0f be       	out	0x3f, r0	; 63
		want to allocate and clean RAM statically. */
		portCLEAN_UP_TCB( pxTCB );

		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
 bf4:	f8 01       	movw	r30, r16
 bf6:	87 89       	ldd	r24, Z+23	; 0x17
 bf8:	90 8d       	ldd	r25, Z+24	; 0x18
 bfa:	8a da       	rcall	.-2796   	; 0x110 <vPortFree>
		vPortFree( pxTCB );
 bfc:	c8 01       	movw	r24, r16
 bfe:	88 da       	rcall	.-2800   	; 0x110 <vPortFree>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
 c00:	88 81       	ld	r24, Y
 c02:	82 30       	cpi	r24, 0x02	; 2
 c04:	a0 f2       	brcs	.-88     	; 0xbae <prvIdleTask+0x10>
			{
				taskYIELD();
 c06:	64 dc       	rcall	.-1848   	; 0x4d0 <vPortYield>
 c08:	d2 cf       	rjmp	.-92     	; 0xbae <prvIdleTask+0x10>

00000c0a <vTaskSwitchContext>:
#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
 c0a:	80 91 f7 06 	lds	r24, 0x06F7	; 0x8006f7 <uxSchedulerSuspended>
 c0e:	81 11       	cpse	r24, r1
 c10:	13 c0       	rjmp	.+38     	; 0xc38 <vTaskSwitchContext+0x2e>
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
 c12:	80 91 f9 06 	lds	r24, 0x06F9	; 0x8006f9 <uxTopReadyPriority>
 c16:	90 e0       	ldi	r25, 0x00	; 0
 c18:	fc 01       	movw	r30, r24
 c1a:	ee 0f       	add	r30, r30
 c1c:	ff 1f       	adc	r31, r31
 c1e:	ee 0f       	add	r30, r30
 c20:	ff 1f       	adc	r31, r31
 c22:	ee 0f       	add	r30, r30
 c24:	ff 1f       	adc	r31, r31
 c26:	8e 0f       	add	r24, r30
 c28:	9f 1f       	adc	r25, r31
 c2a:	fc 01       	movw	r30, r24
 c2c:	e9 5d       	subi	r30, 0xD9	; 217
 c2e:	f8 4f       	sbci	r31, 0xF8	; 248
 c30:	80 81       	ld	r24, Z
 c32:	88 23       	and	r24, r24
 c34:	29 f0       	breq	.+10     	; 0xc40 <vTaskSwitchContext+0x36>
 c36:	1b c0       	rjmp	.+54     	; 0xc6e <vTaskSwitchContext+0x64>
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
 c38:	81 e0       	ldi	r24, 0x01	; 1
 c3a:	80 93 f5 06 	sts	0x06F5, r24	; 0x8006f5 <xMissedYield>
 c3e:	08 95       	ret
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
		{
			configASSERT( uxTopReadyPriority );
			--uxTopReadyPriority;
 c40:	80 91 f9 06 	lds	r24, 0x06F9	; 0x8006f9 <uxTopReadyPriority>
 c44:	81 50       	subi	r24, 0x01	; 1
 c46:	80 93 f9 06 	sts	0x06F9, r24	; 0x8006f9 <uxTopReadyPriority>
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
 c4a:	80 91 f9 06 	lds	r24, 0x06F9	; 0x8006f9 <uxTopReadyPriority>
 c4e:	90 e0       	ldi	r25, 0x00	; 0
 c50:	fc 01       	movw	r30, r24
 c52:	ee 0f       	add	r30, r30
 c54:	ff 1f       	adc	r31, r31
 c56:	ee 0f       	add	r30, r30
 c58:	ff 1f       	adc	r31, r31
 c5a:	ee 0f       	add	r30, r30
 c5c:	ff 1f       	adc	r31, r31
 c5e:	8e 0f       	add	r24, r30
 c60:	9f 1f       	adc	r25, r31
 c62:	fc 01       	movw	r30, r24
 c64:	e9 5d       	subi	r30, 0xD9	; 217
 c66:	f8 4f       	sbci	r31, 0xF8	; 248
 c68:	80 81       	ld	r24, Z
 c6a:	88 23       	and	r24, r24
 c6c:	49 f3       	breq	.-46     	; 0xc40 <vTaskSwitchContext+0x36>
			--uxTopReadyPriority;
		}
	
		/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the tasks of the
		same priority get an equal share of the processor time. */
		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
 c6e:	80 91 f9 06 	lds	r24, 0x06F9	; 0x8006f9 <uxTopReadyPriority>
 c72:	90 e0       	ldi	r25, 0x00	; 0
 c74:	9c 01       	movw	r18, r24
 c76:	22 0f       	add	r18, r18
 c78:	33 1f       	adc	r19, r19
 c7a:	22 0f       	add	r18, r18
 c7c:	33 1f       	adc	r19, r19
 c7e:	22 0f       	add	r18, r18
 c80:	33 1f       	adc	r19, r19
 c82:	28 0f       	add	r18, r24
 c84:	39 1f       	adc	r19, r25
 c86:	d9 01       	movw	r26, r18
 c88:	a9 5d       	subi	r26, 0xD9	; 217
 c8a:	b8 4f       	sbci	r27, 0xF8	; 248
 c8c:	11 96       	adiw	r26, 0x01	; 1
 c8e:	ed 91       	ld	r30, X+
 c90:	fc 91       	ld	r31, X
 c92:	12 97       	sbiw	r26, 0x02	; 2
 c94:	02 80       	ldd	r0, Z+2	; 0x02
 c96:	f3 81       	ldd	r31, Z+3	; 0x03
 c98:	e0 2d       	mov	r30, r0
 c9a:	12 96       	adiw	r26, 0x02	; 2
 c9c:	fc 93       	st	X, r31
 c9e:	ee 93       	st	-X, r30
 ca0:	11 97       	sbiw	r26, 0x01	; 1
 ca2:	26 5d       	subi	r18, 0xD6	; 214
 ca4:	38 4f       	sbci	r19, 0xF8	; 248
 ca6:	e2 17       	cp	r30, r18
 ca8:	f3 07       	cpc	r31, r19
 caa:	29 f4       	brne	.+10     	; 0xcb6 <vTaskSwitchContext+0xac>
 cac:	22 81       	ldd	r18, Z+2	; 0x02
 cae:	33 81       	ldd	r19, Z+3	; 0x03
 cb0:	fd 01       	movw	r30, r26
 cb2:	32 83       	std	Z+2, r19	; 0x02
 cb4:	21 83       	std	Z+1, r18	; 0x01
 cb6:	fc 01       	movw	r30, r24
 cb8:	ee 0f       	add	r30, r30
 cba:	ff 1f       	adc	r31, r31
 cbc:	ee 0f       	add	r30, r30
 cbe:	ff 1f       	adc	r31, r31
 cc0:	ee 0f       	add	r30, r30
 cc2:	ff 1f       	adc	r31, r31
 cc4:	8e 0f       	add	r24, r30
 cc6:	9f 1f       	adc	r25, r31
 cc8:	fc 01       	movw	r30, r24
 cca:	e9 5d       	subi	r30, 0xD9	; 217
 ccc:	f8 4f       	sbci	r31, 0xF8	; 248
 cce:	01 80       	ldd	r0, Z+1	; 0x01
 cd0:	f2 81       	ldd	r31, Z+2	; 0x02
 cd2:	e0 2d       	mov	r30, r0
 cd4:	86 81       	ldd	r24, Z+6	; 0x06
 cd6:	97 81       	ldd	r25, Z+7	; 0x07
 cd8:	90 93 4c 07 	sts	0x074C, r25	; 0x80074c <pxCurrentTCB+0x1>
 cdc:	80 93 4b 07 	sts	0x074B, r24	; 0x80074b <pxCurrentTCB>
 ce0:	08 95       	ret

00000ce2 <memset>:
 ce2:	dc 01       	movw	r26, r24
 ce4:	01 c0       	rjmp	.+2      	; 0xce8 <memset+0x6>
 ce6:	6d 93       	st	X+, r22
 ce8:	41 50       	subi	r20, 0x01	; 1
 cea:	50 40       	sbci	r21, 0x00	; 0
 cec:	e0 f7       	brcc	.-8      	; 0xce6 <memset+0x4>
 cee:	08 95       	ret

00000cf0 <strncpy>:
 cf0:	fb 01       	movw	r30, r22
 cf2:	dc 01       	movw	r26, r24
 cf4:	41 50       	subi	r20, 0x01	; 1
 cf6:	50 40       	sbci	r21, 0x00	; 0
 cf8:	48 f0       	brcs	.+18     	; 0xd0c <strncpy+0x1c>
 cfa:	01 90       	ld	r0, Z+
 cfc:	0d 92       	st	X+, r0
 cfe:	00 20       	and	r0, r0
 d00:	c9 f7       	brne	.-14     	; 0xcf4 <strncpy+0x4>
 d02:	01 c0       	rjmp	.+2      	; 0xd06 <strncpy+0x16>
 d04:	1d 92       	st	X+, r1
 d06:	41 50       	subi	r20, 0x01	; 1
 d08:	50 40       	sbci	r21, 0x00	; 0
 d0a:	e0 f7       	brcc	.-8      	; 0xd04 <strncpy+0x14>
 d0c:	08 95       	ret

00000d0e <_exit>:
 d0e:	f8 94       	cli

00000d10 <__stop_program>:
 d10:	ff cf       	rjmp	.-2      	; 0xd10 <__stop_program>
